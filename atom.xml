<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Rounding Off</title>
	<subtitle>writing is much easier than remembering</subtitle>
	<link href="https://js970.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://js970.github.io/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-07-16T00:00:00+00:00</updated>
	<id>https://js970.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>Mbed-CLI</title>
		<published>2023-07-16T00:00:00+00:00</published>
		<updated>2023-07-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/dcmi-interface/" type="text/html"/>
		<id>https://js970.github.io/dcmi-interface/</id>
		<content type="html">&lt;h2 id=&quot;digital-camera-interface-dcmi-ran&quot;&gt;Digital Camera Interface(DCMI)란?&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;The digital camera is a synchronous parallel interface able to receive a high-speed data flow from an external 8, 10, 12 or 14 bit CMOS camera module. It supports different data formats(YCbCr4:2:2&#x2F;RGB565 progressive video, JPEG). This interface is for use with black &amp;amp; white cameras(also X24, X5) and it is assumed that all preprocessing like resizing is performed in the camera module.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;디지털 카메라는 외장 8, 10, 12, 14비트 CMOS Camera module로부터 high-speed data flow를 수신 가능한 동기식 병렬 인터페이스이다.&lt;&#x2F;li&gt;
&lt;li&gt;YCbCr4:2:2&#x2F;RGB565 progressive video, JPEG포멧을 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 인터페이스는 흑백 카메라, X24, X5등의 카메라에 사용되며, 크기 조정과 같은 모든 전처리 과정은 카메라 모듈에서 수행된다고 가정한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cuga-jjeonbo&quot;&gt;추가 정보&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMOS&lt;&#x2F;code&gt; : Complementary Metal-Oxide-Semiconductor, 일반적으로 디지털 카메라 센서, 메모리 칩, 마이크로프로세서 등에서 널리 사용된다. 빛을 전기 신호로 변환하는 기능을 가지고 있으며, 이 신호는 카메라 사용자가 사진이나 동영상을 볼 수 있도록 한다. 즉 그냥 디지털 카메라의 이미지 센서를 의미한다고 생각하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;STM32보드에서는 2017년에 DCMI인터페이스가 소개되기 전까지 카메라 사용에 문제가 있었지만, Aruducam에서 제공하는 SPI카메라 모듈을 이용하여 카메라의 사용이 가능하기는 하다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arducam.com&#x2F;spi-camera-modules-for-all-stm32-boards&#x2F;&quot;&gt;SPI camera&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dcmi-functional-overview&quot;&gt;DCMI functional overview&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;The digital camera interface is a synchronous parallel interface that can receive high-speed(up to 54 Mbytes&#x2F;s) data flows. It consists of up to 14 data lines and a pixel clock line. The pixel clock has a programmable polarity, so that data can be captured on either the rising or the falling edge of the pixel clock.
The data are packed into a 32-bit data register(DCMI_DR) and then transferred through a general-purpose DMA channel. The image buffer is managed by the DMA, not by the camera interface.
The data received from the camera can be organized in lines&#x2F;frames or can be a sequence of JPEG images. To enable JPEG image reception, the JPEG bit must be set.
The data flow is synchronized either by hardware using the optional DCMI_HSYNC and DCMI_VSYNC signals or by synchronization codes embedded in the data flow.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Raspbian on Raspberry pi 4</title>
		<published>2023-07-16T00:00:00+00:00</published>
		<updated>2023-07-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/raspbian-on-raspberry-pi-4/" type="text/html"/>
		<id>https://js970.github.io/raspbian-on-raspberry-pi-4/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;본 글에서는 Raspberry Pi 4(4GB)에 Raspbian운영체제를 설치하는 과정에 대해 다룬다.
SD 카드에 Rsapbian 운영체제 이미지를 굽는 과정은 Windows 11에서 진행했다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Hardware prerequisites
&lt;ul&gt;
&lt;li&gt;SD Card&lt;&#x2F;li&gt;
&lt;li&gt;SD Card reader(USB)&lt;&#x2F;li&gt;
&lt;li&gt;Raspberry Pi Model B (4GB)&lt;&#x2F;li&gt;
&lt;li&gt;mini HDMI(optional)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Software prerequisites
&lt;ul&gt;
&lt;li&gt;SD Card Formatter&lt;&#x2F;li&gt;
&lt;li&gt;Raspberry Pi imager&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sd-card-format&quot;&gt;SD Card Format&lt;&#x2F;h3&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Raspbian_on_raspberry&#x2F;format.png&quot; alt=&quot;SD Card Format&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;라즈비안을 설치하기 위해 SD카드를 포멧해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sdcard.org&#x2F;downloads&#x2F;formatter&#x2F;sd-memory-card-formatter-for-windows-download&#x2F;&quot;&gt;SD Card Formatter&lt;&#x2F;a&gt;를 이용하여 SD카드 포멧을 진행할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Overwrite format을 선택하여 확실하게 포멧을 진행한다.&lt;&#x2F;li&gt;
&lt;li&gt;Volume label은 원하는 이름을 기입한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;raspberry-pi-imagerreul-sahyonhae-imiji-ggugi&quot;&gt;Raspberry Pi Imager를 사용해 이미지 굽기&lt;&#x2F;h3&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi Imager 실행 모습&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Raspbian_on_raspberry&#x2F;iamger.png&quot; alt=&quot;Raspberry Pi Imager&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;설치할 운영체제 선택&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Raspbian_on_raspberry&#x2F;os_select.png&quot; alt=&quot;Raspberry Pi OS Full 32bit&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;설치할 저장소 선택&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Raspbian_on_raspberry&#x2F;storage_select.png&quot; alt=&quot;storage select&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;저장소에 이미지 굽기&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Raspbian_on_raspberry&#x2F;image_install.png&quot; alt=&quot;download image&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이미지 다운로드 완료&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Raspbian_on_raspberry&#x2F;download_complete.png&quot; alt=&quot;download complete&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이미지 설치 완료 후 첫 부팅&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Raspbian_on_raspberry&#x2F;installed.png&quot; alt=&quot;booted&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;설정 및 업데이트 완료&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Raspbian_on_raspberry&#x2F;complete.png&quot; alt=&quot;Complete&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zifmfmphantom.tistory.com&#x2F;113&quot;&gt;천보기의 IT 학습마당&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Make update</title>
		<published>2023-06-25T00:00:00+00:00</published>
		<updated>2023-06-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/make-update/" type="text/html"/>
		<id>https://js970.github.io/make-update/</id>
		<content type="html">&lt;h2 id=&quot;make-update&quot;&gt;Make update&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;TinyML의 예제 실습 중 make 3.8.2를 써야 하는 상황이 발생했다.&lt;&#x2F;p&gt;
&lt;p&gt;그런데... macOS X에서는 기본적으로 제공되는 make 버전에 대해 더 이상 업데이트 해 주지 않는다.&lt;&#x2F;p&gt;
&lt;p&gt;즉, Homebrew를 사용하여 최신 버전의 make를 설치하는 방법으로는 업데이트가 불가능하다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;update&quot;&gt;update&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;GNU make 소스 코드를 직접 &lt;a href=&quot;https:&#x2F;&#x2F;ftp.gnu.org&#x2F;gnu&#x2F;make&#x2F;&quot;&gt;다운로드&lt;&#x2F;a&gt;하여 컴파일 및 설치를 진행해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;다운로드 받은 뒤에는 압축을 해제한 폴더에서 아래 명령어들을 입력하면 설치가 완료된다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;configure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; make install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이후 터미널을 종료 후 재실행하여 make버전을 확인해 보면 업데이트 된 것을 볼 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mbed-CLI</title>
		<published>2023-06-25T00:00:00+00:00</published>
		<updated>2023-06-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/mbed-cli-hwanggyeongucug/" type="text/html"/>
		<id>https://js970.github.io/mbed-cli-hwanggyeongucug/</id>
		<content type="html">&lt;h2 id=&quot;mbed-cli-hwanggyeon-gucug&quot;&gt;Mbed-CLI 환경 구축&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;STM32F746G-disco보드의 실습을 위해 STM32CubeIDE를 설치했지만, TinyML(한빛미디어, 2020.8)책에서는 Mbed-CLI를 이용하여 빌드를 진행했다. 우선은 책의 내용을 따라가기 위해 Mbed-CLI환경을 구축해 보았다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;prerequisites&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;python3.x 이상&lt;&#x2F;li&gt;
&lt;li&gt;git&lt;&#x2F;li&gt;
&lt;li&gt;Mercurial 2.2.2 이상(분산 버전 관리 시스템)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mbed-cli-sseocihagi&quot;&gt;Mbed CLI 설치하기&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ARM Mbed tool로는 &lt;code&gt;Keil Studio Cloud&lt;&#x2F;code&gt;, &lt;code&gt;Mbed Studio&lt;&#x2F;code&gt;, &lt;code&gt;Mbed-CLI&lt;&#x2F;code&gt;가 있다. 세 tool 모두 Mbed OS source를 Github또는 mbed.com으로부터 dependency를 고려하여 가져오는 역할을 하고, Mbed OS 위에서 동작하는 코드를 컴파일하여 보드에서 실행시킬 하나의 플래시 파일을 생성한다. 어떤 툴을 사용하던지 상관은 없지만 책에서 사용하는 Mbed CLI를 설치하여 사용해 보기로 했다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip&lt;&#x2F;code&gt;을 이용해 설치할 수 있다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python3 -m&lt;&#x2F;span&gt;&lt;span&gt; pip install mbed-cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Mbed CLI의 업데이트는 아래와 같은 명령어를 통해 진행할 수 있다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python3 -m&lt;&#x2F;span&gt;&lt;span&gt; pip install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -U&lt;&#x2F;span&gt;&lt;span&gt; mbed-cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;keompailreo-sseocihagi&quot;&gt;컴파일러 설치하기&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;컴파일러로는 &lt;code&gt;ARM Compiler 6.16&lt;&#x2F;code&gt;또는 &lt;code&gt;GNU ARM Embedded version 10&lt;&#x2F;code&gt;을 사용할 수 있다. 어떤 것을 사용하든 상관은 없다고 한다. 본 글에서는 &lt;code&gt;ARM Compiler&lt;&#x2F;code&gt;를... 사용하려고 하였으나 Windows 및 Linux설치 파일은 제공하지만 Mac OS X설치파일은 제공하지 않아 &lt;code&gt;GNU ARM Embedded version 10&lt;&#x2F;code&gt;으로 진행했다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;download
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;os.mbed.com&#x2F;docs&#x2F;mbed-os&#x2F;v6.16&#x2F;build-tools&#x2F;index.html#compiler-versions&quot;&gt;ARM Compiler&lt;&#x2F;a&gt;다운로드&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.arm.com&#x2F;downloads&#x2F;-&#x2F;gnu-rm&quot;&gt;GNU ARM Embedded version 10&lt;&#x2F;a&gt; 다운로드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GNU ARM embedded version 10&lt;&#x2F;code&gt;을 다운로드 한 뒤에 설치를 원하는 폴더에서 아래 명령어를 입력하여 압축 해제한다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span&gt; xjf gcc-arm-none-eabi-10.3-2021.10-mac.tar.bz2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;다운로드 받은 파일에 대해서 압축해제 한 것이니 버전이 다른 경우 이름 변경 해야함&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;그리고 아래와 같이 &lt;code&gt;~&#x2F;.zshrc&lt;&#x2F;code&gt;(또는 &lt;code&gt;~&#x2F;.bashrc&lt;&#x2F;code&gt;)에 환경 변수 설정을 추가해 주면 된다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;install_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&#x2F;gcc-arm-none-eabi-10.3-2021.10&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.zshrc&lt;&#x2F;code&gt;파일 로드 후 아래 명령어를 실행시켜 보면 제대로 컴파일러가 설치된 것을 확인할 수 있다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arm-none-eabi-gcc --version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;설치 확인 &amp;amp;&amp;amp; 버전 확인&lt;img src=&quot;&#x2F;image&#x2F;Environment_Settings&#x2F;Mbed-CLI&#x2F;compiler.png&quot; alt=&quot;GNU ARM Embedded version 10&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;확인되지 않은 개발자에 의한 애플리케이션이라 실행할 수 없다는 팝업이 발생하면 Mac의 시스템 설정의 개인정보 보호 및 보안 탭 에서 직접 arm-none-eabi-gcc를 허용해 주어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;더 자세한 정보는 다운로드 파일을 압축 해제했을 때의 루트에서 &#x2F;share&#x2F;doc&#x2F;gcc-arm-none-eabi폴더에 있는 readme.txt에서 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;keompailreo-wici-sseojjeonhagi&quot;&gt;컴파일러 위치 설정하기&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 빌드를 위해서 Mbed CLI는 컴파일러가 설치된 경로를 알아야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 순서로 configuration option을 체크한다.
&lt;ol&gt;
&lt;li&gt;Mbed CLI config(local first, then global)&lt;&#x2F;li&gt;
&lt;li&gt;Environment variables&lt;&#x2F;li&gt;
&lt;li&gt;System path&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 명령어를 입력해서 Mbed CLI configuration을 진행할 수 있다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mbed&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -G&lt;&#x2F;span&gt;&lt;span&gt; MBED_GCC_ARM_PATH ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;install_dir&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;..}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;설치 폴더의 부모 디렉토리를 입력해야 하는 것에 주의하자&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-G&lt;&#x2F;code&gt;옵션을 통해 Mbed project의 로컬 경로 설정이 없다면, 위의 경로를 default 컴파일러 경로로 인식할 것이다.(G : global)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mbed-CLI Tutorial</title>
		<published>2023-06-25T00:00:00+00:00</published>
		<updated>2023-06-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/mbed-cli-tutorial/" type="text/html"/>
		<id>https://js970.github.io/mbed-cli-tutorial/</id>
		<content type="html">&lt;h2 id=&quot;mbed-cli-tutorial&quot;&gt;Mbed-CLI Tutorial&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;Mbed-CLI 환경 구축이 완료되었다면 간단한 예제 프로젝트를 진행하면서 사용법을 익혀 보자.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;1-peurojjeteu-ssaensseon&quot;&gt;1. 프로젝트 생성&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 명령어를 입력하면 &amp;quot;project name&amp;quot; 디렉토리가 생성되며 프로젝트 디렉토리로 설정된다. &lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mbed&lt;&#x2F;span&gt;&lt;span&gt; new &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;project_name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --mbedlib
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--mbedlib&lt;&#x2F;code&gt;옵션은 Mbed library를 사용하는 Mbed OS 2 프로젝트로 생성하는 옵션이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;js970.github.io&#x2F;stm32f746g-disco-tutorial&#x2F;&quot;&gt;STM32F746G-disco Tutorial&lt;&#x2F;a&gt;은 Mbed library를 사용하므로 이 옵션으로 생성해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이외의 자세한 명령어 및 옵션은 &lt;a href=&quot;https:&#x2F;&#x2F;os.mbed.com&#x2F;docs&#x2F;mbed-os&#x2F;v6.16&#x2F;build-tools&#x2F;create.html&quot;&gt;Mbed CLI 1 Create&lt;&#x2F;a&gt;에서 정보를 얻을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;라이브러리를 추가할 때는 아래의 명령어를 사용하면 된다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mbed&lt;&#x2F;span&gt;&lt;span&gt; add http:&#x2F;&#x2F;os.mbed.com&#x2F;teams&#x2F;ST&#x2F;code&#x2F;LCD_DISCO_F746NG&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mbed add&lt;&#x2F;code&gt;뒤에 라이브러리를 입력하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;위에서 추가한 라이브러리는 &lt;a href=&quot;https:&#x2F;&#x2F;js970.github.io&#x2F;stm32f746g-disco-tutorial&#x2F;&quot;&gt;STM32F746G-disco Tutorial&lt;&#x2F;a&gt;에서 사용되는 LCD 라이브러리이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;peurojjeteu-ssaensseon-issue&quot;&gt;프로젝트 생성 Issue&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ARMmbed&#x2F;mbed-cli&#x2F;issues&#x2F;968&quot;&gt;Github Issue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;프로젝트 생성 명령어를 입력했음에도 아래의 진행상황에서 진행이 되지 않을 수 있다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mbed&lt;&#x2F;span&gt;&lt;span&gt; new simple_test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --mbedlib 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[mbed]&lt;&#x2F;span&gt;&lt;span&gt; Working path &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;arvoelke&#x2F;git&#x2F;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; (program)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[mbed]&lt;&#x2F;span&gt;&lt;span&gt; Creating new program &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;simple_test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; (git)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[mbed]&lt;&#x2F;span&gt;&lt;span&gt; Adding library &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mbed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; from &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;mbed.org&#x2F;users&#x2F;mbed_official&#x2F;code&#x2F;mbed&#x2F;builds&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; at branch&#x2F;tag &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[mbed]&lt;&#x2F;span&gt;&lt;span&gt; Downloading library build &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;65be27845400&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; (might take a while)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이건 mbed 문제이므로 아래의 순서로 해결해야 한다.(2023-06-25)
&lt;ol&gt;
&lt;li&gt;mbed-cli 삭제 후 재설치&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; uninstall mbed-cli
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;ARMmbed&#x2F;mbed-cli.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; mbed-cli
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --editable&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;어디에 클론하든 상관은 없다.(본 글에서는 홈 디렉토리에 했다.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;클론한 디렉토리의 &lt;code&gt;mbed&#x2F;mbed.py&lt;&#x2F;code&gt; 의 397행 수정&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;data != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;#39;:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>STM32F746G-disco Tutorial</title>
		<published>2023-06-24T00:00:00+00:00</published>
		<updated>2023-06-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/stm32f746g-disco-tutorial/" type="text/html"/>
		<id>https://js970.github.io/stm32f746g-disco-tutorial/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;본 글에서는 STM32F746G-disco 개발 보드를 이용하여 O&#x27;REILLY의 TinyML도서의 예제를 실행해 볼 것이다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TinyML&#x2F;book.png&quot; alt=&quot;TinyML Book&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jjubimul&quot;&gt;준비물&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;STM32F746G-disco(마이크로컨트롤러 개발보드)&lt;&#x2F;li&gt;
&lt;li&gt;Make(builder) 3.8.2이상&lt;&#x2F;li&gt;
&lt;li&gt;mercurial(파이썬 버전 에러(python@3.11) 발생 시 버전 5.9.3을 명시하면 해결됨)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;os.mbed.com&#x2F;docs&#x2F;mbed-os&#x2F;v6.16&#x2F;introduction&#x2F;index.html&quot;&gt;Mbed CLI&lt;&#x2F;a&gt; - 운영 체제에 맞게 설치할 것, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ARMmbed&#x2F;mbed-cli-osx-installer&#x2F;releases&#x2F;tag&#x2F;v0.0.10&quot;&gt;macOS X&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;아니면 &lt;code&gt;pip&lt;&#x2F;code&gt;을 통해 설치할 수도 있다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install mbed-cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.st.com&#x2F;en&#x2F;development-tools&#x2F;stm32-software-development-tools&#x2F;products.html&quot;&gt;STM32CubeIDE&lt;&#x2F;a&gt;(이클립스 베이스의 통합개발환경)&lt;&#x2F;del&gt;
&lt;ul&gt;
&lt;li&gt;본 책의 예제 실습에서는 사용되지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ggabba-bodde-tesseteu&quot;&gt;개발 보드 테스트&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;새로운 프로젝트를 생성한 뒤 board select에서 STM32F746G-disco보드를 선택하고 Hello World예제를 실행시켜 보았다.&lt;img src=&quot;&#x2F;image&#x2F;TinyML&#x2F;helloWorld.png&quot; alt=&quot;Hello World&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;sainpa-yeceug-modde-ssaensseon-chapter-4&quot;&gt;사인파 예측 모델 생성(Chapter 4)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;colab.research.google.com&#x2F;github&#x2F;yunho0130&#x2F;tensorflow-lite&#x2F;blob&#x2F;master&#x2F;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;hello_world&#x2F;create_sine_model_ko.ipynb&quot;&gt;책의 코드&lt;&#x2F;a&gt;를 직접 쳐 보면서 익혔다.&lt;&#x2F;li&gt;
&lt;li&gt;그래프를 그리는 코드, 양자화 모델을 검증하기 위한 코드, 파일 크기 측정을 위한 코드는 생략했다.&lt;pre data-linenos data-lang=&quot;Python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Python &quot;&gt;&lt;code class=&quot;language-Python&quot; data-lang=&quot;Python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## 종속성 로드
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# TensorFlow는 오픈소스 라이브러리다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 참조: 아래의 코드는 텐서플로우 2버전을 사용함.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;tensorflow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;tf
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(tf.__version__)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 수학 연산에 필요한 Numpy
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 그래프 생성에 필요한 Matplotlib
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;matplotlib.pyplot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;plt
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 파이썬의 수학 라이브러리
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;math
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## 데이터 생성하기
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 아래의 값만큼 데이터 샘플을 생성한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SAMPLES &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 시드 값을 지정하여 이 노트북에서 실행할 때마다 다른 랜덤 값을 얻게 한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 어떤 숫자든 사용할 수 있다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;seed&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9730&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 사인파 진폭의 범위인 0-2π 내에서 균일하게 분포된 난수 집합을 생성한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;x_values = np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniform&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;low&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;high&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*math.pi, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SAMPLES&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 값을 섞어서 생성된 값들이 순서를 따르지 않도록 한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shuffle&lt;&#x2F;span&gt;&lt;span&gt;(x_values)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 해당 사인값을 계산한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;y_values = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(x_values)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## 노이즈 추가
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 사인 함수에 의해 직접 생성되었으므로 부드러운 곡선으로 나타난다. 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 그러나 머신 러닝 모델은 보다 복잡한 실제 데이터에서 패턴을 알아낼 수 있다. 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 이를 위해 데이터에 약간의 노이즈를 추가하여 보다 실제와 비슷한 데이터를 만들어 보자.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;38&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 본 단에서는 각 값에 임의의 노이즈를 추가한 다음 새 그래프를 그린다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;39&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 각 y값에 임의의 작은 숫자를 추가한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;41&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;y_values += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;randn&lt;&#x2F;span&gt;&lt;span&gt;(*y_values.shape)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;43&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## 데이터 분할
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;44&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 실제 데이터와 비슷한 노이즈가 추가된 데이터 세트가 생성되었다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 이 데이터는 모델의 훈련에 사용할 것이다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;46&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 평가에 사용할 데이터를 확보하기 위해 훈련을 시작하기 전에 데이터를 분할하자.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;47&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# vaildation data로 20%, test data로 20%, 나머지 60%은 training data로 분할하자.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;48&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;49&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 각 항목의 인덱스를 계산한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TRAIN_SPLIT &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.6 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SAMPLES&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;51&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_SPLIT &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SAMPLES &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TRAIN_SPLIT&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;52&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;53&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# np.split을 사용하여 데이터를 세 부분으로 자른다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;54&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# np.split의 두 번째 인수는 데이터가 분할되는 인덱스 배열이며, 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;55&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 두 개의 인덱스를 사용하므로 데이터는 총 세 개의 덩어리로 나뉠 것이다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;x_train, x_test, x_validate = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(x_values, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TRAIN_SPLIT&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_SPLIT&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;57&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;y_train, y_test, y_validate = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(y_values, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TRAIN_SPLIT&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST_SPLIT&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;58&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;59&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 분할한 데이터를 합쳤을 때 원래의 사이즈와 같은지 재확인한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt;(x_train.size + x_validate.size + x_test.size) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SAMPLES
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;62&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## 모델 설계
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;63&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 입력값 x를 받아 출력값 sin(x)를 예측하는 모델을 만든다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;64&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# regression(회귀)을 사용하는 모델이다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;65&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 먼저 두 개의 레이어를 정의하자. 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;66&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 첫 번째 레이어는 단일 입력(x값)을 가져와 16개의 뉴런을 통해 활성화된다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;67&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 이 입력에 따라 각 뉴런은 내부 상태에 따라 어느 정도까지 활성화 된다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;68&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 뉴런의 활성화 정도는 숫자로 표현된다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;69&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 첫 번째 레이어의 활성화 정도는 두 번째 레이어에 입력으로 공급된다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;70&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 이 입력에 자체 가중치와 바이어스를 적용하고 활성화 정도를 계산하여 y값으로 출력한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;71&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;72&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 간단한 모델 구조를 만들기 위해 케라스를 사용한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;73&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;tensorflow.keras &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;layers
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;74&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;model_2 = tf.keras.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sequential&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;75&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;76&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 첫 번째 레이어는 스칼라 입력을 받아 16개의 뉴런을 통해 전달하고,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;77&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 뉴런은 &amp;#39;relu&amp;#39; 활성화 함수에 따라 활성화 여부를 결정한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;78&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;model_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(layers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;activation&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;relu&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input_shape&lt;&#x2F;span&gt;&lt;span&gt;=(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,)))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;79&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;80&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 새로운 두 번째 레이어는 네트워크가 더 복잡한 표현을 배우는 데 도움을 준다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;81&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;model_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(layers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;activation&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;relu&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;82&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;83&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 단일 값을 출력해야 하기 때문에 최종 레이어는 단일 뉴런으로 구성된다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;model_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(layers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Dense&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;85&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;86&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 표준 옵티마이저 및 손실 함수를 사용하여 회귀 모델을 컴파일한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;87&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;model_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;optimizer&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rmsprop&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loss&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mse&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metrics&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mae&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;])
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;88&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;89&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 모델 훈련
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;history_2 = model_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fit&lt;&#x2F;span&gt;&lt;span&gt;(x_train, y_train, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;epochs&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;600&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;91&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validation_data&lt;&#x2F;span&gt;&lt;span&gt;=(x_validate, y_validate))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;92&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;93&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 테스트 데이터셋의 손실 계산 및 출력
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;94&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;loss = model_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;evaluate&lt;&#x2F;span&gt;&lt;span&gt;(x_test, y_test)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;95&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;96&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 테스트 데이터셋 기반으로 예측
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;97&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;predictions = model_2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;predict&lt;&#x2F;span&gt;&lt;span&gt;(x_test)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;98&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;99&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 실제값에 대한 예측 그래프
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clf&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;101&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Comparison of predictions and actual values&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;102&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(x_test, y_test, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Actual&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;103&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(x_test, predictions, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Predicted&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;104&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;legend&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;105&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;106&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;107&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## TensorFlow Lite로 변환
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;108&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 앞서 생성한 모델을 마이크로컨트롤러에 배포하기 위해 양자화를 수행한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;109&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 양자화를 통해 모델 가중치의 정밀도를 낮추어 정확도에 큰 영향을 미치지
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;110&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 않으면서 메모리를 절약할 수 있다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;111&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 양자화를 통해 모델 추론에 필요한 계산이 더 간단해지기 때문에 경량화 뿐만 아니라
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;112&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 실행속도 역시 빨라진다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;113&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;114&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 양자화하여 모델을 텐서플로우 라이트 형식으로 변환
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;115&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;converter = tf.lite.TFLiteConverter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_keras_model&lt;&#x2F;span&gt;&lt;span&gt;(model_2)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;116&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;converter.optimizations = [tf.lite.Optimize.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OPTIMIZE_FOR_SIZE&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;117&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;tflite_model = converter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;convert&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;118&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;119&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 모델 저장
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;120&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sine_model_quantized.tflite&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wb&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(tflite_model)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 프로그램을 실행시키면 tflite파일이 생성된다. 이를 마이크로컨트롤러에서 사용할 수 있도록 c언어로 변환해야 한다. &lt;&#x2F;li&gt;
&lt;li&gt;아래 명령어를 입력하여 학습 모델을 cc파일로 변환한다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xxd -i&lt;&#x2F;span&gt;&lt;span&gt; sine_modelquantized.tflite &amp;gt; sine_model_quantized.cc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;c언어로 변환된 파일은 다음과 같다.&lt;img src=&quot;&#x2F;image&#x2F;TinyML&#x2F;convertedModel.png&quot; alt=&quot;converted model&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;aepeulrikeissyeo-gucug-chapter-5&quot;&gt;애플리케이션 구축(Chapter 5)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;modde-tesseteu&quot;&gt;모델 테스트&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yunho0130&#x2F;tensorflow-lite&#x2F;tree&#x2F;master&#x2F;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;hello_world&quot;&gt;책의 코드&lt;&#x2F;a&gt;를 클론하여 진행했다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 책의 내용을 바탕으로 앞서 생성한 모델에 대해 테스트를 수행하는 코드를 분석한 것이다.&lt;pre data-linenos data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;hello_world&#x2F;sine_model_data.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;kernels&#x2F;all_ops_resolver.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;micro_error_reporter.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;micro_interpreter.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;testing&#x2F;micro_test.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;schema&#x2F;schema_generated.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;version.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;TF_LITE_MICRO_TESTS_BEGIN
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_TEST&lt;&#x2F;span&gt;&lt;span&gt;(LoadModelAndPerformInference) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 로깅(logging)을 위한 객체 생성
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  tflite::MicroErrorReporter micro_error_reporter;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  tflite::ErrorReporter* error_reporter = &amp;amp;micro_error_reporter;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델을 사용 가능한 데이터 구조에 매핑한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 복사, 파싱을 포함하지 않는 가벼운 작업이다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; tflite::Model* model = ::tflite::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetModel&lt;&#x2F;span&gt;&lt;span&gt;(g_sine_model_data);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 현재 사용중인 텐서플로 라이트 라이브러리의 버전과 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델의 텐서플로 라이트 라이브러리의 버전에 대해 검사를 수행한다. 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 버전이 일치하지 않아도 진행은 되지만 아래의 에러 메시지를 출력한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(model-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;() != TFLITE_SCHEMA_VERSION) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_REPORT_ERROR&lt;&#x2F;span&gt;&lt;span&gt;(error_reporter,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                         &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Model provided is schema version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; not equal &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                         &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;to supported version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                         model-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;(), TFLITE_SCHEMA_VERSION);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 필요한 모든 operation 구현을 가져온다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  tflite::ops::micro::AllOpsResolver resolver;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력, 출력, 중간 배열에 사용할 메모리 영역을 생성한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델 최솟값을 찾으려면 시행착오가 필요하다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 이 메모리 영역은 모델의 입력, 출력, 중간 텐서를 저장하는 데 사용된다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 이 영역을 텐서 아레나(tensor_arena) 라고 부른다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 본 예제에서는 크기가 2048바이트인 배열을 할당했다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; tensor_arena_size = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;38&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  uint8_t tensor_arena[tensor_arena_size];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;39&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델을 실행하기 위한 인터프리터를 빌드한다. 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;41&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 앞서 선언한 인스턴스가 파라미터로 사용되는 것을 확인할 수 있다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  tflite::MicroInterpreter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interpreter&lt;&#x2F;span&gt;&lt;span&gt;(model, resolver, tensor_arena,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;43&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                                       tensor_arena_size, error_reporter);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;44&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델의 텐서에 대한 tensor_arena의 메모리를 할당한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;46&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(interpreter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AllocateTensors&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteOk&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;47&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;48&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델의 입력 텐서에 대한 포인터 얻기
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;49&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  TfLiteTensor* input = interpreter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;51&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력이 예상하는 속성을 갖는지 확인
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;52&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_NE&lt;&#x2F;span&gt;&lt;span&gt;(nullptr, input);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;53&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dims 속성은 텐서 모양을 알려준다. 각 차원마다 원소는 하나다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;54&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력은 한 개의 요소를 포함하는 2D 텐서이므로 dims의 크기는 2다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;55&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, input-&amp;gt;dims-&amp;gt;size);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 각 원소의 값은 해당 텐서의 길이를 제공한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;57&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 두 개의 단일 원소 텐서(하나가 다른 하나에 포함됨)를 갖는지 확인한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;58&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, input-&amp;gt;dims-&amp;gt;data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;59&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, input-&amp;gt;dims-&amp;gt;data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력은 32비트 부동소수점 값이다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteFloat32&lt;&#x2F;span&gt;&lt;span&gt;, input-&amp;gt;type);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;62&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;63&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력값 텐서 제공
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;64&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  input-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;65&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;66&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력값으로 모델을 실행하고 성공 여부를 확인한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;67&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  TfLiteStatus invoke_status = interpreter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Invoke&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;68&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteOk&lt;&#x2F;span&gt;&lt;span&gt;, invoke_status);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;69&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;70&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델의 출력 텐서에 대한 포인터를 얻는다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;71&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력 텐서의 경우와 마찬가지로 예상되는 속성을 갖는지 확인한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;72&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  TfLiteTensor* output = interpreter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;73&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, output-&amp;gt;dims-&amp;gt;size);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;74&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, input-&amp;gt;dims-&amp;gt;data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;75&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, input-&amp;gt;dims-&amp;gt;data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;76&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteFloat32&lt;&#x2F;span&gt;&lt;span&gt;, output-&amp;gt;type);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;77&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;78&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 텐서의 출력값을 획득
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;79&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; value = output-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;80&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 출력값과 예상 값의 차이가 0.05범위에 있는지 확인
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;81&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_NEAR&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;82&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;83&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델이 작동하고 있음을 추가로 검증하기 위해 3회의 추론을 더 실행한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 추론 - 1
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;85&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  input-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;86&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  invoke_status = interpreter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Invoke&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;87&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteOk&lt;&#x2F;span&gt;&lt;span&gt;, invoke_status);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;88&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;89&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  value = output-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_NEAR&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.841&lt;&#x2F;span&gt;&lt;span&gt;, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;91&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;92&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 추론 - 2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;93&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  input-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;94&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  invoke_status = interpreter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Invoke&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;95&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteOk&lt;&#x2F;span&gt;&lt;span&gt;, invoke_status);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;96&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;97&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  value = output-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;98&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_NEAR&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.141&lt;&#x2F;span&gt;&lt;span&gt;, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;99&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 추론 - 3
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;101&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  input-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;102&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  invoke_status = interpreter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Invoke&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;103&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_EQ&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteOk&lt;&#x2F;span&gt;&lt;span&gt;, invoke_status);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;104&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;105&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  value = output-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;106&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_MICRO_EXPECT_NEAR&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.959&lt;&#x2F;span&gt;&lt;span&gt;, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;107&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;108&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;109&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;TF_LITE_MICRO_TESTS_END
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이 코드는 결국 마이크로컨트롤러에서 실행되도록 설계되었지만 개발 시스템에서 테스트를 빌드하고 실행하는 것 역시 가능하다.
&lt;ul&gt;
&lt;li&gt;이를 통해 코드 작성과 디버깅이 훨씬 쉬워진다.&lt;&#x2F;li&gt;
&lt;li&gt;PC는 마이크로컨트롤러와 비교하여 출력을 로깅하고 코드를 검토하기에 훨씬 편리하므로 효율이 좋다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Make를 사용하여 테스트를 실행한 결과는 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;TinyML&#x2F;test.png&quot; alt=&quot;test&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;modde-jjeohyonhagi&quot;&gt;모델 적용하기&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;프로젝트 파일 구조는 아래와 같다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constants.h&lt;&#x2F;code&gt;, &lt;code&gt;constants.cc&lt;&#x2F;code&gt; : 프로그램 동작을 정의하는 데 중요한 영향을 미치는 다양한 상수를 포함하는 파일&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;main.cc&lt;&#x2F;code&gt; : 애플리케이션의 메인 함수&lt;pre data-linenos data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;hello_world&#x2F;main_functions.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; standard C entry point를 준수하는 시스템의 default main 함수이다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; FreeRTOS, ESP32등 다른 requirements를 요구하는 기기의 경우 그에 맞게 구조를 변경해야 한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[]) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;main_functions.h&lt;&#x2F;code&gt;, &lt;code&gt;main_functions.cc&lt;&#x2F;code&gt; : 프로그램에 필요한 모든 초기화를 수행하는 &lt;code&gt;setup()&lt;&#x2F;code&gt;함수와 프로그램의 핵심 로직을 포함하고 루프를 순회하면서 상태 머신을 구동하도록 설계된 &lt;code&gt;loop()&lt;&#x2F;code&gt;함수를 정의하는 파일 쌍이다. 이 함수들은 프로그램이 시작될 때 &lt;code&gt;main.cc&lt;&#x2F;code&gt;에 의해 호출된다.&lt;pre data-linenos data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;hello_world&#x2F;main_functions.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;hello_world&#x2F;constants.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;hello_world&#x2F;output_handler.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;examples&#x2F;hello_world&#x2F;sine_model_data.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;kernels&#x2F;all_ops_resolver.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;micro_error_reporter.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;micro&#x2F;micro_interpreter.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;schema&#x2F;schema_generated.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tensorflow&#x2F;lite&#x2F;version.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main_functions.cc 내에서 사용할 전역 변수를 설정한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main_functions.cc 내에서는 어느 곳에서나 접근할 수 있다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 프로젝트 내의 다른 파일에서는 접근할 수 없다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 이러한 선언을 통해 두 개의 서로 다른 파일이 동일한 이름의 변수를 정의하여
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 발생 가능한 문제를 방지할 수 있다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;namespace {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;tflite::ErrorReporter* error_reporter = nullptr;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; tflite::Model* model = nullptr;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;tflite::MicroInterpreter* interpreter = nullptr;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;TfLiteTensor* input = nullptr;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;TfLiteTensor* output = nullptr;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; inference_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력, 출력, 중간 배열에 사용할 메모리 영역을 생성한다.(텐서 아레나)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTensorArenaSize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;uint8_t tensor_arena[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTensorArenaSize&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; namespace
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 프로그램이 처음 시작될 때 호출되고 그 이후로는 호출되지 않는다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 추론을 시작하기 전에 수행해야 하는 모든 일회성 작업을 수행하기 위해 필요하다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 로깅을 설정하고, 모델을 로드하며, 인터프리터를 설정하고 메모리를 할당한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 로깅(logging) 설정
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; tflite::MicroErrorReporter micro_error_reporter;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  error_reporter = &amp;amp;micro_error_reporter;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델을 사용 가능한 데이터 구조에 매핑한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;38&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  model = tflite::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetModel&lt;&#x2F;span&gt;&lt;span&gt;(g_sine_model_data);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;39&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(model-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;() != TFLITE_SCHEMA_VERSION) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_REPORT_ERROR&lt;&#x2F;span&gt;&lt;span&gt;(error_reporter,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;41&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                         &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Model provided is schema version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; not equal &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                         &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;to supported version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;43&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                         model-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;(), TFLITE_SCHEMA_VERSION);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;44&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;46&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;47&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 필요한 모든 Operator(Op)구현을 가져온다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;48&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; tflite::ops::micro::AllOpsResolver resolver;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;49&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델을 실행할 인터프리터를 빌드한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;51&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; tflite::MicroInterpreter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;static_interpreter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;52&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;      model, resolver, tensor_arena, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTensorArenaSize&lt;&#x2F;span&gt;&lt;span&gt;, error_reporter);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;53&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  interpreter = &amp;amp;static_interpreter;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;54&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;55&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델 텐서를 텐서 아레나의 메모리에 할당한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  TfLiteStatus allocate_status = interpreter-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AllocateTensors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;57&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(allocate_status != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteOk&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;58&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_REPORT_ERROR&lt;&#x2F;span&gt;&lt;span&gt;(error_reporter, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AllocateTensors() failed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;59&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;62&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 입력 텐서, 출력 텐서에 대한 포인터를 획득한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;63&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 아직 출력이 작성되지 않았지만 메모리 영역 자체는 존재하기 때문에 이런 식의 초기화도 문제없다. 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;64&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  input = interpreter-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;65&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  output = interpreter-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;66&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;67&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 추론을 실행할 횟수를 기록하기 위한 변수
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;68&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  inference_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;69&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;70&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;71&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 애플리케이션 로직이 구현된 부분이다. 
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;72&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;73&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델에 공급할 x값을 계산한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;74&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 현재 inference_count를 주기당 추론 횟수와 비교하여
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;75&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델이 학습된 지정 가능한 x값 범위 내에서 위치를 결정하고
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;76&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 이를 사용하여 값을 계산한다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;77&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; position = static_cast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(inference_count) &#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;78&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                   static_cast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kInferencesPerCycle&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;79&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; x_val = position * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kXrange&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;80&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;81&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 계산한 x값을 모델의 입력 텐서에 넣기
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;82&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  input-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = x_val;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;83&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;84&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 추론을 실행하고 오류가 있다면 error report를 발생시킨다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;85&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  TfLiteStatus invoke_status = interpreter-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Invoke&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;86&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(invoke_status != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kTfLiteOk&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;87&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TF_LITE_REPORT_ERROR&lt;&#x2F;span&gt;&lt;span&gt;(error_reporter, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Invoke failed on x_val: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;88&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;                         static_cast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(x_val));
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;89&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;91&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;92&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 모델의 출력 텐서가 예상한 y값 읽기
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;93&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; y_val = output-&amp;gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;94&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;95&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 결과를 출력한다. 개발 보드에 맞춰 HandleOutput 함수를 커스텀 구현할 수 있다.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;96&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HandleOutput&lt;&#x2F;span&gt;&lt;span&gt;(error_reporter, x_val, y_val);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;97&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;98&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Inference_counter를 증가시키고 사이클당 최대 추론 수에 도달하면 리셋
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;99&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  inference_count += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(inference_count &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kInferencesPerCycle&lt;&#x2F;span&gt;&lt;span&gt;) inference_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;101&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;output_handler.h&lt;&#x2F;code&gt;, &lt;code&gt;output_handler.cc&lt;&#x2F;code&gt; : 추론이 실행될 때마다 출력을 표시하는 데 사용할 수 있는 함수를 정의하는 파일, 기본 구현은 결과를 화면에 출력한다. 이 구현을 재정의하면 다른 장치에서 다른 작업을 수행할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sine_model_data.h&lt;&#x2F;code&gt;, &lt;code&gt;sine_model_data.cc&lt;&#x2F;code&gt; : Tensorflow Lite for Microcontroller를 통해 변환된 기계학습 모델이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;stm32f746g-discoe-bbapohagi-chapter-6&quot;&gt;STM32F746G-disco에 배포하기(Chapter 6)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;LCD를 사용할 예정이므로 output_hanlder를 수정해 주어야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LCD_DISCO_F746NG.h&lt;&#x2F;code&gt;, &lt;code&gt;LCD_DISCO_F746NG.cc&lt;&#x2F;code&gt;가 필요하다. &lt;a href=&quot;https:&#x2F;&#x2F;os.mbed.com&#x2F;teams&#x2F;ST&#x2F;code&#x2F;LCD_DISCO_F746NG&#x2F;&quot;&gt;여기&lt;&#x2F;a&gt;에서 다운로드 받을 수 있다.
&lt;ul&gt;
&lt;li&gt;제공되는 파일은 &lt;code&gt;.cpp&lt;&#x2F;code&gt;파일이긴 하지만 본질적으로 &lt;code&gt;.cc&lt;&#x2F;code&gt;와 &lt;code&gt;.cpp&lt;&#x2F;code&gt; 는 아무 차이가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;본 예제는 Makefile을 제공하여 Mbed 프로젝트를 자동으로 생성할 수 있다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make -f&lt;&#x2F;span&gt;&lt;span&gt; tensorflow&#x2F;lite&#x2F;micro&#x2F;tools&#x2F;make&#x2F;Makefile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span&gt;TARGET=mbed TAGS=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CMSIS disco_f746ng&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; generate_hello_world_mbed_project
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 폴더로 이동한다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; tensorflow&#x2F;lite&#x2F;micro&#x2F;tools&#x2F;make&#x2F;gen&#x2F;mbed_cortex-m4&#x2F;prj&#x2F;hello_world&#x2F;mbed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mbed&lt;&#x2F;code&gt;명령어를 프로그램의 루트 디렉터리를 설정한다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mbed&lt;&#x2F;span&gt;&lt;span&gt; config root .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;종속성을 다운로드한다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mbed&lt;&#x2F;span&gt;&lt;span&gt; deploy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;기본적으로 Mbed는 C++98을 사용하여 프로젝트를 빌드한다. 그러나 텐서플로 라이트에는 C++11이 필요하므로 아래의 코드를 실행하여 C++11을 사용하도록 Mbed 설정 파일을 수정해야 한다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;import fileinput, glob;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	for filename in glob.glob(&amp;quot;mbed-os&#x2F;tools&#x2F;profiles&#x2F;*.json&amp;quot;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;		for line in fileinput.input(filename, inplace=True):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;		    print(line.replace(&amp;quot;\&amp;quot;-std=gnu++98\&amp;quot;&amp;quot;,&amp;quot;\&amp;quot;-std=c++11\&amp;quot;, \&amp;quot;-fpermissive\&amp;quot;&amp;quot;))&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 명령을 실행하여 컴파일을 수행한다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mbed&lt;&#x2F;span&gt;&lt;span&gt; compile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; DISCO_F746NG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; GCC_ARM
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 버전 문제(계속 homebrew의 python@3.11이 인식되어 에러가 발생했다, 삭제하여 해결함), 각종 dependency문제, 허가되지 않은 개발자 문제 등등 다양한 이슈가 있어 매끄럽게 진행되지는 못했다.
&lt;ul&gt;
&lt;li&gt;이유는 모르겠지만 계속 brew의 python을 가져온다... 이를 확인하는 명령어는 아래와 같다.&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; list | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; python
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;확인 결과 &lt;code&gt;python@3.11&lt;&#x2F;code&gt;이 설치되어 있다면... 잠시 삭제하자(vim등 다른 프로그램에 영향이 가지만 나중에 다시 깔면 된다.)&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; uninstall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --ignore-dependencies&lt;&#x2F;span&gt;&lt;span&gt; python@3.11
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 에러는 다음 markupsafe의 버전 문제로 발생하는 에러이다. 버전에 맞게 에러 이미지 아래의 명령어를 입력하면 해결된다.&lt;img src=&quot;&#x2F;image&#x2F;TinyML&#x2F;importerror.png&quot; alt=&quot;ImportError&quot; &#x2F;&gt;&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install markupsafe==2.0.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 컴파일이 완료된 화면이다.&lt;img src=&quot;&#x2F;image&#x2F;TinyML&#x2F;compile.png&quot; alt=&quot;Compile Complete&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;컴파일되어 생성된 바이너리 파일은 .&#x2F;BUILD&#x2F;DISCO_F746NG&#x2F;GCC_ARM&#x2F;mbed.bin에 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 명령어를 입력하여 보드에 배포한다.(그냥 복사하면 된다)&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;mbed.bin &#x2F;Volumes&#x2F;DIS_F746NG
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 바이너리 파일을 보드에 배포한 후 프로그램이 실행되는 모습이다.&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=yCAvoseXeo8&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=yCAvoseXeo8&quot; alt=&quot;sine example&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ubuntu on Raspberry pi 4</title>
		<published>2023-06-22T00:00:00+00:00</published>
		<updated>2023-06-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/ubuntu-on-raspberry-pi/" type="text/html"/>
		<id>https://js970.github.io/ubuntu-on-raspberry-pi/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;본 글에서는 Raspberry Pi 4(4GB)에 Ubuntu 20.02 LTS를 설치하는 과정에 대해 다룬다.
SD카드에 우분투 이미지를 굽는 과정은 Windows 11에서 진행했다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Hardware prerequisites
&lt;ul&gt;
&lt;li&gt;SD카드&lt;&#x2F;li&gt;
&lt;li&gt;SD카드 리더기(USB)&lt;&#x2F;li&gt;
&lt;li&gt;라즈베리 파이&lt;&#x2F;li&gt;
&lt;li&gt;mini HDMI(optional)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Software prerequisites
&lt;ul&gt;
&lt;li&gt;Ubuntu 20.04 LTS 이미지&lt;&#x2F;li&gt;
&lt;li&gt;HP USB Disk Storage Format&lt;&#x2F;li&gt;
&lt;li&gt;Win32 Disk Imager&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sd-kadde-pomes&quot;&gt;SD 카드 포멧&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;라즈베리파이의 부트로더는 FAT16, FAT32의 파일 시스템을 사용하기 때문에 SD카드의 포멧이 FAT 16 또는FAT32가 아닐 경우 포멧을 진행해야 한다.                                             &lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;exFAT.png&quot; alt=&quot;exFAT&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;filehippo.com&#x2F;download_hp-usb-disk-storage-format-tool&#x2F;&quot;&gt;여기&lt;&#x2F;a&gt; 에서 HP USB Disk Storage Format Tool 프로그램을 다운로드 받을 수 있다. &lt;&#x2F;li&gt;
&lt;li&gt;HP USB Disk Storage Format Tool은 관리자 권한으로 실행해야 한다. &lt;&#x2F;li&gt;
&lt;li&gt;SD카드의 파일 시스템을 FAT 32로 설정한 후 포멧을 진행한다.&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;DiskStorageFormatTool.png&quot; alt=&quot;FAT 32 Format&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;포멧을 진행한 후 SD카드의 파일 시스템이 FAT 32로 변경된 것을 확인할 수 있다.&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;FAT32.png&quot; alt=&quot;FAT 32&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ubuntu-imiji-pail-sdkaddee-ggugi&quot;&gt;Ubuntu 이미지 파일 SD카드에 굽기&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;(2023-06-22)까지는 &lt;a href=&quot;https:&#x2F;&#x2F;cdimage.ubuntu.com&#x2F;releases&#x2F;focal&#x2F;release&#x2F;&quot;&gt;여기&lt;&#x2F;a&gt;에서 우분투 20.04 LTS for Raspberry pi의 다운로드가 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;preinstalled server image를 다운받은 후 GUI를 이후에 설치 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;Win32 Disk Imager는 &lt;a href=&quot;https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;win32diskimager&#x2F;&quot;&gt;여기&lt;&#x2F;a&gt;에서 다운로드 가능하다. &lt;&#x2F;li&gt;
&lt;li&gt;Win32 Disk Imager를 사용하여 포멧을 진행한 SD카드에 다운로드한 우분투 이미지를 굽는다.&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;win32Disk.png&quot; alt=&quot;Win32 Disk Imager&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bupouthagi&quot;&gt;부팅하기&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;라즈베리파이에 이미지가 구워진 SD카드를 삽입하고 mini HDMI를 이용해 모니터에 연결하면 부팅된다. &lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;raspberry.png&quot; alt=&quot;Raspberry pi connected&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;초기 ID와 PW는 ubuntu이다. 첫 로그인 이후 비밀번호를 바로 변경하면 된다.&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;booted.png&quot; alt=&quot;booted&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;네트워크 설정을 위해 &#x2F;etc&#x2F;netplan&#x2F;50-cloud-init.yaml파일을 아래와 같이 수정해 줘야 한다. 파일 수정 시에는 반드시 sudo를 사용하여 WRITE가 가능한 상태로 수정하도록 하자.&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;network.png&quot; alt=&quot;network setting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;network&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ethernets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eth0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dhcp4&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wifis&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wlan0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dhcp4&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;access-points&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wifi-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;인덴트 간격에 유의해서 파일 수정을 마쳤다면 아래와 같이 입력하여 변경 사항을 적용시킨다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; netplan generate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 들여쓰기 및 문법 확인
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; netplan apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 적용
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이제 아래와 같이 입력해서 GUI를 다운로드한다. 시간이 제법 걸린다.&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;ubuntu-desktop.png&quot; alt=&quot;GUI-download&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;다운로드가 끝난 후 재부팅하면 아래와 같이 GUI가 설치된 우분투를 볼 수 있다.&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;ubuntu_on_raspberry&#x2F;gui.png&quot; alt=&quot;GUI Ubuntu&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.may-i.io&#x2F;tech-7&#x2F;&quot;&gt;라즈베리파이에 Ubuntu 20.04 LTS 설치하기&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Secondary-Storage Structure</title>
		<published>2023-06-12T00:00:00+00:00</published>
		<updated>2023-06-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/secondary-storage-structure/" type="text/html"/>
		<id>https://js970.github.io/secondary-storage-structure/</id>
		<content type="html">&lt;h2 id=&quot;overview-of-mass-storage-structure&quot;&gt;Overview of Mass Storage Structure&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;많은 Secondary Storage가 존재하지만 본 절에서는 HDD등 Magnetic disk에 대해서 다룬다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;아래는 기본적인 하드디스크의 구조이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;hdd.png&quot; alt=&quot;HDD&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;I&#x2F;O에 소요되는 시간은 아래와 같이 나타낼 수 있다.$$T_{I&#x2F;O} = T_{seek} + T_{rotation} + T_{transfer}$$
&lt;ul&gt;
&lt;li&gt;I&#x2F;O 소요시간 = 탐색시간 + 회전시간 + 전송시간&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이 중에서 운영 체제 범위에서 줄일 수 있는 것은 탐색시간 밖에 없다.
&lt;ul&gt;
&lt;li&gt;회전시간은 HDD의 영역이고, 전송시간은 하드웨어 버스에 의해 결정된다.&lt;&#x2F;li&gt;
&lt;li&gt;탐색시간은 &lt;code&gt;Disk Scheduling&lt;&#x2F;code&gt;을 통해 줄일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;전송률을 식으로 나타내면 아래와 같다.$$R_{I&#x2F;O} = \frac{Size_{transfer}}{T_{I&#x2F;O}}$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;disk-scheduling&quot;&gt;Disk Scheduling&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;디스크 암을 움직여 데이터에 접근하는 과정에는 많은 지연시간이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;운영 체제는 &lt;code&gt;Disk Scheduling&lt;&#x2F;code&gt;을 통해 Seek Time을 최소화 하는 것이 목적이다.&lt;&#x2F;li&gt;
&lt;li&gt;회전 속도, 버스의 대역폭에 대해서는 고려하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;Disk Scheduling&lt;&#x2F;code&gt;알고리즘이 고려해야 할 사항이다.
&lt;ul&gt;
&lt;li&gt;주어진 I&#x2F;O request를 어떠한 순서로 처리할 것인가?&lt;&#x2F;li&gt;
&lt;li&gt;Scheduling을 통해 순서만 바뀔 뿐 요청된 동작은 모두 수행되어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;del&gt;일반적이지는 않지만, 오히려 일을 하지 않는 것이 더 도움이 될때도 있다.&lt;&#x2F;del&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Disk Scheduling Algorithm&lt;&#x2F;code&gt;으로는 아래와 같은 것들이 있다.
&lt;ul&gt;
&lt;li&gt;FCFS&lt;&#x2F;li&gt;
&lt;li&gt;SSTF&lt;&#x2F;li&gt;
&lt;li&gt;SCAN&lt;&#x2F;li&gt;
&lt;li&gt;C-SCAN&lt;&#x2F;li&gt;
&lt;li&gt;C-Look&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;경우에 따라 적절한 &lt;code&gt;Disk Scheduling Algorithm&lt;&#x2F;code&gt;을 선택하는 것이 중요하다. &lt;&#x2F;li&gt;
&lt;li&gt;결국 request에 의해 성능은 변하기 때문에 정답은 없다.&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 SSTF, Look방식이 Best Effort로 가장 많이 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;또한, 최근에는 마이크로커널을 지향하기 때문에 본 포스트에서 다루는 내용은 최신 운영체제에는 포함되지 않을 수 있다. 본 포스트의 기능은 보통은 하드웨어 레벨에서 별도의 기능으로 구현된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fcfs&quot;&gt;FCFS&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;First Come First Serve(== do nothing)&lt;&#x2F;li&gt;
&lt;li&gt;로드가 적을 때는 그나마 낫다&lt;&#x2F;li&gt;
&lt;li&gt;하지만 로드가 많을 경우 효율이 좋지 않다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 주어진 request에 따른 처리 과정이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;diskFCFS.png&quot; alt=&quot;FCFS&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;53번 실린더에서 탐색을 시작하며 총 이동 거리는 640실린더를 이동해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;위 그래프에서 가로로 중복되는 부분들은 전부 의미 없는 이동이라고 봐야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sstf&quot;&gt;SSTF&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Shortest-Seek-Time-First&lt;&#x2F;li&gt;
&lt;li&gt;현재 실린더 위치에서 가장 가까운 실린더의 request를 처리한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;starvation&lt;&#x2F;code&gt;을 야기할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 주어진 request에 따른 처리 과정이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;SSTF.png&quot; alt=&quot;SSTF&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;53번 실린더에서 탐색을 시작하며 총 이동 거리는 236실린더를 이동해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;FCFS방식에 비해 가로로 중복되는 부분이 많이 줄었다.&lt;&#x2F;li&gt;
&lt;li&gt;경계값에 대한 의미 없는 탐색을 하지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scan&quot;&gt;SCAN&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;디스크 암이 실린더의 시작부터 끝까지 이동하면서 그 사이의 request를 처리한다.&lt;&#x2F;li&gt;
&lt;li&gt;elevator algorithm이라고 부르기도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 주어진 request에 따른 처리 과정이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;SCAN.png&quot; alt=&quot;SCAN&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;53번 실린더에서 시작하여 총 236실린더를 이동한다.&lt;&#x2F;li&gt;
&lt;li&gt;경계값에 대한 무의미한 탐색이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;request마다 처리되는 데 걸리는 시간이 다르며 이를 예측하기 힘들다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;c-scan&quot;&gt;C-SCAN&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Circular SCAN방식이다.&lt;&#x2F;li&gt;
&lt;li&gt;0번부터 199번 실린더 까지 탐색을 마친 뒤 바로 되돌아 가는 것이 아닌 다시 0번부터 199번으로 탐색을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;속도는 SCAN에 비해 느리지만 request 응답 지연을 예측할 수 있다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 여전히 경계값에 대한 의미 없는 탐색을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 주어진 request에 따른 처리 과정이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;CSCAN.png&quot; alt=&quot;C-SCAN&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;look-c-look&quot;&gt;Look&#x2F;C-Look&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;SCAN방식과 SSTF방식의 장점을 합친 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;SCAN방식과 달리 request 대상 실린더의 경계값에 대해서만 순회한다.
&lt;ul&gt;
&lt;li&gt;SSTF방식과 마찬가지로 경계값에 대한 의미 없는 탐색을 하지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 주어진 request에 대해 C-Look으로 &lt;code&gt;disk scheduling&lt;&#x2F;code&gt;을 수행한 것이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;CLOOK.png&quot; alt=&quot;C-Look&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Subprogram Implementation</title>
		<published>2023-06-12T00:00:00+00:00</published>
		<updated>2023-06-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/subprogram-implementation/" type="text/html"/>
		<id>https://js970.github.io/subprogram-implementation/</id>
		<content type="html">&lt;h2 id=&quot;subprogram-linkage&quot;&gt;Subprogram Linkage&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;ssebbepeuroggeraem-hyeoggyeo&quot;&gt;서브프로그램 연결&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;서브프로그램 호출 - &lt;code&gt;call&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;서브프로그램 복귀 - &lt;code&gt;return&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ssebbepeuroggeraem-hocul-si-haeya-hal-jjaheo&quot;&gt;서브프로그램 호출 시 해야 할 작업&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;data 처리
&lt;ul&gt;
&lt;li&gt;호출하는 서브프로그램의 상태 저장&lt;&#x2F;li&gt;
&lt;li&gt;인수 전달 작업&lt;&#x2F;li&gt;
&lt;li&gt;복귀할 주소 전달&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;control
&lt;ul&gt;
&lt;li&gt;호출되는 프로그램으로 분기&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ssebbepeuroggeraem-bboggw-si-haeya-hal-jjaheo&quot;&gt;서브프로그램 복귀 시 해야 할 작업&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;data 처리
&lt;ul&gt;
&lt;li&gt;필요에 따라 형식인수 값 복사(outer parameter)&lt;&#x2F;li&gt;
&lt;li&gt;함수의 경우, 결과 값 전달&lt;&#x2F;li&gt;
&lt;li&gt;호출한 서브프로그램의 상태 복귀&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;control
&lt;ul&gt;
&lt;li&gt;호출한 서브프로그램으로 분기&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;activation-record&quot;&gt;Activation Record&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;서브프로그램을 호출할 때는 아래와 같은 공간이 필요하다.
&lt;ul&gt;
&lt;li&gt;호출자의 상태 정보를 보관할 공간&lt;&#x2F;li&gt;
&lt;li&gt;인수를 저장할 공간&lt;&#x2F;li&gt;
&lt;li&gt;함수의 반환 값을 저장할 공간&lt;&#x2F;li&gt;
&lt;li&gt;복귀할 주소를 저장할 공간&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드(activation record)란 수행중인 서브프로그램에서 코드를 제외한 부분이 저장되는 형태이다.&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드 틀 자체는 정적으로 결정 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드 인스턴스란 활성 레코드가 구체적으로 구축된 것이다.
&lt;ul&gt;
&lt;li&gt;활성 레코드 인스턴스는 실행 시 필요에 따라 생성 및 소멸된다.&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드 인스턴스를 활성 레코드라고 부른다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hwalsseon-rekodde-jjeonjjeo-halddan&quot;&gt;활성 레코드 - 정적 할당&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 그림은 FORTRAN 77의 활성 래코드 구조이다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;fortranRecord.png&quot; alt=&quot;FORTRAN77 Activation Record&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;호출 여부와 관계없이 미리 서브프로그램을 만들어 static segment로 할당했으므로 재귀 호출을 허용하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드를 정적으로 할당 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hwalsseon-rekodde-ddonjjeo-halddan&quot;&gt;활성 레코드 - 동적 할당&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 예시 Ada 코드를 바탕으로 활성 레코드 형태에 대해 알아보자.&lt;pre data-lang=&quot;Ada&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Ada &quot;&gt;&lt;code class=&quot;language-Ada&quot; data-lang=&quot;Ada&quot;&gt;&lt;span&gt;procedure Main_2 is
&lt;&#x2F;span&gt;&lt;span&gt;	X: Integer;
&lt;&#x2F;span&gt;&lt;span&gt;	procedure Bigsub is
&lt;&#x2F;span&gt;&lt;span&gt;		A, B, C: Integer;
&lt;&#x2F;span&gt;&lt;span&gt;		procedure Sub1 is
&lt;&#x2F;span&gt;&lt;span&gt;			A, D: Integer;
&lt;&#x2F;span&gt;&lt;span&gt;			begin --Sub1
&lt;&#x2F;span&gt;&lt;span&gt;				A:=B+C;
&lt;&#x2F;span&gt;&lt;span&gt;			end;
&lt;&#x2F;span&gt;&lt;span&gt;		procedure Sub2(X: Integer) is
&lt;&#x2F;span&gt;&lt;span&gt;			B, E: Integer;
&lt;&#x2F;span&gt;&lt;span&gt;			procedure Sub3 is
&lt;&#x2F;span&gt;&lt;span&gt;				C, E: Integer;
&lt;&#x2F;span&gt;&lt;span&gt;				begin --Sub3
&lt;&#x2F;span&gt;&lt;span&gt;					Sub1;
&lt;&#x2F;span&gt;&lt;span&gt;					E:=B+A;
&lt;&#x2F;span&gt;&lt;span&gt;				end;
&lt;&#x2F;span&gt;&lt;span&gt;			begin --Sub2
&lt;&#x2F;span&gt;&lt;span&gt;				Sub3;
&lt;&#x2F;span&gt;&lt;span&gt;				A:=D+E;
&lt;&#x2F;span&gt;&lt;span&gt;			end;
&lt;&#x2F;span&gt;&lt;span&gt;		begin --Bigsub
&lt;&#x2F;span&gt;&lt;span&gt;			Sub2 (7);
&lt;&#x2F;span&gt;&lt;span&gt;		end;
&lt;&#x2F;span&gt;&lt;span&gt;	begin --Main_2
&lt;&#x2F;span&gt;&lt;span&gt;		Bigsub;
&lt;&#x2F;span&gt;&lt;span&gt;	end;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 예시 Ada 프로그램의 활성 레코드 구조이다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;adaRecord.png&quot; alt=&quot;ALGOL Activation Record&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;재귀 호출이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;static scoping rules를 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드의 형태는 같지만 크기는 각 서브프로그램마다 다르다.&lt;&#x2F;li&gt;
&lt;li&gt;서브프로그램 호출 시 동적으로 활성 레코드가 생성된다.&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드 필드는 프레임 포인터(FP)와 offset의 조합으로 참조한다.&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드에는 아래와 같은 내용들이 저장된다.
&lt;ul&gt;
&lt;li&gt;Local variables &amp;amp; Parameters&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Link : 호출자 활성 레코드의 FP를 가리킨다.&lt;&#x2F;li&gt;
&lt;li&gt;Return address : 정적 부모(static parent)의 FP를 가리킨다.&lt;&#x2F;li&gt;
&lt;li&gt;return value(함수의 경우)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;점선은 static link를 통해 정적 부모를 가리키는 것을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;실선은 dynamic link를 통해 호출자를 카리키는 것을 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;terminology&quot;&gt;Terminology&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;동적 체인&lt;&#x2F;code&gt; : 활성 레코드 스택 상에서 인접한 동적 링크들을 차례로 연결한 것. &lt;code&gt;리스트&lt;&#x2F;code&gt; 형태이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;정적 체인&lt;&#x2F;code&gt; : 활성 레코드 스택 상에서 정적 링크들로 연결된 체인. &lt;code&gt;트리&lt;&#x2F;code&gt; 형태이다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C&lt;&#x2F;code&gt;언어의 경우 함수 중첩을 허용하지 않으므로 정적 링크가 필요 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;local offset&lt;&#x2F;code&gt; : 지역 변위
&lt;ul&gt;
&lt;li&gt;활성 레코드 시작 부분에서 stack dynamic 변수 위치까지의 변위&lt;&#x2F;li&gt;
&lt;li&gt;컴파일 시간에 계산 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bijihyeo-bbyeosu-camjo&quot;&gt;비지역 변수 참조&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;지역변수는 항상 자신의 활성 레코드 인스턴스에서 찾을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;참조되는 비지역 변수는 활성레코드 스택 어딘가에 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;어떤 영역 규칙이든 활성레코드 스택을 찾아 보면 항상 비지역 변수를 찾을 수 있다.
&lt;ul&gt;
&lt;li&gt;parent는 항상 active하기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;비지역 변수의 참조를 위해서는 올바른 &lt;code&gt;offeet&lt;&#x2F;code&gt;과 올바른 &lt;code&gt;활성 레코드&lt;&#x2F;code&gt;를 찾는 것이 중요하다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FP&lt;&#x2F;code&gt;와 &lt;code&gt;offset&lt;&#x2F;code&gt;을 이용해서 비지역 변수에 접근하기 때문&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;정적 영역규칙에 따른 비지역 참조 구현의 문제점
&lt;ul&gt;
&lt;li&gt;정적 부모의 활성 레코드가 인접해 있지 않을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;정적 링크를 반복하여 거슬러 찾아가야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;어떤 서브프로그램의 정적 체인은 모든 정적 조상을 포함한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jjeonjjeo-ceinheu-sahyonhahye-bijihyeo-bbyeosureul-camjohaneun-bbeo&quot;&gt;정적 체인을 사용하여 비지역 변수를 참조하는 법&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;정적 깊이(static depth)를 이용한다. 이는 자신을 감싸고 있는 정적 영역의 개수를 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;비지역 참조의 체인 변위(chain offset)을 활용한다.
&lt;ul&gt;
&lt;li&gt;비지역 변수가 참조되는 지점의 정적 깊이와 해당 비지역 변수가 선언된 지점의 정적 깊이의 차를 의미&lt;&#x2F;li&gt;
&lt;li&gt;체인 변위만큼 정적 체인을 거슬러 올라가면 해당 변수의 활성 레코드 인스턴스를 찾을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;체인을 거슬러 올라가는 비용은 체인 변위가 클수록 크다.&lt;&#x2F;li&gt;
&lt;li&gt;정적 체인 방법의 장점
&lt;ul&gt;
&lt;li&gt;구현하기 쉽다&lt;&#x2F;li&gt;
&lt;li&gt;각 활성 레코드에 하나의 링크만 유지하면 되므로 공간 낭비가 적다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;정적 체인 방법의 단점
&lt;ul&gt;
&lt;li&gt;참조되는 비지역 변수가 선언된 블록의 중첩깊이와 참조 문장을 포함한 중첩깊이의 차이가 크다면 참조 시간 부담이 커진다.&lt;&#x2F;li&gt;
&lt;li&gt;비지역 변수의 참조 시간이 변수에 따라 다르기 때문에 응답 시간이 중요한 real-time application에서는 불리하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dissepeulrei-bbanbbeo&quot;&gt;디스플레이 방법&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;여러 정적 링크들을 별도의 스택에 관리한다.&lt;&#x2F;li&gt;
&lt;li&gt;참조 환경의 모든 변수는 이 스택이 가리키는 활성 레코드 내에 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;디스플레이는 현재 수행 중인 블록과 이 블록의 정적 조상에 대한 활성 레코드를 가리키는 주소들로 이루어진 스택이다.&lt;&#x2F;li&gt;
&lt;li&gt;디스플레이 변위는 해당 변수가 선언된 서브 프로그램의 정적 깊이와 동일하다. 즉 static depth가 3인 경우 display[3]에 저장된다. &lt;&#x2F;li&gt;
&lt;li&gt;디스플레이에 의한 서브프로그램 호출 및 복귀 과정은 다음과 같다.
&lt;ol&gt;
&lt;li&gt;호출되는 서브프로그램의 정적 깊이가 k라면 display[k]에 서브프로그램의 활성 레코드 인스턴스 주소를 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 display[k] 위치에 이미 다른 서브프로그램을 저장 중인 경우 원래 있던 항목을 호출되는 서브프로그램의 활성 레코드 내에 backup한다.&lt;&#x2F;li&gt;
&lt;li&gt;서브프로그램 복귀 시에는 현재 활성레코드 내에 백업되었던 display[k]를 복구한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;display가 어떻게 변화할 지 알 수 없으므로 모든 경우에 대해 백업을 진행해야 한다.
&lt;ul&gt;
&lt;li&gt;애초에 활성 레코드가 저장되어 있지 않은 상태 재외&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jjeonjjeo-cein-bbanbbeogwa-dissepeulrei-bbanbbeoyi-biggy&quot;&gt;정적 체인 방법과 디스플레이 방법의 비교&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;지역변수 참조는 동일하다.&lt;&#x2F;li&gt;
&lt;li&gt;비지역 변수 참조에 있어 현재 활성 레코드와 한 단계 차이날 경우 두 방법의 비용이 동일하지만 그 이상의 경우 디스플레이 방법이 더 유리하다.&lt;&#x2F;li&gt;
&lt;li&gt;서브프로그램 호출에 있어 디스플레이 방법의 경우 정적 깊이 차가 클수록 정적 체인 방법에 비해 유리하다.&lt;&#x2F;li&gt;
&lt;li&gt;서브프로그램 복귀에 있어 정적 체인 방법과 디스플레이 방법 모두 상수 시간을 보장한다. 하지만 디스플레이 방법의 경우 백업 시간을 추가로 요구하므로 시간이 조금 더 소요된다.&lt;&#x2F;li&gt;
&lt;li&gt;결론적으로 비지역 변수 참조가 빈번하다면 디스플레이 방법이 유리하고, 거의 일어나지 않는다면 정적 체인 방법이 더 유리하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ddonjjeo-hyeonhyeoggycig-deep-access&quot;&gt;동적 영역규칙 - Deep Access&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;해당 변수를 찾을 때까지 동적 링크를 계속해서 거슬러 올라간다.&lt;&#x2F;li&gt;
&lt;li&gt;거슬러 올라갈 체인 길이가 정해져 있지 않으므로 시간을 보장할 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;활성 레코드에 변수 이름을 기록해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ddonjjeo-hyeonhyeoggycig-shallow-access&quot;&gt;동적 영역규칙 - Shallow Access&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;참조할 변수를 공용 공간에 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;Variable Stack, 또는 Central Table방식으로 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Variable Stack방식으로 구현하는 도식이다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;variableStack.png&quot; alt=&quot;Variable Stack&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;디스플레이 방법과 유사한 면이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;각 변수 별로 스텍을 가지며, stack.top()을 참조하여 비지역 변수에 접근한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Computational Complexity</title>
		<published>2023-06-10T00:00:00+00:00</published>
		<updated>2023-06-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/computational-complexity/" type="text/html"/>
		<id>https://js970.github.io/computational-complexity/</id>
		<content type="html">&lt;h2 id=&quot;computational-complexity&quot;&gt;Computational Complexity&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;intractability&quot;&gt;Intractability&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;three-general-categories-of-problems&quot;&gt;Three General Categories of Problems&lt;&#x2F;h3&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Searching</title>
		<published>2023-06-09T00:00:00+00:00</published>
		<updated>2023-06-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/searching/" type="text/html"/>
		<id>https://js970.github.io/searching/</id>
		<content type="html">&lt;h2 id=&quot;searching&quot;&gt;Searching&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;binary-search&quot;&gt;Binary Search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;탐색이란 &lt;code&gt;key&lt;&#x2F;code&gt;값으로 정렬된 공간에서 목표로 하는 &lt;code&gt;key&lt;&#x2F;code&gt;값을 찾는 것을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;Binary search는 이진 탐색이며, 탐색 공간의 중간값과 배교하여 탬색 공간을 절반으로 줄여 가며 목표로 하는 &lt;code&gt;key&lt;&#x2F;code&gt;값과 일치할 때까지 탐색을 하는 방법이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tree&lt;&#x2F;code&gt;자료구조를 사용하여 &lt;code&gt;binary search&lt;&#x2F;code&gt;와 &lt;code&gt;sequential search&lt;&#x2F;code&gt;의 탐색 횟수를 비교하면 아래와 같다.
&lt;ul&gt;
&lt;li&gt;Binary Search&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;binarySearch.png&quot; alt=&quot;Binary Search&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Sequential Search&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;sequentialSearch.png&quot; alt=&quot;Sequential Search&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tree&lt;&#x2F;code&gt;의 &lt;code&gt;depth&lt;&#x2F;code&gt;가 비교 연산의 횟수를 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;binary search&lt;&#x2F;code&gt;의 경우 floor(log n)번의 비교 연산을 통해 목표 &lt;code&gt;key&lt;&#x2F;code&gt;를 찾을 수 있다. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;interpolation-search&quot;&gt;Interpolation Search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;보간 검색&lt;&#x2F;code&gt;이라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;binary search&lt;&#x2F;code&gt;와 비슷한 방법이지만, 중간값을 선택하는 방법에 차이가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;보간 검색&lt;&#x2F;code&gt;은 중간값을 선택할 때, 목표로 하는 &lt;code&gt;key&lt;&#x2F;code&gt;값의 위치를 예상하여 이 값을 중간값으로 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;보간 검색&lt;&#x2F;code&gt;은 평균적으로 &lt;code&gt;binary search&lt;&#x2F;code&gt;방식에 비해 효율적이지만, 정렬된 &lt;code&gt;key&lt;&#x2F;code&gt;값이 불균일하게 분포할수록 성능이 감소한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;보간 검색&lt;&#x2F;code&gt;의 average case 시간복잡도는 &lt;strong&gt;log(log n)&lt;&#x2F;strong&gt; 이다. 
&lt;ul&gt;
&lt;li&gt;이는 &lt;code&gt;binary search&lt;&#x2F;code&gt;의 시간복잡도인 &lt;strong&gt;log n&lt;&#x2F;strong&gt; 보다 빠르다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;worst case(&lt;code&gt;key&lt;&#x2F;code&gt;값이 evenly distributed되지 않은 경우)의 경우 &lt;code&gt;sequential search&lt;&#x2F;code&gt;와 비슷한 효율을 보인다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;robust-interpolation-search&quot;&gt;Robust Interpolation Search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;보간 검색&lt;&#x2F;code&gt;의 &lt;code&gt;worst case&lt;&#x2F;code&gt;는 중간값이 계속해서 경계값(low)으로 설정되는 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;robust interpolation search&lt;&#x2F;code&gt;에서는 중간값을 계산할 때 사용하는 사이 간격(&lt;code&gt;gap&lt;&#x2F;code&gt;)과 중간값을 아래와 같이 설정한다.$$gap = \lfloor(high - low+1)^{1&#x2F;2}\rfloor$$$$mid = minimum(high-gap,\ maximum(mid,\ low+gap))$$&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;robust interpolation search&lt;&#x2F;code&gt;의 &lt;code&gt;average case&lt;&#x2F;code&gt; 시간복잡도는 &lt;strong&gt;log(log n)&lt;&#x2F;strong&gt; 이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;worst case&lt;&#x2F;code&gt;의 경우의 시간복잡도는 &lt;strong&gt;((log n) * (log n))&lt;&#x2F;strong&gt; 이다.&lt;&#x2F;li&gt;
&lt;li&gt;여전히 &lt;code&gt;worst case&lt;&#x2F;code&gt;의 경우 &lt;code&gt;binary search&lt;&#x2F;code&gt;보다 효율이 떨어진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;b-trees&quot;&gt;B-trees&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Search Time&lt;&#x2F;code&gt;을 줄이기 위한 &lt;code&gt;Data Structure&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;B 트리는 아래와 같은 특징을 가진다.
&lt;ol&gt;
&lt;li&gt;노드에는 2개 이상의 &lt;code&gt;key&lt;&#x2F;code&gt;값이 들어갈 수 있으며, 항상 정렬된 상태로 저장된다.&lt;&#x2F;li&gt;
&lt;li&gt;내부 노드는 m&#x2F;2 ~ m개의 자식 노드를 가질 수 있다. 최대 m개의 자식을 가지는 B트리를 m차 B트리라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;특정 노드의 &lt;code&gt;key&lt;&#x2F;code&gt;가 k개라고 하면, 자식 노드의 개수는 k+1개여야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;특정 노드의 왼쪽 서브 트리는 특정 노드의 &lt;code&gt;key&lt;&#x2F;code&gt;값보다 작은 값들로, 오른쪽 서브 트리는 큰 값으로 구성된다.&lt;&#x2F;li&gt;
&lt;li&gt;노드 내의 &lt;code&gt;key&lt;&#x2F;code&gt;값은 floor(m&#x2F;2)-1개부터 최대 m-1개까지 포함될 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 &lt;code&gt;leaf node&lt;&#x2F;code&gt;는 같은 depth(level)에 존재한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;3-2 B tree&lt;&#x2F;code&gt;에 대해 알아보자.
&lt;ul&gt;
&lt;li&gt;각 노드는 한 개 혹은 두 개의 &lt;code&gt;key&lt;&#x2F;code&gt;를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;key&lt;&#x2F;code&gt;가 하나인 노드의 child개수는 2개이다. &lt;code&gt;key&lt;&#x2F;code&gt;가 두 개라면 child는 3개이다.&lt;&#x2F;li&gt;
&lt;li&gt;좌측 서브트리의 &lt;code&gt;key&lt;&#x2F;code&gt;들은 해당 노드의 &lt;code&gt;key&lt;&#x2F;code&gt;보다 작거나 같다.&lt;&#x2F;li&gt;
&lt;li&gt;우측 서브트리의 &lt;code&gt;key&lt;&#x2F;code&gt;들은 해당 노드의 &lt;code&gt;key&lt;&#x2F;code&gt;보다 크거나 같다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 노드는 같은 레벨에 존재한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;3-2 B tree&lt;&#x2F;code&gt;의 삽입 과정에 대해 알아보자.
&lt;ul&gt;
&lt;li&gt;아래 그림과 같은 &lt;code&gt;3-2 B tree&lt;&#x2F;code&gt;가 있다. &lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;b01.png&quot; alt=&quot;B01&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이때 35가 &lt;code&gt;3-2 B tree&lt;&#x2F;code&gt;에 추가되면 가장 우측 아래에 위치하게 된다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;b02.png&quot; alt=&quot;B02&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;leaf node&lt;&#x2F;code&gt;의 &lt;code&gt;key&lt;&#x2F;code&gt;가 3개 있다면 중간값을 부모 노드로 올리고 나머지 두 값을 자식 노드로 가진다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;b03.png&quot; alt=&quot;B03&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;부모 노드의 &lt;code&gt;key&lt;&#x2F;code&gt;가 3개이고 자식 노드가 4개이다. 다시 중간값을 부모 노드로 올린다. left child는 작은 두 개의 child노드를, right child는 큰 두 개의 child노드를 상속한다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;b04.png&quot; alt=&quot;B04&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;루트 노드에 대해 다시 중간 값을 부모 노드로 가지도록 하면 아래와 같은 구조를 가지게 된다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;b05.png&quot; alt=&quot;B05&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이러한 과정으로 삽입이 일어나게 되면 항상 모든 &lt;code&gt;leaf node&lt;&#x2F;code&gt;의 level이 같도록 유지된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;red-black-trees&quot;&gt;Red Black trees&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;균형을 알아서 맞추는 &lt;code&gt;binary search tree&lt;&#x2F;code&gt;중 하나이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래의 조건을 만족해야 한다.
&lt;ol&gt;
&lt;li&gt;모든 노드는 &lt;code&gt;red&lt;&#x2F;code&gt; 또는 &lt;code&gt;black&lt;&#x2F;code&gt;의 색상을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;루트 노드는 항상 &lt;code&gt;black&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;NIL children&lt;&#x2F;code&gt;은 &lt;code&gt;black&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;red&lt;&#x2F;code&gt;의 자식 노드는 항상 &lt;code&gt;black&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;어떤 노드 X에서 &lt;code&gt;leaf black&lt;&#x2F;code&gt;노드까지의 경로 중 거치는 &lt;code&gt;black&lt;&#x2F;code&gt;노드 개수는 항상 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;탐색 시간은 &lt;strong&gt;O(log n)&lt;&#x2F;strong&gt; 이다.&lt;&#x2F;li&gt;
&lt;li&gt;삽입&#x2F;삭제 시간은 &lt;strong&gt;O(log n)&lt;&#x2F;strong&gt; 이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Red Black Tree&lt;&#x2F;code&gt;의 삽입 과정에 대해 알아보자.
&lt;ul&gt;
&lt;li&gt;삽입 시 새로운 노드는 항상 &lt;code&gt;red&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;삽입 연산에 대해서 아래와 같은 세 가지 경우의 수가 존재한다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;rbInsert01.png&quot; alt=&quot;Red Black insertion&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이 세 가지의 경우에 대해 어떤 방식으로 삽입 연산이 일어나는지 알아보자.&lt;&#x2F;li&gt;
&lt;li&gt;부모가 모두 &lt;code&gt;black&lt;&#x2F;code&gt;이면 그냥 삽입하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;부모가 &lt;code&gt;red&lt;&#x2F;code&gt;이며 부모와 동일 부모를 갖는 노드가 &lt;code&gt;black&lt;&#x2F;code&gt;이라면 &lt;code&gt;restructing&lt;&#x2F;code&gt;을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;부모가 &lt;code&gt;red&lt;&#x2F;code&gt;이며 부모와 동일 부모를 갖는 노드가 &lt;code&gt;red&lt;&#x2F;code&gt;라면 &lt;code&gt;recoloring&lt;&#x2F;code&gt;을 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Restructing
&lt;ul&gt;
&lt;li&gt;부모 노드의 부모 노드를 조상 노드라고 하자.&lt;&#x2F;li&gt;
&lt;li&gt;삽입하는 노드, 부모 노드, 조상 노드를 오름차순으로 정렬한다.&lt;&#x2F;li&gt;
&lt;li&gt;셋 중 중간값을 부모 노드로 설정하고, 나머지 두 값을 자식 노드로 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;새로 부모가 된 노드를 &lt;code&gt;black&lt;&#x2F;code&gt;으로 만들고 나머지 자식은 &lt;code&gt;red&lt;&#x2F;code&gt;로 만든다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Recoloring
&lt;ul&gt;
&lt;li&gt;부모 노드와 같은 부모를 가지는 노드를 삼촌 노드라고 하자.&lt;&#x2F;li&gt;
&lt;li&gt;부모 노드와 삼촌 노드를 모두 &lt;code&gt;black&lt;&#x2F;code&gt;으로 변경한다. 조상 노드는 &lt;code&gt;red&lt;&#x2F;code&gt;로 변경한다.
&lt;ul&gt;
&lt;li&gt;조상 노드가 루트 노드일 경우 &lt;code&gt;black&lt;&#x2F;code&gt;으로 수정한다.&lt;&#x2F;li&gt;
&lt;li&gt;조상 노드가 &lt;code&gt;red&lt;&#x2F;code&gt;일때, 조상 노드의 부모 노드 역시 &lt;code&gt;red&lt;&#x2F;code&gt;라면 &lt;code&gt;restructing&lt;&#x2F;code&gt; 혹은 &lt;code&gt;recoloring&lt;&#x2F;code&gt;을 상황에 맞게 계속 진행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cs.usfca.edu&#x2F;~galles&#x2F;visualization&#x2F;RedBlack.html&quot;&gt;시뮬레이션 사이트&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;reference&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code-lab1.tistory.com&#x2F;217&quot;&gt;B-Tree&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code-lab1.tistory.com&#x2F;62&quot;&gt;Red Black Tree&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Sorting</title>
		<published>2023-06-08T00:00:00+00:00</published>
		<updated>2023-06-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sorting/" type="text/html"/>
		<id>https://js970.github.io/sorting/</id>
		<content type="html">&lt;h2 id=&quot;sorting&quot;&gt;Sorting&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;sort&quot;&gt;Sort&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;record&lt;&#x2F;code&gt;를 &lt;code&gt;key&lt;&#x2F;code&gt;값에 따라 재배치하는 것을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;두 개의 &lt;code&gt;key&lt;&#x2F;code&gt;를 비교하여 &lt;code&gt;sort&lt;&#x2F;code&gt;를 수행하는 알고리즘은 아래와 같은 연산을 수행해야 한다.
&lt;ul&gt;
&lt;li&gt;두 &lt;code&gt;key&lt;&#x2F;code&gt;를 비교한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;key&lt;&#x2F;code&gt;값을 복사한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;insertion-sort&quot;&gt;Insertion Sort&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;배열을 &lt;code&gt;sorted&lt;&#x2F;code&gt;와 &lt;code&gt;unsorted&lt;&#x2F;code&gt;의 두 연속된 부분으로 나눈다. &lt;&#x2F;li&gt;
&lt;li&gt;초기값은 &lt;code&gt;sorted&lt;&#x2F;code&gt;는 빈 배열, &lt;code&gt;unsorted&lt;&#x2F;code&gt;는 전체 배열이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;unsorted&lt;&#x2F;code&gt;의 첫 번째 원소를 &lt;code&gt;sorted&lt;&#x2F;code&gt;의 첫 번째 원소와 비교한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sorted&lt;&#x2F;code&gt;의 원소보다 &lt;code&gt;unsorted&lt;&#x2F;code&gt;의 원소가 작다면 해당 &lt;code&gt;sorted&lt;&#x2F;code&gt;의 왼쪽에 삽입한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sorted&lt;&#x2F;code&gt;의 원소보다 큰 경우 &lt;code&gt;sorted&lt;&#x2F;code&gt;의 원소보다 작아질 때까지 &lt;code&gt;sorted&lt;&#x2F;code&gt;의 index를 1씩 증가시키며 순회한다.&lt;&#x2F;li&gt;
&lt;li&gt;마지막까지 &lt;code&gt;sorted&lt;&#x2F;code&gt;의 원소보다 큰 경우 &lt;code&gt;sorted&lt;&#x2F;code&gt;의 가장 우측에 삽입한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 과정을 &lt;code&gt;unsorted&lt;&#x2F;code&gt;의 크기가 0이 될 때까지 반복한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 i = 6인 상황에서의 삽입 정렬 과정을 나타낸 그림이다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;insertionSort.png&quot; alt=&quot;Insertion Sort&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;worst case&lt;&#x2F;code&gt;에서 &lt;code&gt;quadratic&lt;&#x2F;code&gt;의 시간복잡도를 가지는 정렬 알고리즘이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;exchange-sort&quot;&gt;Exchange Sort&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;배열의 &lt;code&gt;두 번째 원소&lt;&#x2F;code&gt;부터 배열의 &lt;code&gt;마지막 원소&lt;&#x2F;code&gt;까지 배열의 &lt;code&gt;첫 번째 원소&lt;&#x2F;code&gt;와 비교하여 배열의 첫 번째 원소가 더 클 경우 두 값을 교환하는 정렬 방법이다.&lt;&#x2F;li&gt;
&lt;li&gt;배열의 두 번째 원소부터 시작한 교환 과정이 끝나면 배역의 &lt;code&gt;세 번째 원소&lt;&#x2F;code&gt;부터 배열의 &lt;code&gt;마지막 원소&lt;&#x2F;code&gt;까지 배열의 &lt;code&gt;두 번째 원소&lt;&#x2F;code&gt;와 비교하여 교환하는 과정을 거친다.&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 배열의 마지막 직전 원소까지 교환이 끝나면 정렬 과정이 종료된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;worst case&lt;&#x2F;code&gt;에서 &lt;code&gt;quadratic&lt;&#x2F;code&gt;의 시간복잡도를 가지는 정렬 알고리즘이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;selection-sort&quot;&gt;Selection Sort&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exchange sort&lt;&#x2F;code&gt;방법과 유사하다.&lt;&#x2F;li&gt;
&lt;li&gt;배열의 첫 번째 원소부터 배열의 마지막 원소값까지의 모든 값들과 비교한다.&lt;&#x2F;li&gt;
&lt;li&gt;그 중 가장 작은 값과 배열의 첫 번째 원소의 값을 교환한다.&lt;&#x2F;li&gt;
&lt;li&gt;다시 배열의 두 번째 원소에 대해 같은 과정을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 과정을 배열의 마지막 원소 이전까지의 원소에 대해 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;worst case&lt;&#x2F;code&gt;에서 &lt;code&gt;quadratic&lt;&#x2F;code&gt;의 시간복잡도를 가지는 정렬 알고리즘이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;keyggab-biggyyi-lower-bound&quot;&gt;key값 비교의 lower bound&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;n개의 서로 다른 &lt;code&gt;key&lt;&#x2F;code&gt;값으로 정렬된 집합이 있다고 하자. 편의를 위해 &lt;code&gt;key&lt;&#x2F;code&gt;값은 정수로 가정하자.&lt;&#x2F;li&gt;
&lt;li&gt;이 집합에서 만들어지는 순열 [k1, k2, k3, ..., kn]에 대해서 &lt;code&gt;inversion&lt;&#x2F;code&gt;은 다음과 같은 조건을 만족한다.$$(k_i, k_j) \ such\ that\ i&amp;lt;j\ and\ k_i &amp;gt; k_j$$&lt;&#x2F;li&gt;
&lt;li&gt;즉, [3, 2, 4, 1, 6, 5]에 대한 &lt;code&gt;inversion&lt;&#x2F;code&gt;은 (3, 2), (3, 1), (2, 1), (6, 5), (4, 1)이다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 &lt;code&gt;inversion&lt;&#x2F;code&gt;을 찾는 알고리즘은 아래와 같은 &lt;code&gt;worst case&lt;&#x2F;code&gt;의 경우 아래와 같은 비교연산의 횟수가 필요하다.$$\frac{n(n-1)}{2}\ comparisons\ of\ keys$$
&lt;ul&gt;
&lt;li&gt;[n, n-1, n-2, ..., 3, 2, 1] 순서로 정렬된 집합이 있다고 생각하자.&lt;&#x2F;li&gt;
&lt;li&gt;n에 대해서는 n-1번의 비교 연산이 필요하다.&lt;&#x2F;li&gt;
&lt;li&gt;n-1에 대해서는 n-2번의 비교 연산이 필요하다.&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 필요한 비교 연산을 모두 수행하면 위와 같은 비교 횟수가 필요함을 알 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;worst case&lt;&#x2F;code&gt;가 아닌 &lt;code&gt;average case&lt;&#x2F;code&gt;의 경우에도 아래와 같은 비교연산의 횟수가 필요하다.$$\frac{n(n-1)}{4}\ comparisons\ of\ keys$$
&lt;ul&gt;
&lt;li&gt;(s, r)이 서로 다른 &lt;code&gt;key&lt;&#x2F;code&gt;값의 쌍이라고 하자. 전체 집합의 원소가 n개라면 (s, r)쌍을 선택하는 것은 아래와 같다.$$the\ number\ of\ distinct\ pairs\ (i, j) = \frac{n(n-1)}{2}$$&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;key&lt;&#x2F;code&gt;쌍의 조합에 대해 &lt;code&gt;inversion&lt;&#x2F;code&gt;일 경우는 i &amp;gt; j인 경우이다. &lt;code&gt;average case&lt;&#x2F;code&gt;에서 이는 1&#x2F;2의 경우의 수를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 &lt;code&gt;average case&lt;&#x2F;code&gt;에서는 위와 같은 비교연산의 횟수가 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;merge-sort&quot;&gt;Merge Sort&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;divide and conquer&lt;&#x2F;code&gt;방식의 정렬 알고리즘이다.&lt;&#x2F;li&gt;
&lt;li&gt;배열을 2부분으로 계속 나눈다.&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 생성된 모든 subarray가 크기가 1인 배열이 되면 &lt;code&gt;merge&lt;&#x2F;code&gt;를 시작한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;merge&lt;&#x2F;code&gt;과정에서 &lt;code&gt;key&lt;&#x2F;code&gt;값이 작은 원소를 좌측에 배치한다.&lt;&#x2F;li&gt;
&lt;li&gt;각 &lt;code&gt;merge&lt;&#x2F;code&gt;과정에서 총 n번의 비교 연산을 필요로 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;divide&lt;&#x2F;code&gt;및 &lt;code&gt;merge&lt;&#x2F;code&gt;과정은 floor(log n)번 일어난다. 따라서 시간복잡도는 &lt;strong&gt;n * log n&lt;&#x2F;strong&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 의사 코드로 나타내면 아래와 같다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, keytype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;[]) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(n&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; h = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(n&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), m = n - h;
&lt;&#x2F;span&gt;&lt;span&gt;		keytype U[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;h], V[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;m];
&lt;&#x2F;span&gt;&lt;span&gt;		copy S[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] through S[h] to U[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] through U[h];
&lt;&#x2F;span&gt;&lt;span&gt;		copy S[h+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] through S[n] to V[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] through V[m];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(h, U);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mergesort&lt;&#x2F;span&gt;&lt;span&gt;(m, v);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;merge&lt;&#x2F;span&gt;&lt;span&gt;(h, m, U, V, S);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;copy&lt;&#x2F;code&gt;연산의 시간복잡도는 &lt;strong&gt;n * log n&lt;&#x2F;strong&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;merge sort&lt;&#x2F;code&gt;에서 &lt;code&gt;copy&lt;&#x2F;code&gt;연산의 시간복잡도를 고려하면 총 시간복잡도는 &lt;strong&gt;2n * log n&lt;&#x2F;strong&gt;이 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improved-merge-sort&quot;&gt;Improved Merge Sort&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래와 같이 &lt;code&gt;linked list&lt;&#x2F;code&gt;자료 구조를 사용하여 &lt;code&gt;merge&lt;&#x2F;code&gt;과정을 수행한다고 생각해 보자.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;llmerge.png&quot; alt=&quot;Linked List Merge Sort&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;레코드가 정렬된 상태를 유지할 필요가 없다면 assignment 연산이 필요 없다.&lt;&#x2F;li&gt;
&lt;li&gt;레코드가 정렬된 상태를 유지해야 한다면 linear의 시간복잡도를 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Branch &amp; Bound - Traveling Salesperson Problem</title>
		<published>2023-06-04T00:00:00+00:00</published>
		<updated>2023-06-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/branch-bound-traveling-salesperson-problem/" type="text/html"/>
		<id>https://js970.github.io/branch-bound-traveling-salesperson-problem/</id>
		<content type="html">&lt;h2 id=&quot;branch-bound-traveling-salesperson-problem&quot;&gt;Branch &amp;amp; Bound - Traveling Salesperson Problem&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;아래의 조건을 만족하면서 총 이동 거리가 최소가 되는 최적 경로를 찾는 문제이다.
&lt;ul&gt;
&lt;li&gt;주어진 city(노드)에서 출발한다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 city(노드)를 정확히 한 번씩 방문한다.&lt;&#x2F;li&gt;
&lt;li&gt;다시 처음 시작한 city(노드)로 돌아온다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bound-mic-munje-haeggyeo-jjeoryag&quot;&gt;Bound 및 문제 해결 전략&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;수업시간에 다룬 Bound방법에 대해서는 제대로 이해를 못해서 인터넷에서 따로 찾았다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;노드에서 가장 weight가 작은 edge를 두 개 선택하여 경로가 가질 수 있는 최저 거리인 minimum bound를 산정한다.&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 각 노드 별로 기대 가능한 최소 거리를 가지는 경로의 minimum bound를 계산한다.&lt;&#x2F;li&gt;
&lt;li&gt;경로 구성 중 cycle을 형성하거나, 시작 지점으로 되돌아가지 못하는 경우 &lt;code&gt;non-promising&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;현재 탐색된 경로의 이동거리보다 bound가 클 경우 해당 노드는 &lt;code&gt;non-promising&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;시작 노드에서부터 BFS Bound값을 이용한 Best First Search를 통해 최소 경로를 찾는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.geeksforgeeks.org&#x2F;traveling-salesman-problem-using-branch-and-bound-2&#x2F;&quot;&gt;Traveling Salesman Problem using Branch And Bound&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gtl.csa.iisc.ac.in&#x2F;dsa&#x2F;node187.html&quot;&gt;Example of calculate Bound&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Branch &amp; Bound</title>
		<published>2023-06-04T00:00:00+00:00</published>
		<updated>2023-06-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/branch-bound/" type="text/html"/>
		<id>https://js970.github.io/branch-bound/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Branch &amp;amp; Bound&lt;&#x2F;li&gt;
&lt;li&gt;Branch &amp;amp; Bound - 0-1 Knapsack Problem&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;branch-bound&quot;&gt;Branch &amp;amp; Bound&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;backtracking-vs-branch-bound&quot;&gt;Backtracking vs Branch &amp;amp; Bound&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Backtracking
&lt;ul&gt;
&lt;li&gt;노드를 추가한 뒤 &lt;code&gt;non-promising&lt;&#x2F;code&gt;임이 확인되면 Backtracking을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;preorder traversal을 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;최적화 문제와 비 최적화 문제 모두에 사용된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Branch &amp;amp; Bound
&lt;ul&gt;
&lt;li&gt;노드에서 더 이상 최적해를 찾을 가능성이 없다면 분기를 수행하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;노드에서는 Bound값을 계산해서 노드가 promising인지 아닌지를 판단한다. 
&lt;ul&gt;
&lt;li&gt;promising한 경우 해당 노드의 child노드를 방문한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Bound값이란 노드를 확장하여 얻을 수 있는 value의 범위를 뜻한다.&lt;&#x2F;li&gt;
&lt;li&gt;트리 순회 방식에 제약받지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;최적화 문제에만 사용된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;branch-bound-with-best-first-search&quot;&gt;Branch &amp;amp; Bound with Best-First Search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;본 포스트의 &lt;strong&gt;Branch &amp;amp; Bound - 0-1 Knapsack problem&lt;&#x2F;strong&gt;에서 확인 가능하지만, 단순히 Branch &amp;amp; Bound기법을 적용하는 것 만으로는 Backtracking과 비교하여 이점이 없다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 BFS Pruning, DFS Pruning모두 트리의 노드를 정해진 순회 순서에 따라 차례대로 탐색하기 때문이다.&lt;&#x2F;li&gt;
&lt;li&gt;DFS와 달리, BFS에서는 child를 가지는 같은 계층의 노드에 대한 Bound값을 비교하는 것이 가능하다. 이를 활용하여 Branch &amp;amp; Bound의 성능을 향상시킬 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;같은 레벨의 노드의 Bound를 비교하여, 높은 Bound를 가지는 노드의 자식 노드를 먼저 탐색하는 것이 &lt;code&gt;Best-First Search&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dfs-pruning-vs-bfs-pruning-vs-best-first-search-pruning&quot;&gt;(DFS + Pruning) vs (BFS + Pruning) vs (Best-First Search + Pruning)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;DFS + Pruning
&lt;ul&gt;
&lt;li&gt;Backtracking 기법이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;&#x2F;code&gt;을 사용하여 모든 노드를 DFS를 통해 순회한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 과정에서 &lt;code&gt;promising&lt;&#x2F;code&gt;함수를 사용하여 더 이상 진행 불가능한 노드에서는 Backtracking 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;BFS + Pruning
&lt;ul&gt;
&lt;li&gt;Branch &amp;amp; Bound 기법이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;queue&lt;&#x2F;code&gt;를 사용하여 모든 노드를 BFS(Breadth First Search)를 통해 순회한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;promising&lt;&#x2F;code&gt;함수에서 bound값을 비교하여 자식 노드 방문 여부를 판단한다. 
&lt;ul&gt;
&lt;li&gt;bound값을 비교했을 때 방문이 필요 없다고 판단되면 해당 노드의 자식 노드는 방문하지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Best-First Search + Pruning
&lt;ul&gt;
&lt;li&gt;향상된 Branch &amp;amp; Bound 기법이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;priority_queue&lt;&#x2F;code&gt;를 사용하여 같은 레벨 상에서 높은 Bound값을 가지는 노드의 자식을 먼저 탐색한다.&lt;&#x2F;li&gt;
&lt;li&gt;정해진 순서에 따라 노드를 방문하는 것이 아닌, 유망성을 기준으로 높은 유망성을 가지는 노드를 먼저 방문하기 때문에 BFS + Pruning방식에 비해 방문해야 할 노드가 적다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;branch-bound-0-1-knapsack-problem&quot;&gt;Branch &amp;amp; Bound - 0-1 Knapsack Problem&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;space-state-tree-breadth-first-search-pruning&quot;&gt;Space State Tree(Breadth-First Search Pruning)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;knapsackBFS.png&quot; alt=&quot;0-1 Knapsack Problem BFS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BFS를 이용하여 Space State Tree를 Pruning한다.&lt;&#x2F;li&gt;
&lt;li&gt;1번 노드에서 &lt;code&gt;price&lt;&#x2F;code&gt;의 최댓값이 40으로 갱신되었으므로 2번 노드의 child를 방문한다.
&lt;ul&gt;
&lt;li&gt;DFS를 이용한 Backtracking방법에서는 2번 노드의 child를 탐색하지 않았다.&lt;&#x2F;li&gt;
&lt;li&gt;방문하는 이유는 2번 노드의 promising이 82$이기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;3번 노드에서 다시 &lt;code&gt;price&lt;&#x2F;code&gt;의 최댓값이 70으로 갱신된다. 따라서 6번 노드의 child는 방문하지 않는다.
&lt;ul&gt;
&lt;li&gt;6번 노드의 promising이 60$이기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이런 방식으로 탐색을 하면 총 16회의 탐색 끝에 본 0-1 Knapsack Problem의 최적해를 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;js970.github.io&#x2F;backtracking-0-1-knapsack-problem&#x2F;&quot;&gt;0-1 Knapsack Backtracking Solution&lt;&#x2F;a&gt;에서 확인할 수 있지만, Backtracking을 사용한 경우 12회의 탐색으로 최적해를 구했다, Branch &amp;amp; Bound방법을 사용했을 때 오히려 탐색 시간은 더 오래 걸렸다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;space-state-tree-best-first-search-pruning&quot;&gt;Space State Tree(Best-First Search Pruning)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;knapsackBestFirstSearch.png&quot; alt=&quot;Best-First Search Branch &amp;amp; Bound 0-1 Knapsack&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Best - First Search를 이용하여 Space State Tree를 Pruning한다.&lt;&#x2F;li&gt;
&lt;li&gt;1번 노드의 &lt;code&gt;bound&lt;&#x2F;code&gt;가 115$이므로, 1번 노드의 child부터 탐색한다.&lt;&#x2F;li&gt;
&lt;li&gt;3번 노드의 &lt;code&gt;bound&lt;&#x2F;code&gt;는 115$, 4번 노드의 &lt;code&gt;bound&lt;&#x2F;code&gt;는 98$이므로, 3번 노드의 child를 먼저 탐색한다.&lt;&#x2F;li&gt;
&lt;li&gt;5번 노드는 &lt;code&gt;non-promising&lt;&#x2F;code&gt;이고, 6번 노드가 최대 이익을 가지는 노드로 설정된다. 한편 이때의 &lt;code&gt;bound&lt;&#x2F;code&gt;는 80$ 이므로 4번 노드의 child를 탐색한다.&lt;&#x2F;li&gt;
&lt;li&gt;7번 노드에서 최대 이익 노드가 6번 노드로 갱신된다. 이때의 &lt;code&gt;bound&lt;&#x2F;code&gt;는 98$로, Space State Tree에서 이보다 높은 &lt;code&gt;bound&lt;&#x2F;code&gt;를 가지는 노드가 존재하지 않으므로 탐색이 종료된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TODO 2023-06-05
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Subprograms</title>
		<published>2023-06-01T00:00:00+00:00</published>
		<updated>2023-06-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/subprograms/" type="text/html"/>
		<id>https://js970.github.io/subprograms/</id>
		<content type="html">&lt;h2 id=&quot;subprogram-concepts&quot;&gt;Subprogram Concepts&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Program = Algorithm + Data Structure(Wirth 저) 에서 Algorithm이 Control Flow를 담당한다.&lt;&#x2F;li&gt;
&lt;li&gt;그렇다면 Data Structure의 Flow는 어떻게 처리될까?
&lt;ul&gt;
&lt;li&gt;Data Structure을 처리하는 Subprogram을 통해 Data Flow가 관리될 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;subprogram&quot;&gt;Subprogram&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;전체 프로그램에 포함된 독립적인 작은 프로그램&lt;&#x2F;li&gt;
&lt;li&gt;함수(function)과 프로시저(procedure)가 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;함수&lt;&#x2F;code&gt; : 반환 값은 존재하지만 부수 효과는 존재하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;프로시저&lt;&#x2F;code&gt; : 반환 값은 없고 부수 효과만 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;정말로 부수 효과가 없는 함수의 경우 pure function이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;함수형 프로그래밍이란 프로시저의 사용 없이 function만 사용하는 프로그래밍 방법론이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;하나의 entry point를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;서브프로그램을 호출한 서브프로그램은 호출된 서브프로그램이 수행되기 전에 suspend한다.&lt;&#x2F;li&gt;
&lt;li&gt;호출된 서브프로그램의 수행이 완료되면 호출자로 수행 흐름이 바뀐다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;terminology-of-subprogram&quot;&gt;Terminology of Subprogram&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;definition&lt;&#x2F;code&gt; : 서브프로그램의 작동을 기술한 부분이다.
&lt;ul&gt;
&lt;li&gt;선언(declaration)과 함께 사용되기도 하고, 선언만 사용될 때도 있다.&lt;&#x2F;li&gt;
&lt;li&gt;선언에서는 &lt;code&gt;protocol&lt;&#x2F;code&gt;만을 명시한다.&lt;&#x2F;li&gt;
&lt;li&gt;definition에서는 &lt;code&gt;header&lt;&#x2F;code&gt;, &lt;code&gt;body&lt;&#x2F;code&gt;를 명시한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;call&lt;&#x2F;code&gt; : 서브프로그램이 수행될 것을 요구하는 부분이다.
&lt;ul&gt;
&lt;li&gt;실인수(actual argument)가 서브프로그램 호출 시 전달된다.&lt;&#x2F;li&gt;
&lt;li&gt;서브프로그램 호출 시 실인수가 형식 인수로 전달된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;header&lt;&#x2F;code&gt; : 서브프로그램의 이름, 종류, 형식인수를 포함하는 부분이다.
&lt;ul&gt;
&lt;li&gt;형식인수(formal parameter)가 헤더에 선언된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;body&lt;&#x2F;code&gt; : 서브프로그램 호출 시 실행되는 부분이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;parameter profile&lt;&#x2F;code&gt; : 매개변수 프로파일이란 인수의 개수, 순서 자료형을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;protocol&lt;&#x2F;code&gt; : 매개변수 프로파일 + 반환형(함수의 경우)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;formal-and-actual-correspondence&quot;&gt;Formal and Actual Correspondence&lt;&#x2F;h3&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;형식인수가 실인수로 대응되는 방법은 위치에 의한 대응(positional correspondence)과 키워드에 의한 대응 방식(keyword correspondence)의 두 가지가 있으며, 병용되어 사용되기도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;위치에 의한 대응
&lt;ul&gt;
&lt;li&gt;매개변수의 위치에 따라 실인수가 전달된다.&lt;&#x2F;li&gt;
&lt;li&gt;가장 일번적이며, C, Java, Pascal등의 언어에서 사용된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;키워드에 의한 대응
&lt;ul&gt;
&lt;li&gt;매개변수의 이름에 따라 실인수가 전달된다.&lt;&#x2F;li&gt;
&lt;li&gt;순서가 중요하지 않으므로 실인수를 전달할 때 순서를 기억하지 않아도 된다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 형식인수의 이름은 기억해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 키워드에 의한 인수 전달 예시이다.&lt;pre data-lang=&quot;Python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Python &quot;&gt;&lt;code class=&quot;language-Python&quot; data-lang=&quot;Python&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strcpy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tgt&lt;&#x2F;span&gt;&lt;span&gt;=b)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위치에 의한 대응과 키워드에 의한 대응을 병용해서 사용하기도 한다.
&lt;ul&gt;
&lt;li&gt;Python은 매개변수 목록의 앞부분은 위치에 의한 대응, 뒷부분은 키워드에 의한 대응으로 &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;를 통해 구분한다.&lt;&#x2F;li&gt;
&lt;li&gt;Ada, FORTRAN 90, Python에서 이러한 방식을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;procedures-and-functions&quot;&gt;Procedures and Functions&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;어떤 언어에서는 함수와 프로시저의 구분이 프로그래머에 달려 있다.&lt;&#x2F;li&gt;
&lt;li&gt;대표적으로 C언어 계열에서 void함수는 프로시저이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;procedure&quot;&gt;Procedure&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;사용자 정의 문장을 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;부대효과를 발생시킨다.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;발생되는 부대효과로는 입출력, 비지역변수 변경 등이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;function&quot;&gt;Function&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;사용자 정의 연산자를 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;부대효과는 없고 결과값을 갖는다.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;외부로 전달하는 정보로는 결과값이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;parameter-passing&quot;&gt;Parameter Passing&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;yimi-modde&quot;&gt;의미 모델&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;입력 모드에서는 실인수가 형식인수로 전달된다.&lt;&#x2F;li&gt;
&lt;li&gt;출력 모드에서는 형식인수 값이 실인수로 전달된다.&lt;&#x2F;li&gt;
&lt;li&gt;입출력 모드에서는 양방향 전달이 모두 일어난다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;gganyeomjjeo-modde&quot;&gt;개념적 모델&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;값을 물리적으로 전달한다.(copy)&lt;&#x2F;li&gt;
&lt;li&gt;참조 경로만 전달한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;guhyeon-modde&quot;&gt;구현 모델&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;구현 모델이 다양한 이유는 side-effect때문이다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;값 전달 : pass-by-value, call-by-value
&lt;ul&gt;
&lt;li&gt;값에 의한 호출(copy), 입력 모드의 인수전달을 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;물리적으로 값을 전달하거나, 참조 경로를 전달하여 구현 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;결과 전달 : pass-by-result, call-by-result
&lt;ul&gt;
&lt;li&gt;형식인수의 값이 호출자로 전달된다.&lt;&#x2F;li&gt;
&lt;li&gt;물리적으로 값을 전달하거나, 참조 경로를 전달하여 구현 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;값-결과 전달 : pass-by-value-result, call-by-value-result
&lt;ul&gt;
&lt;li&gt;호출시 값을 복사(실인수 -&amp;gt; 형식인수)하고, 복귀시 다시 값을 복사(형식인수 -&amp;gt; 실인수)한다.&lt;&#x2F;li&gt;
&lt;li&gt;입출력 모드의 인수전달을 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;입출력 모드의 인수 전달이 가능하며, 인수 전달로 인한 alias가 생기지 않는다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;참조 전달 : pass-by-reference, call-by reference
&lt;ul&gt;
&lt;li&gt;참조 경로(주소)를 전달한다.&lt;&#x2F;li&gt;
&lt;li&gt;pass-by-sharing이라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;입출력 모드의 인수전달을 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;전달 과정 자체가 효율적이라는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 참조 시간이 오래 걸리고 alias가 발생할 수 있다는 아주 큰 단점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;alias가 발생하면 프로그램의 결과를 예측하기가 매우 힘들어진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이름 전달 : pass-by-name, call-by-name
&lt;ul&gt;
&lt;li&gt;글자 그대로 치환(rewrite)한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;참조 방법&lt;&#x2F;code&gt; 을 형식인수에 대응시킨 후, 형식인수를 사용할 때마다 이 참조 방법대로 변수를 구한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;참조 방법&lt;&#x2F;code&gt; : L-value, R-value를 구하는 함수&lt;&#x2F;li&gt;
&lt;li&gt;위 함수의 function call을 통해 late-binding이 이뤄진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;late binding을 통한 유연성을 제공한다.&lt;&#x2F;li&gt;
&lt;li&gt;실인수의 종류에 따라 인수 전달의 의미가 달라진다.
&lt;ul&gt;
&lt;li&gt;단순 변수 : 참조 전달과 동등하다.&lt;&#x2F;li&gt;
&lt;li&gt;상수 식 : 값 전달과 동등하다.&lt;&#x2F;li&gt;
&lt;li&gt;배열 등이 포함된 복잡한 식 : 대응되는 인수전달 방법이 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;인수 참조가 너무 비효율적이라는 단점이 있다(참조할 때마다 function call이 일어나기 때문이다).&lt;&#x2F;li&gt;
&lt;li&gt;또한 함수를 구현에 따른 오버헤드도 존재한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;function-overloading&quot;&gt;Function Overloading&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;서브프로그램의 오버로딩 : 동일한 참조환경 내에서 다른 서브프로그램과 이름이 같은 서브프로그램&lt;&#x2F;li&gt;
&lt;li&gt;연산자의 오버로딩 : 연산항의 타입에 따라 의미가 달라지는 연산자.&lt;&#x2F;li&gt;
&lt;li&gt;C++, Java, Ada는 사용자 정의 서브프로그램도 overloading이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;C++, Python은 연산자 overloading도 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;overloading resolving algorithm을 통해 기본값이 있을 경우 어떤 서브프로그램을 호출할 지 선택할 수 있다. 아래는 overloading resolving algorithm이 필요한 예시이다.&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt;();; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 어떤 fun()을 호출해야 할지 선택해야 한다.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;jensen-s-device&quot;&gt;Jensen&#x27;s Device&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;generic-subprogram&quot;&gt;Generic Subprogram&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;여러 타입의 인수에 적용될 수 있는 서브프로그램&lt;&#x2F;li&gt;
&lt;li&gt;다형적 서브프로그램(ploymorphic subprogram)의 일종이다.&lt;&#x2F;li&gt;
&lt;li&gt;다형성의 종류로는 아래와 같은 것들이 있다.
&lt;ul&gt;
&lt;li&gt;순수 다형성(pure polymorphism) : 상속과 가상함수를 통한 다형성&lt;&#x2F;li&gt;
&lt;li&gt;경험적 다형성(ad-hoc polymorphism) : 중복 지정을 통한 다형성&lt;&#x2F;li&gt;
&lt;li&gt;매개변수적 다형성(parametric polymorphism) : 타입을 인수로 받는 형태의 다형성&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;주요 언어의 예시는 아래와 같다.
&lt;ul&gt;
&lt;li&gt;Ada : 서브프로그램, 패키지를 generic으로 선언할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;C++ : 타입을 인수로 하는 template함수 및 Class를 작성할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Ada, C++모두 범용 서브프로그램은 어떤 틀 구실을 하며, 실제 컴파일 시간에 구체적 타입에 대하여 개별 복사가 이루어진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jensen-s-device-1&quot;&gt;Jensen&#x27;s Device&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;pass-by-name 인수를 이용한 범용 서브루틴&lt;&#x2F;li&gt;
&lt;li&gt;아래는 의사 코드이다.&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;	real procedure sum(i, li, hi, term);
&lt;&#x2F;span&gt;&lt;span&gt;		value lo, hi; &#x2F;&#x2F; pass-by-name 인수들
&lt;&#x2F;span&gt;&lt;span&gt;		integer i, io, hi;
&lt;&#x2F;span&gt;&lt;span&gt;		real term;
&lt;&#x2F;span&gt;&lt;span&gt;	begin
&lt;&#x2F;span&gt;&lt;span&gt;		real temp;
&lt;&#x2F;span&gt;&lt;span&gt;		remp := 0;
&lt;&#x2F;span&gt;&lt;span&gt;		for i := lo step 1 until hi do
&lt;&#x2F;span&gt;&lt;span&gt;			temp := temp + term;
&lt;&#x2F;span&gt;&lt;span&gt;		sum := temp
&lt;&#x2F;span&gt;&lt;span&gt;	end;
&lt;&#x2F;span&gt;&lt;span&gt;	print(sum(i, 1, 100, 1&#x2F;i))
&lt;&#x2F;span&gt;&lt;span&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 프로그램은 1&#x2F;1 + 1&#x2F;2 + 1&#x2F;3 + ... + 1&#x2F;100 을 계산하는 프로그램이다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 이용해서 행렬의 행, 열, 주대각선의 합 등을 구할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;coroutine&quot;&gt;Coroutine&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;여러 개의 진입 위치를 스스로 관리하는 서브프로그램이다.&lt;&#x2F;li&gt;
&lt;li&gt;코루틴은 호출된다(called)고 말하지 않고 계속된다(resumed)고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 수행이 번갈아 이루어지므로 유사병렬성을 지니고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;지원 언어 : SIMULA 67, BLISS, INTERLISP, Modula-2, Python, Lua(비대칭 coroutine)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Expression and Statement Level Control Structure</title>
		<published>2023-05-30T00:00:00+00:00</published>
		<updated>2023-05-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/expression-and-statement-level-control-structure/" type="text/html"/>
		<id>https://js970.github.io/expression-and-statement-level-control-structure/</id>
		<content type="html">&lt;h2 id=&quot;control-flow-jeeo-gujo&quot;&gt;Control Flow(제어 구조)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;control-flowran&quot;&gt;Control flow란?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;제어분과 제어문에 의해 제어되는 문장의 집합&lt;&#x2F;li&gt;
&lt;li&gt;구조화 프로그래밍에서 모든 순서도는 &lt;code&gt;선택구조&lt;&#x2F;code&gt; 와 &lt;code&gt;반복구조&lt;&#x2F;code&gt; 만으로 표현이 가능하다.(prime component)
&lt;ul&gt;
&lt;li&gt;구조화 프로그래밍이란?&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;structure_programming.png&quot; alt=&quot;Structure Programming&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위에서 아래로의 수행 흐름을 순차적 수행 흐름이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;괄호, goto문, 문장 레이블 등을 통해 수행 흐름을 명시적으로 표기한다.&lt;&#x2F;li&gt;
&lt;li&gt;표현식 내에서의 수행 흐름, 문장 사이의 수행 흐름, 단위 프로그램(sub program, thread)사이의 수행 흐름이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;control-flowyi-jjonryu&quot;&gt;Control flow의 종류&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;수식 수준의 Control flow
&lt;ul&gt;
&lt;li&gt;Short-Circuit Evaluation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;문장 수준의 Control flow
&lt;ul&gt;
&lt;li&gt;Statement-Level Control Structure&lt;&#x2F;li&gt;
&lt;li&gt;Goto Controversy&lt;&#x2F;li&gt;
&lt;li&gt;Guarded Commands&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;short-circuit-evaluation&quot;&gt;Short-Circuit Evaluation&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;수식 수준에서의 control flow(제어 구조)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ddaraghoero-ggyssa&quot;&gt;단락회로 계산&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;연산항 전부를 계산하지 않은 상태에서 연산식의 결과를 계산하는 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;대개 논리식이나 조건 연산자에 적용된다.&lt;pre data-lang=&quot;Python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Python &quot;&gt;&lt;code class=&quot;language-Python&quot; data-lang=&quot;Python&quot;&gt;&lt;span&gt;A * (B &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13 &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), (A &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) and (B &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;단락회로 계산을 지원할 경우 위 수식에서는 &lt;strong&gt;A가 0 이상일 경우 and이후로는 연산할 필요가 없다&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pascal&lt;&#x2F;code&gt; 은 단락회로 계산을 지원하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;C&lt;&#x2F;code&gt;, &lt;code&gt;C++&lt;&#x2F;code&gt;, &lt;code&gt;Java&lt;&#x2F;code&gt;, &lt;code&gt;Modula-2&lt;&#x2F;code&gt; 는 논리곱, 논리합에 대한 단락회로 계산을 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ada&lt;&#x2F;code&gt;는 프로그래머가 단락회로 계산 여부를 선택할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;단락회로를 사용함으로써 간결한 표현이 가능하다.&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(index &amp;lt;= listlen) and (list[index] &amp;lt;&amp;gt; key) do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;하지만 부대효과가 있는 연산항에 대해서는 결과 예측이 힘들다는 단점이 있다.&lt;pre data-lang=&quot;Python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Python &quot;&gt;&lt;code class=&quot;language-Python&quot; data-lang=&quot;Python&quot;&gt;&lt;span&gt;(a &amp;gt; b) || (b++ &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 예시에서는 증감연산자의 실행 여부가 직관적이지 않다는 문제가 있다. 이는 프로그램의 결과 예측을 힘들게 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ddaibmun&quot;&gt;대입문&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;변수 값을 (동적으로) 지정하는 문장이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;=&lt;&#x2F;code&gt; 또는 &lt;code&gt;:=&lt;&#x2F;code&gt; 를 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;대입 기호가 관계 연산과 겹지정되면 혼란을 초래할 수 있다.&lt;pre data-lang=&quot;PL&#x2F;I&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-PL&#x2F;I &quot;&gt;&lt;code class=&quot;language-PL&#x2F;I&quot; data-lang=&quot;PL&#x2F;I&quot;&gt;&lt;span&gt;A = B = C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 수식에서 B = C는 비교연산으로 사용되었고,  A = ~에서의 =는 대입 연산으로 사용되었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;대입문으로는 아래와 같은 구문들이 존재한다.
&lt;ul&gt;
&lt;li&gt;단순 대입문(BASIC, C)&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;a = a + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;다중 목적지(PL&#x2F;I)&lt;pre data-lang=&quot;PL&#x2F;I&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-PL&#x2F;I &quot;&gt;&lt;code class=&quot;language-PL&#x2F;I&quot; data-lang=&quot;PL&#x2F;I&quot;&gt;&lt;span&gt;a, b = 0;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;조건 목적지(C++)&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;flag ? a : b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;C, Java에서는 지원하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;옛날 C언어에서는 지원했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;복합 대입문(C, C++, Java, Python)&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;a += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;다중 대입문(Python, Lua)&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ddaib-hyeossassi&quot;&gt;대입 연산식&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;대입 연산을 문장으로 간주하지 않고 표현식으로 간주한다.&lt;&#x2F;li&gt;
&lt;li&gt;C, C++, Java에서 이러한 방식을 채택했다.&lt;&#x2F;li&gt;
&lt;li&gt;Python에서도 &lt;code&gt;walrus operator&lt;&#x2F;code&gt;(&lt;code&gt;:=&lt;&#x2F;code&gt;)형태로 채택했다.&lt;pre data-lang=&quot;Python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Python &quot;&gt;&lt;code class=&quot;language-Python&quot; data-lang=&quot;Python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(line := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;()):
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 경우에는 괄호가 선택이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Python &quot;&gt;&lt;code class=&quot;language-Python&quot; data-lang=&quot;Python&quot;&gt;&lt;span&gt;buf = (line := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 경우에는 괄호가 필수이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;대입 연산의 결과 치환된 값을 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;대입 연산식을 사용할 경우 간결한 표현을 할 수 있다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 표현식에서 부대효과가 발생한다는 단점이 있다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;a = b = c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;a, b, c의 type에 따라 결과가 달라진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;statement-level-control-structure&quot;&gt;Statement-Level Control Structure&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;문장 수준의 흐름 제어로는 &lt;code&gt;순차 구조&lt;&#x2F;code&gt;, &lt;code&gt;선택 구조&lt;&#x2F;code&gt;, &lt;code&gt;반복 구조&lt;&#x2F;code&gt; 가 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;gujohwa-peuroggeraeonco&quot;&gt;구조화 프로그래밍&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 구조를 계층적으로 설계한다.&lt;&#x2F;li&gt;
&lt;li&gt;계층 구조는 프로그램 코드에 그대로 반영된다.&lt;&#x2F;li&gt;
&lt;li&gt;문장의 공간적 배치 순서가 수행 순서에 대응된다.
&lt;ul&gt;
&lt;li&gt;Readability 보장&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;한 문장은 단일 목적으로만 사용해야한다.
&lt;ul&gt;
&lt;li&gt;Readability, Debugging, 유지보수성 측면에서 유리하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sseotaegmun&quot;&gt;선택문&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;둘 이상의 경로 중 하나를 선택할 수 있도록 하는 제어문&lt;&#x2F;li&gt;
&lt;li&gt;기본 제어 구조 중 하나이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 선택문 유형 도식이다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;selection.png&quot; alt=&quot;Selection&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;3 방향 선택문이 사용되는 언어로는 FORTRAN이 있다.(음, 0, 양)&lt;&#x2F;li&gt;
&lt;li&gt;C++20에서 &lt;code&gt;&amp;lt;=&amp;gt;&lt;&#x2F;code&gt;연산자를 통해 3 방향 선택문이 구현되었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;설계 고려 사항
&lt;ul&gt;
&lt;li&gt;조건식의 형태와 타입&lt;&#x2F;li&gt;
&lt;li&gt;선택 가능한 형태로는 어떠한 형태가 있는가?(양방향, 단방향, 3방향)&lt;&#x2F;li&gt;
&lt;li&gt;중첩된 선택구조의 해석 방법(dnagling else)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sseotaegmunyi-jjunceob-dangling-else&quot;&gt;선택문의 중첩(dangling else)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;Python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Python &quot;&gt;&lt;code class=&quot;language-Python&quot; data-lang=&quot;Python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;		result &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;:=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	result &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;:=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;마지막에 사용된 else 구문이 중첩된 if문과 짝을 이루는지, 상위에 있는 if문과 짝을 이루는지 구분할 규칙이 필요하다.&lt;&#x2F;li&gt;
&lt;li&gt;해결책(규칙)으로는 아래와 같은 방법이 있다.
&lt;ul&gt;
&lt;li&gt;근거리 우선 : 짝이 없는 가장 가까운 앞쪽 if와 짝을 이룬다.(Pascal, C, C++, Java)&lt;&#x2F;li&gt;
&lt;li&gt;직접 중첩 금지 : if문이 중첩되려면 복합문을 사용해야 한다.(Algol 60)
&lt;ul&gt;
&lt;li&gt;복합문은 begin - end 블럭을 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;종결어 사용 : if의 종결어(end if, fi 등)를 사용하여 끝을 나타낸다.(FORTRAN 90, Ada, Lua)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;banbbomun&quot;&gt;반복문&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;반복 구조를 나타내기 위한 두 가지 방법으로 반복문과 재귀 호출이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;반복 구조로는 아래와 같은 세 가지 구조가 있다.
&lt;ul&gt;
&lt;li&gt;counter-controlled repetition(계수기에 따른 반복 구조) : 횟수에 따라 반복하는 for문&lt;&#x2F;li&gt;
&lt;li&gt;condition-controlled repetition(조건에 따른 반복 구조) : while, do-while, repeat-until
&lt;ul&gt;
&lt;li&gt;보통은 셋 다 지원하거나 두 가지 이상 지원하는데 특이하게 python은 while만 지원한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;repetion over data structure(자료 구조에 대한 반복 구조) : foreach, for-in
&lt;ul&gt;
&lt;li&gt;range-based for loop이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;반복문 설계 고려 사항으로는 아래와 같은 사항이 있다.
&lt;ul&gt;
&lt;li&gt;제어 부분이 반복문의 어디에 위치하는가?&lt;&#x2F;li&gt;
&lt;li&gt;break기능을 지원하는가?
&lt;ul&gt;
&lt;li&gt;Java의 경우 labeled break를 지원하다.(원하는 계층까지 break)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;goto-controversy&quot;&gt;GOTO controversy&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;무조건 분기 GOTO에 대한 논란이다.&lt;&#x2F;li&gt;
&lt;li&gt;Dijkstra에 의해 제기된 논란이다.
&lt;ul&gt;
&lt;li&gt;GOTO문을 사용하면 스파게티 코드가 양산되고, 이에 따라 가독성이 떨어지게 되며 결과적으로 프로그램이 엉망이 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;무조건 분기를 지원하지 않는 언어 : Modula-2, CLU, Euclid, Gypsy, Java&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이후로 Donald Knuth는 GOTO로 인한 문제점을 만들지 않는 방법에 대해 기술하였고 Frank Rubin은 아예 Dijkstra의 GOTO에 대한 문제 제기 자체를 해롭다고 비판했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;guarded-commands&quot;&gt;guarded commands&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Dijkstra가 제시했다. 조건부 명령어라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;조건을 만족할 때 해당 문장을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 수행 흐름에서 비결정성을 강조한다.(non-determination)
&lt;ul&gt;
&lt;li&gt;a와 b두 정수 중 최솟값을 반환하는 함수에 대해 생각해 보자. 이 경우 a와 b가 같을 경우는 중요한 고려사항이 아니다. 따라서 코드에서는 a&amp;lt;=b, a&amp;gt;=b등으로 기술해도 아무런 상관이 없다. 이러한 경우에 대해 Dijkstra는 코드의 비결정성을 강조했다. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 증명과 깊은 관련이 있다.
&lt;ul&gt;
&lt;li&gt;GOTO를 포함할 경우 프로그램 증명이 거의 불가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;선택 구조와 사전 검사 반복 구조만 허용된다면 증명이 가능하다.
&lt;ul&gt;
&lt;li&gt;if, do만 있다면 프로그램 증명이 간단해진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;조건이 붙은 병령어만 허용한다면 프로그램 증명이 용이하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sseotaeg-gumun&quot;&gt;선택 구문&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;if&amp;lt;조건&amp;gt; -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;[]&amp;lt;조건 -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;[]&amp;lt;조건 -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;[]&amp;lt;조건 -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;[]&amp;lt;조건 -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;모든 조건식을 계산한다.&lt;&#x2F;li&gt;
&lt;li&gt;참인 것 중 하나를 무작위로 선택하여 수행한다.(코드의 비결정성)&lt;&#x2F;li&gt;
&lt;li&gt;참인 것이 없다면 수행 오류이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;banbbo-gumun&quot;&gt;반복 구문&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;do&amp;lt;조건&amp;gt; -&amp;gt; 문장
&lt;&#x2F;span&gt;&lt;span&gt;[]&amp;lt;조건 -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;[]&amp;lt;조건 -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;[]&amp;lt;조건 -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;[]&amp;lt;조건 -&amp;gt; &amp;lt;문장&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;od
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;모든 조건식을 계산한다.&lt;&#x2F;li&gt;
&lt;li&gt;참인 것 중 하나를 무작위로 선택하여 수행한 후 1부터 반복한다.&lt;&#x2F;li&gt;
&lt;li&gt;참이 것이 없다면 종료한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;joggeobu-myeongryeongeoyi-yesi&quot;&gt;조건부 명령어의 예시&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;선택 구문&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;if x &amp;gt;= y -&amp;gt; max := x
&lt;&#x2F;span&gt;&lt;span&gt;[] y &amp;gt;= x -&amp;gt; max := y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;반복 구문&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;do q1 &amp;gt; q2 -&amp;gt; temp := q1; q1 := q2; q2 := temp &#x2F;&#x2F; swap(q1, q2)
&lt;&#x2F;span&gt;&lt;span&gt;[] q2 &amp;gt; q3 -&amp;gt; temp := q2; q2 := q3; q3 := temp &#x2F;&#x2F; swap(q2, q3)
&lt;&#x2F;span&gt;&lt;span&gt;[] q3 &amp;gt; q4 -&amp;gt; temp := q3; q3 := q4; q4 := temp &#x2F;&#x2F; swap(q3, q4)
&lt;&#x2F;span&gt;&lt;span&gt;od
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;결국 위 반복 구문의 의미는 아래의 조건을 만족할 때까지 q1, q2, q3, q4를 정렬하는 것이다.	$$(q1 \leq q2)\  \wedge \ (q2 \leq q3)\ \wedge \ (q3 \leq q4)$$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Expressions and Assignments</title>
		<published>2023-05-23T00:00:00+00:00</published>
		<updated>2023-05-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/expressions-and-assignments/" type="text/html"/>
		<id>https://js970.github.io/expressions-and-assignments/</id>
		<content type="html">&lt;h2 id=&quot;expressions&quot;&gt;Expressions&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;expression에는 표현식과 대입문이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;표현식은 값을 표현한다.&lt;&#x2F;li&gt;
&lt;li&gt;대입문은 변수의 값을 변경하거나 메모리의 위치를 변경한다.
&lt;ul&gt;
&lt;li&gt;어느 위치를 변경할 것인가 : L-value&lt;&#x2F;li&gt;
&lt;li&gt;어떤 값으로 변경할 것인가 : R-value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sseoggy-goryeo-sathan&quot;&gt;설계 고려 사항&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;대입 기호가 대칭인가?
&lt;ul&gt;
&lt;li&gt;a = a+1(대칭)&lt;&#x2F;li&gt;
&lt;li&gt;a := a+1(비대칭)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;대입 기호가 연산자인가, 아니면 그냥 문장을 만드는가?
&lt;ul&gt;
&lt;li&gt;a = b = c = 3.14 : c에 3.14 대입, b에 c대입, a에 b대입(C)&lt;&#x2F;li&gt;
&lt;li&gt;a = b = c = 3.14 : a, b, c에 3.14 대입(python)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hyeossaja&quot;&gt;연산자&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;초기 프로그래밍 언어의 목적은 산술 계산이었다.&lt;&#x2F;li&gt;
&lt;li&gt;산술식은 연산자(&lt;code&gt;operator&lt;&#x2F;code&gt;)와 연산항(&lt;code&gt;operand&lt;&#x2F;code&gt;)으로 구성된다.
&lt;ul&gt;
&lt;li&gt;연산자는 연산항 개수에 따라 분류 가능하다.
&lt;ul&gt;
&lt;li&gt;단항 연산자 : 연산항이 하나, ex : &lt;code&gt;++&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이항 연산자 : 연산항이 둘, ex : &lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;삼항 연산자 : 연산항이 셋, ex : &lt;code&gt;?:&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;연산자 위치에 따라 연산자를 분류할 수도 있다. 아래는 단항 연산자의 예시이다.
&lt;ul&gt;
&lt;li&gt;전치(prefix) : 연산자가 연산항 앞에 놓인다, ex : &lt;code&gt;-&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;후치(postfix) : 연산자가 연산항 뒤에 놓인다, ex : &lt;code&gt;++&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hyeossaja-usseossuwioperator-priority&quot;&gt;연산자 우선순위&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;operatorPriority.png&quot; alt=&quot;Operator Priority&quot; &#x2F;&gt;&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;hyeossaja-ggyeohabbbanhyang&quot;&gt;연산자 결합방향&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;전치 단항 연산자 : 우측결합&lt;&#x2F;li&gt;
&lt;li&gt;후치 단항 연산자 : 좌측결합&lt;&#x2F;li&gt;
&lt;li&gt;지수를 제외한 이항 연산자 : 좌측결합&lt;&#x2F;li&gt;
&lt;li&gt;지수 연산자 : 우측결합&lt;&#x2F;li&gt;
&lt;li&gt;대입 연산자 : 우측결합&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hyeossaja-ggyssa-ssusse&quot;&gt;연산자 계산 순서&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;특이하게도 &lt;code&gt;APL&lt;&#x2F;code&gt;은 연산자의 우선순위가 존재하지 않으며 모든 연산자는 우측결합이다.
&lt;ul&gt;
&lt;li&gt;이 때문에 3 * 4 + 5의 값이 27이 나온다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;연산 순서에 따른 오버플로우를 생각해야 한다.
&lt;ul&gt;
&lt;li&gt;A, C는 큰 양의 정수, B, D는 절대값이 큰 음의 정수라고 하자.
&lt;ul&gt;
&lt;li&gt;A + B + C + D 의 값과 A + C + B + D의 값은 오버플로우 발생에 따라 달라진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;괄호를 사용하여 연산순서를 명확히 할 수 있다(번거롭다)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;joggeo-hyeossaja&quot;&gt;조건 연산자&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C&lt;&#x2F;code&gt;, &lt;code&gt;C++&lt;&#x2F;code&gt;, &lt;code&gt;Java&lt;&#x2F;code&gt;, &lt;code&gt;Python&lt;&#x2F;code&gt;, &lt;code&gt;Lua&lt;&#x2F;code&gt;등에서 제공되는 삼항 연산자를 의미한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;함수형 언어의 if는 대부분 조건 연산자로고 보면 된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;L-value에도 조건 연산자를 쓸 수 있나?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C++&lt;&#x2F;code&gt;에서는 다음과 같은 표현이 가능하다. (옛날 &lt;code&gt;C&lt;&#x2F;code&gt;에서도 가능)&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span&gt;(c ? a : b) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;C&lt;&#x2F;code&gt;, &lt;code&gt;Java&lt;&#x2F;code&gt;에서는 불가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;연산항 계산 시 side effect발생 여부&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;사용자 정의 연산자에 대한 overloading이 허용되는가?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;mixed-mode expression이 허용되는가?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ggabheu-guhaneun-ssusse&quot;&gt;값을 구하는 순서&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;연산항의 값을 구하는 순서
&lt;ul&gt;
&lt;li&gt;변수 : 메모리의 값을 가져온다.&lt;&#x2F;li&gt;
&lt;li&gt;큰 상수 : 메모리의 값을 가져온다.&lt;&#x2F;li&gt;
&lt;li&gt;작은 상수 : 명령어 자체에 기록외어 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;괄호 표현식 : 괄호 표현식이 연산항으로 사용되기 전에 괄호 내의 모든 연산항과 연산자들이 계산되어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;함수 호출 시 인수를 계산하는 순서 : 정해져 있지 않다.&lt;&#x2F;li&gt;
&lt;li&gt;순수한 함수 : 평가 순서가 중요하지 않다.&lt;&#x2F;li&gt;
&lt;li&gt;부대효과가 있는 함수 : 평가 순서에 의해 부대효과가 발생할 수 있음에 주의해야 한다.
&lt;ul&gt;
&lt;li&gt;한 수식에 두 번 이상 나타나는 변수에는 &lt;code&gt;++&lt;&#x2F;code&gt;, &lt;code&gt;--&lt;&#x2F;code&gt;연산을 사용하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;실제로 이렇게 사용하지 않더라도 메크로 사용 과정에서 이런 상황이 발생할 수 있다.(dirty macro)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hyeossaja-obberowedd&quot;&gt;연산자 오버로딩&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;하나의 이름에 여러 기능을 부여한다.&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 사칙연산에 대해 overloading이 많이 일어난다.&lt;&#x2F;li&gt;
&lt;li&gt;컴파일러에서 오류 검사가 어렵다는 단점이 있다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;a = &amp;amp;b;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위의 경우 이항연산자 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;의 좌항이 생략된 것으로 판단할 수도 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이것이 주소연산이나 bitwise연산일 경우 오류가 아니다.&lt;&#x2F;li&gt;
&lt;li&gt;마찬가지로 C++에서의 아래와 같은 코드를 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span&gt;vector&amp;lt;vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; vec;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt; 에서 컴파일러가 오류를 발생시킬 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;하지만 코드가 간결해진다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;연산자 중복지정을 허용하는 언어로는 &lt;code&gt;C++&lt;&#x2F;code&gt;, &lt;code&gt;Ada&lt;&#x2F;code&gt;, &lt;code&gt;FORTRAN 90&lt;&#x2F;code&gt;, &lt;code&gt;Python&lt;&#x2F;code&gt;등이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hamsuyi-busuhyogwa-side-effect&quot;&gt;함수의 부수효과(side effect)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;함수에서 의도한 결과 또는 출력 이외의 다르게 변경되는 효과를 의미한다. 부대효과라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;함수가 부대효과를 발생시킨다면, 연산자의 계산 순서에 따라 값이 달라질 수 있다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;b = a + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;a);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드에서 a에 fun(&amp;amp;a)를 더할지, fun(&amp;amp;a)를 연산한 값에 a를 더할 지에 따라 b의 값이 변한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;연산자 역시 같은 문제가 있다.(증감연산자)&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 수행을 예측하기 힘들게 한다.&lt;&#x2F;li&gt;
&lt;li&gt;입출력 인수, 비지역 변수, I&#x2F;O operation등의 원인으로 부수효과가 발생한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;haeggyeo-bbanbbeo&quot;&gt;해결 방법&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;함수의 부수효과를 발생시킬 수 없도록 한다.
&lt;ul&gt;
&lt;li&gt;입출력 인수를 허용하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;비지역 변수 참조를 허용하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이 경우 입출력 인수와 비지역 변수 참조가 필요한 경우에 대해 처리할 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;모든 연산자의 피연산자 계산순서를 고정시킨다(Java)
&lt;ul&gt;
&lt;li&gt;장점 : 연산 계산 순서를 정확히 예측할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;단점 : 어떤 컴파일러 최적화는 수행될 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;경우에 따라 함수의 부수효과를 검사한다.
&lt;ul&gt;
&lt;li&gt;함수 호출이 어떤 식에 포함될 경우에는, 해당 함수가 부수효과를 일으키지 않는 경우에만 맞는 것으로 간주한다.(FORTRAN 77)&lt;&#x2F;li&gt;
&lt;li&gt;함수가 부수효과를 발생시키지 않는지 검사하는 것 자체가 힘들기 때문에 어렵다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zero&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a - a;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;이 경우에도 함수가 부수효과를 일으킨다고 판단할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;False positive가 많아 현실적인 문제가 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;hyeong-bbyeohwan&quot;&gt;형 변환&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;아래는 형 변환의 유형이다.
&lt;ul&gt;
&lt;li&gt;축소변환(narrowing conversion) : 원래 타입의 모든 갑을 포함하지 못하는 형으로의 변환&lt;&#x2F;li&gt;
&lt;li&gt;확장변환(widening conversion) : 원래 타입의 모든 값을 포함하는 형으로의 형으로의 변환&lt;&#x2F;li&gt;
&lt;li&gt;묵시적 타입변환(implicit type conversion) : &lt;code&gt;type coercion&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;타입 오류 검출 능력이 저하된다.&lt;&#x2F;li&gt;
&lt;li&gt;대부분의 언어에서 수치 자료의 확장변환에 대해서만 제한적으로 허용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;명시적 타입변환(explicit type conversion) : &lt;code&gt;type casting&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;확장변환, 축소변환 모두 허용한다.&lt;&#x2F;li&gt;
&lt;li&gt;축소변환의 경우 일반적으로 경고 메시지를 발생시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;혼합 자료형 표현식(mixed-mode expression)
&lt;ul&gt;
&lt;li&gt;연산항의 형이 다른 표현식이다.&lt;&#x2F;li&gt;
&lt;li&gt;연산자가 가정하는 형이 결정되어 있으므로, 계산하기 위해서는 어떤 방향으로든 형 변환이 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Virtual Memory Management Strategy(2)</title>
		<published>2023-05-23T00:00:00+00:00</published>
		<updated>2023-05-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/virtual-memory-management-strategy-2/" type="text/html"/>
		<id>https://js970.github.io/virtual-memory-management-strategy-2/</id>
		<content type="html">&lt;h2 id=&quot;thrashing&quot;&gt;Thrashing&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로세스에 충분한 &lt;code&gt;page frame&lt;&#x2F;code&gt;이 할당되지 않으면 &lt;code&gt;page fault rate&lt;&#x2F;code&gt;가 높아지게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page fault&lt;&#x2F;code&gt;가 발생하게 되면 새로운 페이지를 로드하기 위해 기존의 프레임을 backing store에 &lt;code&gt;swap out&lt;&#x2F;code&gt;해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 다시 이 데이터를 필요로 할 경우 또 &lt;code&gt;swapping&lt;&#x2F;code&gt;이 일어나게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 악순환은 CPU utilization을 낮추게 된다. 이에 운영체제는 multiprogramming의 강도를 높여 CPU utilization을 높이려고 시도한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이는 한계가 있다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;thrashing.png&quot; alt=&quot;Thrashing&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;과도한 multiprogramming으로 인해 &lt;code&gt;swapping&lt;&#x2F;code&gt;의 빈도가 오히려 늘어나게 되면서 어떠한 프로세스의 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 급격하게 증가하여 오히려 성능을 하락시크는 요인이 된다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 &lt;code&gt;Thrashing&lt;&#x2F;code&gt;이라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;thrashing-bbanji&quot;&gt;Thrashing 방지&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Thrashing&lt;&#x2F;code&gt;이 일어나는 것을 방지하기 위해서 프로세스는 &lt;strong&gt;충분한&lt;&#x2F;strong&gt; &lt;code&gt;page frame&lt;&#x2F;code&gt;을 확보해야 한다.
&lt;ul&gt;
&lt;li&gt;이때 &amp;quot;충분&amp;quot; 하다는 것은 어떻게 알 수 있을까?&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 실행의 &lt;code&gt;Locality model&lt;&#x2F;code&gt;을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Locality&lt;&#x2F;code&gt;란 함께 실행되는 &lt;code&gt;pages&lt;&#x2F;code&gt;의 집합을 의미한다.
&lt;ul&gt;
&lt;li&gt;함수 호출을 생각하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스는 &lt;code&gt;locality&lt;&#x2F;code&gt;에서 &lt;code&gt;locality&lt;&#x2F;code&gt;로 이동한다고 생각할 수 있다. &lt;&#x2F;li&gt;
&lt;li&gt;즉, 어떤 시점에 필요한 page는 &lt;code&gt;locality&lt;&#x2F;code&gt;를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;또한 &lt;code&gt;locality&lt;&#x2F;code&gt;는 중복될 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Thrashing&lt;&#x2F;code&gt;이 일어나는 궁극적인 원인은 다음과 같이 정리할 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The size of the current locality &amp;gt; The size of allocated frame&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;working-set&quot;&gt;Working Set&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Working-Set&lt;&#x2F;code&gt;이란 &lt;code&gt;locality&lt;&#x2F;code&gt;에 기반한 &lt;code&gt;Thrashing&lt;&#x2F;code&gt;해결 모델이다.
$$\Delta \equiv the\ working\ set\ window$$
&lt;ul&gt;
&lt;li&gt;단위 시간 당 &lt;code&gt;page&lt;&#x2F;code&gt;의 참조 횟수를 의미한다.
$$WS_i \equiv the\ working\ set\ of\ Process\ P_i$$&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 Pi의 &lt;code&gt;working Set&lt;&#x2F;code&gt;을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 시간에 따라 변할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;working set&lt;&#x2F;code&gt;은 interval timer와 reference bit을 이용하여 측정한다.&lt;&#x2F;li&gt;
&lt;li&gt;interval timer의 interrupt마다 reference bit을 set한다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 reference bit을 확인했을 때 1로 set되어 있다면 &lt;code&gt;working set&lt;&#x2F;code&gt;으로 간주한다.
$$WSS_i\equiv the\ size\ of\ WS_i$$&lt;&#x2F;li&gt;
&lt;li&gt;WSi의 크기를 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 델타 값이 너무 작다면 WSSi는 &lt;code&gt;locality&lt;&#x2F;code&gt;를 반영할 수 없을 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 델타 값이 너무 크다면 몇 개의 &lt;code&gt;locality&lt;&#x2F;code&gt;를 합친 상태로 표현할 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;만댝 델타 값이 무한대라면 전체 프로그램을 포함해 버릴 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;WSi값이 시간에 따라 변할 수 있으므로 WSSi값 역시 변할 수 있다.
$$D\equiv the\ total\ demand\ for\ frames = \sum WSS_i$$&lt;&#x2F;li&gt;
&lt;li&gt;D값은 프로세스가 요구하는 &lt;code&gt;page frame&lt;&#x2F;code&gt;의 개수를 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;만약 D &amp;gt; m(Number of frame available)이라면 &lt;code&gt;Thrashing&lt;&#x2F;code&gt;이 발생하게 된다.
&lt;ul&gt;
&lt;li&gt;이때, 프로세스를 suspend하여 &lt;code&gt;Thrashing&lt;&#x2F;code&gt;을 막아야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 &lt;code&gt;working set&lt;&#x2F;code&gt;에서의 &lt;code&gt;page fault rate&lt;&#x2F;code&gt;가 아래와 같은 비율로 측정되면 &lt;code&gt;working set&lt;&#x2F;code&gt;이 적절히 설정되었다고 본다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;pfr.png&quot; alt=&quot;Page Fault Rate&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;2% 정도의 구간에서 빈번하게 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 발생한다. 이를 완전히 없에는 것은 불가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;98% 정도의 구간에서 높지 않은 비율로 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 발생한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pff-page-fault-frequency&quot;&gt;PFF(page-fault frequency)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Working-Set&lt;&#x2F;code&gt;방법보다 훨씬 직관적인 방법이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page fault&lt;&#x2F;code&gt;가 일어나는 비율을 측정하여 이 정도에 따라 프레임 개수를 조절한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;pff.png&quot; alt=&quot;PFF&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;upper bound 이상으로 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 발생하면 프로세스에 할당하는 &lt;code&gt;page frame&lt;&#x2F;code&gt;의 개수를 늘린다.&lt;&#x2F;li&gt;
&lt;li&gt;lower bound 이하로 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 발생하면 프로세스에 할당하는 &lt;code&gt;page frame&lt;&#x2F;code&gt;의 개수를 줄인다.&lt;&#x2F;li&gt;
&lt;li&gt;중간 값일 경우 현 상황을 유지한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;memory-mapped-files&quot;&gt;Memory-Mapped Files&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;disk file을 &lt;code&gt;physical memory&lt;&#x2F;code&gt;에 1 : 1매핑하여 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 &lt;code&gt;MMIO(Memory Mapped IO)&lt;&#x2F;code&gt;라고 한다. 당연히 일반 disk file의 로딩 속도보다 훨씬 빠르다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;mmio.png&quot; alt=&quot;MMIO&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kernel-memory-allocation&quot;&gt;Kernel Memory Allocation&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Kernel memory allocation은 앞서 살펴본 user memory allocation과는 차이가 있다.
&lt;ul&gt;
&lt;li&gt;kernel은 다양한 크기의 자료 구조에 대한 메모리를 요청한다.&lt;&#x2F;li&gt;
&lt;li&gt;어떤 kernel메모리는 contiguous allocation을 요구한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Buddy System&lt;&#x2F;strong&gt;과 &lt;strong&gt;Slab allocation&lt;&#x2F;strong&gt;이 일반적인 구조로 알려져 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;buddy-system&quot;&gt;Buddy System&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;buddySystem.png&quot; alt=&quot;Buddy System&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;물리적으로 연속된 메모리 할당을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;2의 거듭제곱 크기의 메모리를 할당한다.
&lt;ul&gt;
&lt;li&gt;만약 33크기의 메모리 할당이 필요하다면 실제로는 64크기가 할당된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;slab-allocation&quot;&gt;Slab allocation&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;slabAllocation.png&quot; alt=&quot;Slab Allocation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;user memory allocation의 heirarchical memory allocation과 유사하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cache&lt;&#x2F;code&gt;가 &lt;code&gt;slab&lt;&#x2F;code&gt;을 가리키는 형태이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;other-issues&quot;&gt;Other Issues&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page size&lt;&#x2F;code&gt;에 따른 관점들, 정답은 없다. 상황에 따라 적절한 지점을 찾아야 한다.
&lt;ul&gt;
&lt;li&gt;Fragmentation : &lt;code&gt;page&lt;&#x2F;code&gt; 크기가 작을 수록 internal fragmentation이 적을 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;Table size : &lt;code&gt;page table&lt;&#x2F;code&gt;의 크기를 작게 유지하기 위해서는 상대적으로 큰 &lt;code&gt;page&lt;&#x2F;code&gt;를 가져야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x2F;O Overhead : &lt;code&gt;page&lt;&#x2F;code&gt;가 클수록 지연시간이 길어진다.&lt;&#x2F;li&gt;
&lt;li&gt;Locality : &lt;code&gt;page&lt;&#x2F;code&gt;가 작을수록 locality측면에서 좋다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;TLB&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;용량이 클수록 비싸진다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page size&lt;&#x2F;code&gt;가 클수록 fragmentation문제가 많이 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;여러 개의 &lt;code&gt;page size&lt;&#x2F;code&gt;를 관리하기 위해서는 OS가 &lt;code&gt;TLB&lt;&#x2F;code&gt;까지 관리해야 한다.
&lt;ul&gt;
&lt;li&gt;이 결과 OS의 관리 범위가 늘어난다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Virtual Memory Management Strategy(1)</title>
		<published>2023-05-22T00:00:00+00:00</published>
		<updated>2023-05-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/virtual-memory-management-strategy-1/" type="text/html"/>
		<id>https://js970.github.io/virtual-memory-management-strategy-1/</id>
		<content type="html">&lt;h2 id=&quot;virtual-memory-overview&quot;&gt;Virtual Memory overview&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;어떤 프로그램이 실행될 때 그 프로그램 전체가 로딩될 필요는 없다.
&lt;ul&gt;
&lt;li&gt;에러 코드 및 그 처리에 관한 코드는 에러가 발생했을 때 로딩해도 된다.&lt;&#x2F;li&gt;
&lt;li&gt;Array, lists, table등은 실제 필요한 것보다 매우 큰 메모리 할당을 요구한다. (dynamic loading)&lt;&#x2F;li&gt;
&lt;li&gt;프로그램의 option을 포함한 특정 기능들은 잘 사용되지 않거나 거의 사용되지 않을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하드디스크에서 메모리로의 load는 많은 오버헤드가 발생하므로, 당장 필요한 코드만 load해서 사용하면 오베헤드를 줄일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 실행에 있어 프로그램 전체를 로딩하지 않으면 아래와 같은 이점이 있다.
&lt;ul&gt;
&lt;li&gt;더 이상 사용 가능한 physical memory에 제한받지 않는다.
&lt;ul&gt;
&lt;li&gt;physical memory보다 큰 프로그램을 구동 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;한번에 더 많은 프로그램을 동시 실행할 수 있다(timesharing)&lt;&#x2F;li&gt;
&lt;li&gt;load, swap등의 동작에 I&#x2F;O request으로 인한 오버헤드를 줄일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이러한 프로그램 실행은 &lt;code&gt;virtual memory management&lt;&#x2F;code&gt;를 통해 구현 가능하다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;virtualMemory.png&quot; alt=&quot;Virtual Memory Overview&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;virtual memory&lt;&#x2F;code&gt;를 통해 user의 &lt;code&gt;logical memory&lt;&#x2F;code&gt;와 &lt;code&gt;physical memory&lt;&#x2F;code&gt;를 독립적으로 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;virtual memory&lt;&#x2F;code&gt;가 &lt;code&gt;physical memory&lt;&#x2F;code&gt;보다 큰 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;virtual memory&lt;&#x2F;code&gt;에서 memory map을 통해 요구되는 데이터가 &lt;code&gt;physical memory&lt;&#x2F;code&gt;에 존재하지 않는 경우 &lt;code&gt;swapping&lt;&#x2F;code&gt;을 통해 backing store에서 &lt;code&gt;physical memory&lt;&#x2F;code&gt;로 데이터를 가져온다.&lt;&#x2F;li&gt;
&lt;li&gt;뿐만 아니라 여러 프로세스를 Timesharing을 통해 동시 실행할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 전체가 로딩되는 것이 아니므로 I&#x2F;O request총량 역시 적다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이러한 &lt;code&gt;virtual memory management&lt;&#x2F;code&gt;는 아래의 방법으로 구현할 수 있다.
&lt;ul&gt;
&lt;li&gt;Demand paging&lt;&#x2F;li&gt;
&lt;li&gt;Demand segmentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;demand-paging&quot;&gt;Demand Paging&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Demand Paging&lt;&#x2F;code&gt;이란 프로그램에서 필요로 하는 데이터가 필요할 때만 메인 메모리로 load하는 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Demand Paging&lt;&#x2F;code&gt; 을 위해서는 &lt;code&gt;swap-in&lt;&#x2F;code&gt;, &lt;code&gt;swap-out&lt;&#x2F;code&gt;동작을 수행하는 &lt;code&gt;swapper&lt;&#x2F;code&gt;가 필요하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;swapper&lt;&#x2F;code&gt;는 &lt;code&gt;lazy swaper&lt;&#x2F;code&gt;라고도 불린다. 이는 &lt;code&gt;page&lt;&#x2F;code&gt;가 필요할 때까지 &lt;code&gt;swap&lt;&#x2F;code&gt;을 수행하지 않기 때문이다.&lt;&#x2F;li&gt;
&lt;li&gt;메인 메모리에 찾고자 하는 &lt;code&gt;page&lt;&#x2F;code&gt;가 있는지 없는지를 판단하기 위해 &lt;code&gt;MMU&lt;&#x2F;code&gt; 등 하드웨어의 도움을 받기도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;메인 메모리에 찾고자 하는 &lt;code&gt;page&lt;&#x2F;code&gt;가 있으며 &lt;code&gt;legal&lt;&#x2F;code&gt;하다면 이를 사용하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;메인 메모리에 찾고자 하는 &lt;code&gt;page&lt;&#x2F;code&gt;가 없을 경우 이를 &lt;code&gt;page fault&lt;&#x2F;code&gt;라고 한다.
&lt;ul&gt;
&lt;li&gt;단순히 메인 메모리에 &lt;code&gt;page&lt;&#x2F;code&gt;가 없는 경우 &lt;code&gt;swapping&lt;&#x2F;code&gt;을 통해 메모리로 &lt;code&gt;page&lt;&#x2F;code&gt;를 로드한다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 &lt;code&gt;invalid reference&lt;&#x2F;code&gt;의 경우 system call을 통해 abort한다.&lt;&#x2F;li&gt;
&lt;li&gt;machine이 부팅된 직후에는 당연히 모든 &lt;code&gt;page&lt;&#x2F;code&gt;가 메인 메모리에 존재하지 않으므로 not-in memory 상태이다. 이러한 경우 &lt;code&gt;swap-out&lt;&#x2F;code&gt;동작은 별도로 필요하지 않다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page fault&lt;&#x2F;code&gt;가 발생하면 아래의 순서대로 동작한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;demandPaging.png&quot; alt=&quot;Demand Paging&quot; &#x2F;&gt;
&lt;ol&gt;
&lt;li&gt;운영 체제는 &lt;code&gt;invalid reference&lt;&#x2F;code&gt;인지 &lt;code&gt;not-in-memory&lt;&#x2F;code&gt;인지 판단한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;not-in-memory&lt;&#x2F;code&gt;의 경우 Free frame을 찾는다. (&lt;code&gt;invalid reference&lt;&#x2F;code&gt;면 abort한다)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;backing store&lt;&#x2F;code&gt;와 메모 Free frame간의 &lt;code&gt;swapping&lt;&#x2F;code&gt;을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page table&lt;&#x2F;code&gt;의 valid&#x2F;invalid bit을 수정한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page fault&lt;&#x2F;code&gt;를 유발한 명령어를 재수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;위 과정에서 &lt;code&gt;swap-out&lt;&#x2F;code&gt;동작은 생략되었다. &lt;code&gt;physical memory&lt;&#x2F;code&gt;가 Free frame이 아닌 경우 &lt;code&gt;swap-out&lt;&#x2F;code&gt;역시 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;demand paging&lt;&#x2F;code&gt;의 성능은 아래와 같은 세 가지 요소에 의해 결정된다.
&lt;ul&gt;
&lt;li&gt;Service the interrupt&lt;&#x2F;li&gt;
&lt;li&gt;Read the page&lt;&#x2F;li&gt;
&lt;li&gt;Restart the process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page fault rate&lt;&#x2F;code&gt;를 p 라고 하자. p = 0이면 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 발생하지 않는 것이고, 1이면 모든 참조가 fault인 것을 의미한다.
&lt;ul&gt;
&lt;li&gt;이때 EAT(Effective Access Time)는 (1-p) * Memory Access Time + p * Page Fault Service Time&lt;&#x2F;li&gt;
&lt;li&gt;Page Fault Service Time = page fault overhead = swap page out + swap page in + restart overhead&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;virtual memory&lt;&#x2F;code&gt;를 사용하는 중, process가 fork된 상황을 가정해 보자. 이때 실제로 자식 프로세스가 부모 프로세스와 독립된 &lt;code&gt;physical memory&lt;&#x2F;code&gt;를 가지지 않는다.
&lt;ul&gt;
&lt;li&gt;필요한 경우에만 &lt;code&gt;physical memory&lt;&#x2F;code&gt;에 공간을 만드는 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;virtual memory mapping&lt;&#x2F;code&gt;을 통해 같은 &lt;code&gt;physical memory&lt;&#x2F;code&gt;를 공유한다.&lt;&#x2F;li&gt;
&lt;li&gt;두 프로세스 중 R&#x2F;W 동작이 발생하면 그때 &lt;code&gt;physical memory&lt;&#x2F;code&gt;에 새로운 메모리 공간을 할당한다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 &lt;code&gt;Copy-on-Write(COW)&lt;&#x2F;code&gt;라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;page-replacement&quot;&gt;Page Replacement&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;demand paging&lt;&#x2F;code&gt;과정에서 &lt;code&gt;swapping&lt;&#x2F;code&gt;횟수를 줄이는 것은 한계가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 프로세스에 할당되는 &lt;code&gt;frame&lt;&#x2F;code&gt;의 개수를 늘리면 &lt;code&gt;page fault&lt;&#x2F;code&gt;는 줄어들지만 이 역시 한계가 있다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;increaseFrame.png&quot; alt=&quot;Increase Frame&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;결국 &lt;code&gt;physical memory&lt;&#x2F;code&gt;에 존재하는 &lt;code&gt;frame&lt;&#x2F;code&gt;중 &lt;code&gt;victim page&lt;&#x2F;code&gt;를 선택하여 &lt;code&gt;swapping&lt;&#x2F;code&gt;을 해야 한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;victim.png&quot; alt=&quot;victim&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이때 &lt;code&gt;victim page&lt;&#x2F;code&gt;를 선택하는 알고리즘에는 아래와 같은 알고리즘이 있다.
&lt;ul&gt;
&lt;li&gt;FIFO page replacement&lt;&#x2F;li&gt;
&lt;li&gt;Optimal page replacement&lt;&#x2F;li&gt;
&lt;li&gt;LRU page replacement&lt;&#x2F;li&gt;
&lt;li&gt;LRU-Approximation page replacement&lt;&#x2F;li&gt;
&lt;li&gt;Counting-Based page replacement
&lt;ul&gt;
&lt;li&gt;LFU algorithm&lt;&#x2F;li&gt;
&lt;li&gt;MFU algorithm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 알고리즘을 통해 적절한 &lt;code&gt;victim page&lt;&#x2F;code&gt;를 선택하여 &lt;code&gt;page fault&lt;&#x2F;code&gt;를 최소화 하는 것이 최종 목적이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fifo-page-replacement&quot;&gt;FIFO page replacement&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page frame&lt;&#x2F;code&gt;에 load 된 순서대로 교체되는 알고리즘이다.&lt;&#x2F;li&gt;
&lt;li&gt;즉, &lt;code&gt;victim page&lt;&#x2F;code&gt;는 가장 오래된 &lt;code&gt;page&lt;&#x2F;code&gt;가 선택된다.&lt;&#x2F;li&gt;
&lt;li&gt;성능이 좋지 않아서 다른 &lt;code&gt;page replace algorithm&lt;&#x2F;code&gt;에 보조 알고리즘으로 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;무엇보다 프로세스 당 할당되는 프레임의 수를 늘려도 경우에 따라 오히려 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 증가하여 결과에 대해 예측하기 힘들다는 단점이 있다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;fifoGraph.png&quot; alt=&quot;FIFO page replacement graph&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frame&lt;&#x2F;code&gt;을 3개에서 4개로 늘렸을 경우 오히려 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 증가했다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 현상을 &lt;code&gt;Belady&#x27;s abnomaly&lt;&#x2F;code&gt;라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;optimal-page-replacement&quot;&gt;Optimal page replacement&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 이상적인 &lt;code&gt;page replace algorithm&lt;&#x2F;code&gt;이지만 현실적으로 구현할 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;다른 &lt;code&gt;page replace algoritm&lt;&#x2F;code&gt;의 성능을 이 알고리즘과 비교하는 데 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;physical memory&lt;&#x2F;code&gt;에서 가장 나중에 사용될 &lt;code&gt;frame&lt;&#x2F;code&gt;을 &lt;code&gt;victim frame&lt;&#x2F;code&gt;으로 설정한다.
&lt;ul&gt;
&lt;li&gt;가장 나중에 사용될 &lt;code&gt;frame&lt;&#x2F;code&gt;을 판단할 방법이 없다.&lt;&#x2F;li&gt;
&lt;li&gt;이 방법을 사용해도 &lt;code&gt;page fault&lt;&#x2F;code&gt;는 발생한다. 이는 프로세스 당 &lt;code&gt;frame&lt;&#x2F;code&gt;이 제한되어 있기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lru-least-recently-used-algorithm&quot;&gt;LRU(Least recently Used) algorithm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Optimal page replacement&lt;&#x2F;code&gt;에서는 미래에 사용될 &lt;code&gt;frame&lt;&#x2F;code&gt;을 체크했다. &lt;code&gt;LRU algorithm&lt;&#x2F;code&gt;에서는 과거에 사용된 &lt;code&gt;frame&lt;&#x2F;code&gt;중 가장 이전에 참조된 &lt;code&gt;frame&lt;&#x2F;code&gt;을 &lt;code&gt;victim frame&lt;&#x2F;code&gt;으로 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;locality&lt;&#x2F;code&gt;를 고려하였기 때문에, &lt;code&gt;LRU&lt;&#x2F;code&gt;는 &lt;code&gt;Optimal page replacement&lt;&#x2F;code&gt;에 근사한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;&#x2F;code&gt;을 사용하기 때문에 &lt;code&gt;Belady&#x27;s anomaly&lt;&#x2F;code&gt;가 없다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 소프트웨어를 이용한 방식만으로는 구현하기 힘들다. (Requires H&#x2F;W supports)&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;stackIssue.png&quot; alt=&quot;LRU stack issue&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;위 그림에서 확인할 수 있듯이, a지점 이후 7을 참조하게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 7은 스텍의 중간에 위치해 있다. 이를 빼내어 stack.top에 올릴 방법이 없다.&lt;&#x2F;li&gt;
&lt;li&gt;이 과정에서 주소를 참조하는 방식으로 하드웨어의 도움을 받아야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이런 하드웨어는 비싸다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lru-approximation-algorithm&quot;&gt;LRU-Approximation algorithm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use bit&lt;&#x2F;code&gt;을 사용하는 하드웨어의 도움을 받는다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page&lt;&#x2F;code&gt;가 참조될 때마다 &lt;code&gt;use bit&lt;&#x2F;code&gt;의 값을 1로 설정한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;하드웨어는 절대 &lt;code&gt;use bit&lt;&#x2F;code&gt;을 clear하지 않는다. 이는 OS의 역할이다.&lt;&#x2F;li&gt;
&lt;li&gt;LRU-Approximation : Reference Bit
&lt;ul&gt;
&lt;li&gt;각 &lt;code&gt;page&lt;&#x2F;code&gt;마다 8비트의 &lt;code&gt;reference bit&lt;&#x2F;code&gt;을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;reference bit&lt;&#x2F;code&gt;의 초기값은 0으로 초기화된다.&lt;&#x2F;li&gt;
&lt;li&gt;참조된 경우 가장 왼쪽 비트를 1로 갱신한다.&lt;&#x2F;li&gt;
&lt;li&gt;참조되지 않은 경우 right shift한다.&lt;&#x2F;li&gt;
&lt;li&gt;8-time interval동안 페이지의 참조 정보를 알 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;11000100&lt;&#x2F;code&gt;인 페이지는 &lt;code&gt;01110111&lt;&#x2F;code&gt;인 페이지보다 더 최근에 사용된 &lt;code&gt;frame&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;LRU-Approximation : Second-Chance algorithm
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FIFO algorithm&lt;&#x2F;code&gt;에 하드웨어가 제공하는 &lt;code&gt;reference bit&lt;&#x2F;code&gt;이 추가된 circular queue형태이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;secondChance.png&quot; alt=&quot;Second-Change Algorithm&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;위 도식처럼 페이지가 참조될 때 &lt;code&gt;reference bit&lt;&#x2F;code&gt;를 1로 갱신한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;reference bit&lt;&#x2F;code&gt;이 1인 경우 바로 해당 &lt;code&gt;page&lt;&#x2F;code&gt;를 &lt;code&gt;victim frame&lt;&#x2F;code&gt;으로 선정하지 않는다. 이때 &lt;code&gt;reference bit&lt;&#x2F;code&gt; 값은 0으로 갱신한다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 &lt;code&gt;reference bit&lt;&#x2F;code&gt;값이 동일하다면 &lt;code&gt;FIFO algorithm&lt;&#x2F;code&gt;과 동일하게 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;reference bit&lt;&#x2F;code&gt;를 1bit이 아닌 2bit, 3bit으로 제공하여 &lt;code&gt;enhanced second-chance algorithm&lt;&#x2F;code&gt;으로 사용하기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;counting-based-algorithm&quot;&gt;Counting-Based algorithm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;각각의 프레임은 참조가 일어난 횟수를 저장하는 카운터를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;LFU(Least Frequently Used) algorithm은 가장 적은 횟수의 참조가 일어난 프레임을 &lt;code&gt;victim frame&lt;&#x2F;code&gt;으로 선정한다.&lt;&#x2F;li&gt;
&lt;li&gt;MFU(Most Frequently Used) algorithm은 가장 많은 횟수의 참조가 일어난 프레임을 &lt;code&gt;victim frame&lt;&#x2F;code&gt;으로 선정한다.&lt;&#x2F;li&gt;
&lt;li&gt;어떤 알고리즘이든 정답은 없다. 프로그램 및 시스템 상황에 맞는 알고리즘을 선택하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;workload&quot;&gt;Workload&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 &lt;code&gt;page replacement algorithm&lt;&#x2F;code&gt;에 의해 참조의 80%가 20%의 프레임에 대해 일어나고, 나머지 20%의 참조가 80%의 프레임에 대해 일어날 때 효율이 좋은 편이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;hitRatio.png&quot; alt=&quot;Workload Hit Ratio&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;위 그래프는 80-20 Workload에서 각 알고리즘의 성능을 비교한 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;사실 메모리 크기가 충분하다면 알고리즘에 따른 차이는 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;allocation-of-frames&quot;&gt;Allocation of Frames&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;앞서 언급한 내용들은 프로세스 당 할당되는 프레임이 제한되어 있기 때문에 이에 따라 발생하는 swapping의 횟수를 줄이고자 했다. 본 절에서는 프로세스 당 할당되는 프레임의 개수에 대해 다룬다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;각각의 프로세스들은 최소 프레임 개수가 존재한다.
&lt;ul&gt;
&lt;li&gt;이는 컴퓨터 구조에 따라 다르고, 프로세스의 종류에 따라 다르다.&lt;&#x2F;li&gt;
&lt;li&gt;예시로 IBM370의 경우 MOVE 명령어를 수행하는 데 6 page를 필요로 했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이러한 프로세스 별 프레임 할당은 아래와 같은 관점에서 바라볼 수 있다.
&lt;ul&gt;
&lt;li&gt;Fixed allocation vs Priority allocation&lt;&#x2F;li&gt;
&lt;li&gt;Global allocation vs Local allocation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;FIxed allocation&lt;&#x2F;code&gt;에서는 모든 프로세스가 동일한 양의 프레임을 할당받는다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Equal allocation&lt;&#x2F;code&gt; : 100개의 프레임이 있고, 5개의 프로세스가 존재한다면 각각의 프로세스는 20프레임씩 할당받을 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Proportional allocation&lt;&#x2F;code&gt; : 프로세스의 크기에 따라 프레임을 할당하는 방법이다. &lt;code&gt;priority allocation&lt;&#x2F;code&gt;의 일종으로 생각할 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Priority allocation&lt;&#x2F;code&gt;프로세스의 priority에 따라 프레임을 할당받는다.(프로세스의 크기는 고려 x)
&lt;ul&gt;
&lt;li&gt;어떤 프로세스에서 &lt;code&gt;page fault&lt;&#x2F;code&gt;가 발생했다면 그보다 낮은 프로세스의 &lt;code&gt;frame&lt;&#x2F;code&gt;을 가져다 쓴다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Global replacement&lt;&#x2F;code&gt;방식에서는 프레임의 &lt;code&gt;swapping&lt;&#x2F;code&gt;에 있어 프로세스를 따지지 않는다.
&lt;ul&gt;
&lt;li&gt;앞선 &lt;code&gt;Priority allocation&lt;&#x2F;code&gt;을 생각할수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이 경우 프로그램의 수행시간을 예측하기 힘들다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Local replacement&lt;&#x2F;code&gt;의 경우 각각의 프로세스 내에서만 &lt;code&gt;swapping&lt;&#x2F;code&gt;이 일어난다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Global replacement&lt;&#x2F;code&gt;와 비교하여 균일한 수행 시간을 가지게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 underutilized memory가 발생할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Types</title>
		<published>2023-05-16T00:00:00+00:00</published>
		<updated>2023-05-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/types/" type="text/html"/>
		<id>https://js970.github.io/types/</id>
		<content type="html">&lt;h2 id=&quot;concept-of-type&quot;&gt;Concept of Type&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Type은 어떤 프로그래밍 언어의 좋고 나쁨을 가리는 척도가 될 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scalar-ddassu-vs-composite-bbohab&quot;&gt;Scalar(단순) vs Composite(복합)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Scalar&lt;&#x2F;code&gt;타입은 atomic values를 나타낸다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Composite&lt;&#x2F;code&gt;타입은 atomic타입을 unit으로 가지는 타입이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;primitive-gibbo-vs-user-defined-sahyonja-jjeonyi&quot;&gt;Primitive(기본) vs User-defined(사용자 정의)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Primitive&lt;&#x2F;code&gt;타입은 language에서 지원하는 타입이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;User-defined&lt;&#x2F;code&gt;타입은 사용자에 의해 새롭게 정의된 타입이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fundamental-gico-vs-derived-yudo-compound&quot;&gt;Fundamental(기초) vs Derived(유도, Compound)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Fundamental&lt;&#x2F;code&gt;타입은 그 자체로 정의되는 타입이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Derived&lt;&#x2F;code&gt;타입은 &lt;code&gt;Compound&lt;&#x2F;code&gt;타입이라고도 하며, &lt;code&gt;Fundamental&lt;&#x2F;code&gt;타입 또는 &lt;code&gt;Derived&lt;&#x2F;code&gt;타입을 이용하여 정의된다.&lt;&#x2F;li&gt;
&lt;li&gt;integer 변수의 경우 &lt;code&gt;Fundamental&lt;&#x2F;code&gt;타입이다.
&lt;ul&gt;
&lt;li&gt;정수형 변수는 그 자체로 정의된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;포인터 변수의 경우 &lt;code&gt;Compound&lt;&#x2F;code&gt;타입이다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int *&lt;&#x2F;code&gt;는 &lt;code&gt;int&lt;&#x2F;code&gt;라는 &lt;code&gt;Fundamental&lt;&#x2F;code&gt;타입에 의해 정의된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int **&lt;&#x2F;code&gt;는 &lt;code&gt;int *&lt;&#x2F;code&gt;라는 &lt;code&gt;Compound&lt;&#x2F;code&gt;타입에 의해 정의된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;int *a[]&lt;&#x2F;code&gt;는 &lt;code&gt;int *&lt;&#x2F;code&gt;라는 &lt;code&gt;Compund&lt;&#x2F;code&gt;타입에 의해 정의된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Compound&lt;&#x2F;code&gt;타입은 타입 구조가 생성되며, 트리로 표현 가능하다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int *&lt;&#x2F;code&gt;, &lt;code&gt;int **&lt;&#x2F;code&gt;, &lt;code&gt;int *a[]&lt;&#x2F;code&gt;의 트리를 나타내면 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;compoundTree.png&quot; alt=&quot;Compound Tree&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bburyu-yesi&quot;&gt;분류 예시&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;&#x2F;code&gt;타입의 경우 &lt;code&gt;Compound&lt;&#x2F;code&gt;타입이지만 &lt;code&gt;Composite&lt;&#x2F;code&gt;타입은 아니다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum&lt;&#x2F;code&gt;타입 역시 &lt;code&gt;Compound&lt;&#x2F;code&gt;타입이지만 &lt;code&gt;Composite&lt;&#x2F;code&gt;타입은 아니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;primitive-types&quot;&gt;Primitive Types&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Primitive&lt;&#x2F;code&gt;데이터 타입은 다른 타입으로 정의되지 않는 타입을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 하드웨어에 의해 지원된다.(그렇지 않은 경우도 있다.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;integer&quot;&gt;Integer&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;integer&lt;&#x2F;code&gt;타입은 일반적으로 하드웨어를 반영하여 정의된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;integer&lt;&#x2F;code&gt;타입의 크기는 하드웨어의 버스 사이즈를 word로 하여 정의된다.
&lt;ul&gt;
&lt;li&gt;byte, word, long word, quad word등&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 &lt;code&gt;2&#x27;s complement&lt;&#x2F;code&gt;를 사용하여 정수를 표기한다.
&lt;ul&gt;
&lt;li&gt;정수를 표기하는 방법은 크게 &lt;code&gt;Sign-Magnitude&lt;&#x2F;code&gt;, &lt;code&gt;1&#x27;s complement&lt;&#x2F;code&gt;, &lt;code&gt;2&#x27;s complement&lt;&#x2F;code&gt;가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Sign-Magnitude&lt;&#x2F;code&gt;는 부호 비트를 설정하여 표기하는 방법으로, 덧셈 연산에서 직관성이 떨어진다. 또한 0을 표기하는 방법이 2개 존재한다는 문제점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;1&#x27;s complement&lt;&#x2F;code&gt;는 이진수의 1의 보수 형태로 0과 1을 반전시켜 연산하는 방법이다. 덧셈 연산은 직관적이지만 여전히 0을 표기하는 방법이 2개 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2&#x27;s complement&lt;&#x2F;code&gt;는 1의 보수 표기에 1을 더한 값이다. 덧셈 연산은 직관적이며 unique zero를 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2&#x27;s complemtnt&lt;&#x2F;code&gt;가 일반적인 &lt;code&gt;integer&lt;&#x2F;code&gt;타입을 표기하는 방법이라고는 하지만, 항상 그런 것은 아니다. 이는 구현의 영역(언어 설계)이므로 임의로 추측해서는 안된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;floating-point&quot;&gt;Floating Point&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;실수를 의미하지는 않는다. 실수의 근사값을 표기하는 방법이다.&lt;&#x2F;li&gt;
&lt;li&gt;IEEE754표준을 따른다.&lt;&#x2F;li&gt;
&lt;li&gt;1비트의 signed bit, 8(or 11)비트의 exponent(지수부)비트, 23(or 52)비트의 fraction(mentisa, 가수부)비트를 통해 32(or 64)비트 환경에서 실수의 근사값을 표기한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;others&quot;&gt;Others&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Decimal&lt;&#x2F;code&gt; 
&lt;ul&gt;
&lt;li&gt;business application에서 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;10진수 형태로 구성된다.&lt;&#x2F;li&gt;
&lt;li&gt;1282를 표현하기 위해선 한 자리당 4비트가 필요하므로 총 16비트가 필요하다.&lt;&#x2F;li&gt;
&lt;li&gt;제한된 범위 내에서 정확성을 보장한다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 범위가 제한되며, 메모리를 낭비한다는 단점이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Boolean&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;bit로 구현할 수 있지만 보통은 byte로 구성한다.&lt;&#x2F;li&gt;
&lt;li&gt;readability를 상승시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Character&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;ASCII : 7bit를 사용하여 알파벳 계열 문자를 ㅍ현한다.&lt;&#x2F;li&gt;
&lt;li&gt;Unicode : 16bit를 사용하여 international character를 표현할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;character-string&quot;&gt;Character String&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;design-issues&quot;&gt;Design issues&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;배열의 일종으로 볼 수도 있고(C), primitive type으로 볼 수도 있다(C++).
&lt;ul&gt;
&lt;li&gt;c의 경우 String은 Character String이므로, 길이를 구하기 위해 배열을 순회해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;str.length()가 for 문 안에서 사용되었다면 nested loop이므로 O(n)이 아닐 수 있음에 유의&lt;&#x2F;li&gt;
&lt;li&gt;이 때문에 가장 앞 비트에 크기를 저장하는 인코딩을 사용하기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;길이가 가변적인지, 고정적인지 생각해야 한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FORTRAN&lt;&#x2F;code&gt;, &lt;code&gt;Ada&lt;&#x2F;code&gt;, &lt;code&gt;COBOL&lt;&#x2F;code&gt;은 static length를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;C&lt;&#x2F;code&gt;, &lt;code&gt;C++&lt;&#x2F;code&gt;, &lt;code&gt;PL&#x2F;I&lt;&#x2F;code&gt;은 limited dynamic하게 배열의 크기를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SNOBOL4&lt;&#x2F;code&gt;의 경우 dynamic한 배열의 크기를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;static length는 dynamic length방식에 비해 inexpensive하게 사용할 수 있다. 따라서 상황을 고려하여 dynamic length을 지원해야 할 가지가 있는지 생각해 봐야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;string-operations&quot;&gt;String Operations&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;assignment : 대입 연산&lt;&#x2F;li&gt;
&lt;li&gt;comparison : 비교 연산&lt;&#x2F;li&gt;
&lt;li&gt;concatenation : string합치기&lt;&#x2F;li&gt;
&lt;li&gt;sub-string reference : sub-string 참조&lt;&#x2F;li&gt;
&lt;li&gt;pattern matching : 패턴 매칭&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;implementation-of-string&quot;&gt;Implementation of string&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;descriptors.png&quot; alt=&quot;Descriptors&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;static length를 가지도록 구현한다면 compile time descriptor로 충분히 구현 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;limited dynamic length로 구현한다면 run-time descriptor를 필요로 할 수 있다.
&lt;ul&gt;
&lt;li&gt;C언어의 경우 string타입을 위한 run-time descriptor를 가지지는 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;dynamic length로 구현할 결우 run-time descriptor가 필요하다.
&lt;ul&gt;
&lt;li&gt;allocation, deallocation비용이 발생한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;user-defined-ordinal-types&quot;&gt;User-Defined Ordinal Types&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;ordinal-type&quot;&gt;Ordinal Type&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;0또는 양의 정수를 포함하는 범위의 집합&lt;&#x2F;li&gt;
&lt;li&gt;서수(순서)로 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;integer&lt;&#x2F;code&gt;, &lt;code&gt;character&lt;&#x2F;code&gt;, &lt;code&gt;boolean&lt;&#x2F;code&gt;은 Ordinal Type이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cardinal-type&quot;&gt;Cardinal Type&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;기수(값, 양)로 사용된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;user-defined-ordinal-type&quot;&gt;User-Defined Ordinal Type&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Enumeration Type
&lt;ul&gt;
&lt;li&gt;Enum 내부에서 정의된 값을 가지므로 &lt;code&gt;Compound&lt;&#x2F;code&gt;타입이다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 atomic value를 가지므로 &lt;code&gt;Composit&lt;&#x2F;code&gt;타입은 아니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Subrange Type
&lt;ul&gt;
&lt;li&gt;ordinal type이 연속적으로 정렬된 것
&lt;ul&gt;
&lt;li&gt;아래는 Pascal예시이다.&lt;pre data-lang=&quot;Pascal&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Pascal &quot;&gt;&lt;code class=&quot;language-Pascal&quot; data-lang=&quot;Pascal&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type
&lt;&#x2F;span&gt;&lt;span&gt;	index = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;readablilty&lt;&#x2F;code&gt;, &lt;code&gt;reliability&lt;&#x2F;code&gt;의 관점에서 pros가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;realiability&lt;&#x2F;code&gt;의 경우 범위를 초과했을 경우 컴파일 타임의 검사가 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;array&quot;&gt;Array&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Composit&lt;&#x2F;code&gt;타입이다.&lt;&#x2F;li&gt;
&lt;li&gt;indexing을 통해서 원소에 접근한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;design-issues-1&quot;&gt;Design issues&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Subscript Type &amp;amp; range checking
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FORTRAN&lt;&#x2F;code&gt;, &lt;code&gt;C&lt;&#x2F;code&gt;는 integer만 subscript type으로 허용한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pascal&lt;&#x2F;code&gt;, &lt;code&gt;Ada&lt;&#x2F;code&gt;는 어떤 ordinal type이든 허용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The Maximum Number of Subscripts
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C&lt;&#x2F;code&gt;, &lt;code&gt;C++&lt;&#x2F;code&gt; 은 1차원 배열 접근을 지원한다. 즉, A[i][j] 같은 방식으로 다차원 배열을 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;BASIC&lt;&#x2F;code&gt;, &lt;code&gt;FORTRAN&lt;&#x2F;code&gt;의 경우 A[i, j]와 같은 다차원 배열 접근을 지원한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;array-categories&quot;&gt;Array Categories&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Static
&lt;ul&gt;
&lt;li&gt;subscript의 범위 및 storage binding이 static이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;FORTRAN&lt;&#x2F;code&gt;에서 이런 방법을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Fixed Stack-dynamic&lt;&#x2F;li&gt;
&lt;li&gt;Stack-dynamic&lt;&#x2F;li&gt;
&lt;li&gt;Heap-dynamic
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java&lt;&#x2F;code&gt;에서 이런 방법을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;conformant-array&quot;&gt;Conformant Array&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Open Array&lt;&#x2F;code&gt;와 상반되는 개념이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;BASIC&lt;&#x2F;code&gt;, &lt;code&gt;Pascal&lt;&#x2F;code&gt;에서는 index range가 type의 일부였다. 아래의 두 배열은 서로 다른 타입이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Pascal&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Pascal &quot;&gt;&lt;code class=&quot;language-Pascal&quot; data-lang=&quot;Pascal&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;VAR
&lt;&#x2F;span&gt;&lt;span&gt;    MyArray1 : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ARRAY&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;OF&lt;&#x2F;span&gt;&lt;span&gt; INTEGER;
&lt;&#x2F;span&gt;&lt;span&gt;    MyArray2 : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ARRAY&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;OF&lt;&#x2F;span&gt;&lt;span&gt; INTEGER;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;이에 불편함을 느껴 Conformant array의 개념이 등장하였다.
&lt;ul&gt;
&lt;li&gt;아래의 &lt;code&gt;C&lt;&#x2F;code&gt;코드에서 두 배열은 서로 같은 타입이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; MyArray1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; MyArray2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;처음 살펴봤던 &lt;code&gt;Pascal&lt;&#x2F;code&gt;에서도 ISO Standard에 따른 Conformant array를 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;Pascal&lt;&#x2F;code&gt;의 conformant array이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Pascal&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Pascal &quot;&gt;&lt;code class=&quot;language-Pascal&quot; data-lang=&quot;Pascal&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;PROCEDURE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;MyProc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;VAR&lt;&#x2F;span&gt;&lt;span&gt; x : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ARRAY&lt;&#x2F;span&gt;&lt;span&gt; [low..high : INTEGER] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;OF&lt;&#x2F;span&gt;&lt;span&gt; INTEGER);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;open-array&quot;&gt;Open Array&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ISO 표준은 &lt;code&gt;conformant array&lt;&#x2F;code&gt;이지만, 표준이 재정되기 전에 배열의 index range를 전달하기 위한 방법으로 사용되었다.&lt;&#x2F;li&gt;
&lt;li&gt;lower bound 에 대한 정보는 알 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;upper bound에 대한 정보는 High라는 함수를 사용하여 얻을 수 있었다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;C&lt;&#x2F;code&gt;, &lt;code&gt;C++&lt;&#x2F;code&gt;의 배열 역시 open array의 일종으로 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;java&lt;&#x2F;code&gt;의 배열도 유사하나 &lt;code&gt;java&lt;&#x2F;code&gt;의 배열은 객체이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;array-operations&quot;&gt;Array Operations&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;배열 연산자는 배열을 unit으로 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;전체 배열이 연산의 피연산자가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;FORTRAN 90
&lt;ul&gt;
&lt;li&gt;element wise array operations 지원&lt;&#x2F;li&gt;
&lt;li&gt;Intrinsic functions for array operators
&lt;ul&gt;
&lt;li&gt;matrix multiplication&lt;&#x2F;li&gt;
&lt;li&gt;matrix transpose&lt;&#x2F;li&gt;
&lt;li&gt;vector dot product&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;slice
&lt;ul&gt;
&lt;li&gt;row slice, column slice&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Ada
&lt;ul&gt;
&lt;li&gt;single dimension array에서 연속된 원소들에 대한 slice지원&lt;&#x2F;li&gt;
&lt;li&gt;string에 대한 slice(substring reference)지원&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;implementation-of-arrays&quot;&gt;Implementation of Arrays&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Compile Time Descriptor
&lt;ul&gt;
&lt;li&gt;array descriptor를 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;descriptor는 lower bound, upper bound등 배열에 대한 정보를 가진 벡터이다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 &lt;code&gt;dope vecotor&lt;&#x2F;code&gt;라고 부른다. 검사용 벡터라는 뜻이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;첨자(index)를 통해 주소(address)에 접근하는(mapping) access function을 가진다.
&lt;ul&gt;
&lt;li&gt;이때 언어에 따라 row major, column major 구현 방법이 나뉜다.&lt;&#x2F;li&gt;
&lt;li&gt;사실 대부분의 언어는 행우선으로 구현된다. &lt;&#x2F;li&gt;
&lt;li&gt;FORTRAN은 Array를 열우선으로 구현한 대표적인 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;C언어 예시&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] = { {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;					{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;					{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;}};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;C언어는 대표적인 행우선(row major) 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;a[0] = {1, 2, 3}이므로 a[0][0], a[0][1], a[0][2]는 차례대로 1, 2, 3이다.&lt;&#x2F;li&gt;
&lt;li&gt;이처럼 열을 우선적으로 순회한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;열우선의 경우 아래와 같이 구현한다.&lt;pre data-lang=&quot;Fortran&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Fortran &quot;&gt;&lt;code class=&quot;language-Fortran&quot; data-lang=&quot;Fortran&quot;&gt;&lt;span&gt;	location(matrix[i,j])
&lt;&#x2F;span&gt;&lt;span&gt;		= (address of matrix[1, 1]) + ((i-1)*n + (j-1)) * (element size)
&lt;&#x2F;span&gt;&lt;span&gt;			= A + B*i + C*j
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;associative-array&quot;&gt;Associative Array&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터 원소들(elements)의 정렬되지 않은 집합(collection)이다.&lt;&#x2F;li&gt;
&lt;li&gt;데이터 원소들(elements)은 &lt;code&gt;key&lt;&#x2F;code&gt;에 의해 indexing된다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 element와 key는 hashing function을 통해 매핑된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;8482318&#x2F;what-is-a-conformant-array&#x2F;33085128#33085128?newreg=ac58357844b94ad9af567a633c2b1b58&quot;&gt;Stack Overflow - What is a Conformant Array?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;record&quot;&gt;Record&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Array는 homogenous aggregation이며 index를 통해 원소에 접근한다.&lt;&#x2F;li&gt;
&lt;li&gt;반면 Record는 heterogenous aggregation이며 name을 통해 원소에 접근한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;record-operation&quot;&gt;Record Operation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Assignment&lt;&#x2F;li&gt;
&lt;li&gt;Initialization&lt;&#x2F;li&gt;
&lt;li&gt;Comparison&lt;&#x2F;li&gt;
&lt;li&gt;Field Copying&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;union&quot;&gt;Union&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Record의 field들은 서로 다른 위치에 저장되었다.&lt;&#x2F;li&gt;
&lt;li&gt;Union은 field의 크기만큼 최대 메모리에서 할당한다.&lt;&#x2F;li&gt;
&lt;li&gt;Union을 variant record(가변 레코드)로 보기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;design-issues-2&quot;&gt;Design issues&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;type checking을 위해 &lt;code&gt;tag&lt;&#x2F;code&gt;를 사용한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALGOL 68&lt;&#x2F;code&gt;에서는 &lt;code&gt;conformity clauses&lt;&#x2F;code&gt;를 사용했을 때만 reference가 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pascal&lt;&#x2F;code&gt;에서는 &lt;code&gt;tag&lt;&#x2F;code&gt;값 각각에 대한 assign이 가능하다. 이 때문에 type checking에 문제가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ada&lt;&#x2F;code&gt;에서는 Constraint variant record, Unconstrained variant record를 모두 지원한다.
&lt;ul&gt;
&lt;li&gt;Constraint variant record의 경우 variant타입이 바뀔 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;Unconstraint variant record의 경우 Pascal처럼 variant타입이 바뀔 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Union을 Record의 일종으로 보아야 하는지 고려해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pointer&quot;&gt;Pointer&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C&lt;&#x2F;code&gt;에서 처음 포인터 개념을 도입하기 전에도 &lt;code&gt;Pascal&lt;&#x2F;code&gt;, &lt;code&gt;ALGOL&lt;&#x2F;code&gt;에서 포인터 개념은 사용되었다.&lt;&#x2F;li&gt;
&lt;li&gt;포인터는 addressing의 flexibility를 증가시키기 위해 사용되며, 동적 메모리 관리를 담당한다.&lt;&#x2F;li&gt;
&lt;li&gt;function allocation을 포인터를 사용해서 하기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;design-issues-3&quot;&gt;Design Issues&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;포인터 변수의 lifetime&lt;&#x2F;li&gt;
&lt;li&gt;동적 할당된 변수의 lifetime&lt;&#x2F;li&gt;
&lt;li&gt;명시적 포인터(&lt;code&gt;C&lt;&#x2F;code&gt;, &lt;code&gt;C++&lt;&#x2F;code&gt;), 암시적 포인터(&lt;code&gt;Java&lt;&#x2F;code&gt;, &lt;code&gt;C++&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pointer-operations&quot;&gt;Pointer Operations&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;address-of opertaion&lt;&#x2F;li&gt;
&lt;li&gt;assginment(assignment of an address)&lt;&#x2F;li&gt;
&lt;li&gt;dereferencing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pointeoyi-munjejjeo&quot;&gt;포인터의 문제점&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dangling Pointers&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;허상 포인터&lt;&#x2F;li&gt;
&lt;li&gt;존재 자체로 문제이며 위험하다.&lt;&#x2F;li&gt;
&lt;li&gt;메모리 해제 과정의 문제로 발생한다. 이 떄문에 delete가 없는 &lt;code&gt;java&lt;&#x2F;code&gt;에서는 문제가 되지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lost Heap Dynamic variable&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;분실 객체&lt;&#x2F;li&gt;
&lt;li&gt;garbage라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;크게 위험하다기 보다는 메모리 낭비의 원인이 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dangling-pointer-munje-haeggyeo&quot;&gt;Dangling Pointer 문제 해결&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Tombstone 사용
&lt;ul&gt;
&lt;li&gt;포인터가 메모리를 해제하면 Tombstone(비석)이 이 메모리는 죽었다고 표시하여 다른 포인터가 참조하지 못하도록 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Locks-and-Keys
&lt;ul&gt;
&lt;li&gt;모든 포인터는 ordered pair로 존재한다(key, address)&lt;&#x2F;li&gt;
&lt;li&gt;key값이 0이면 invalid이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;두 방법 모두 검사가 필요하므로 성능 면에서 비효율적이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Lua</title>
		<published>2023-05-15T00:00:00+00:00</published>
		<updated>2023-05-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/lua/" type="text/html"/>
		<id>https://js970.github.io/lua/</id>
		<content type="html">&lt;h2 id=&quot;lua-intro&quot;&gt;Lua Intro&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;about-lua&quot;&gt;About Lua&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;단순하고 쉬운 구문을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;Python과 유사하지만 들여쓰기 언어는 아니다.(인덴트 무시해도 됨)&lt;&#x2F;li&gt;
&lt;li&gt;Hybrid implementation 방식으로 구현되어 속도 역시 Python과 비교했을 때 훨씬 빠르다.&lt;&#x2F;li&gt;
&lt;li&gt;동적 타입 언어이며, garbage collection을 통한 자동 메모리 관리 기능이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;ANSI C로 작성되었으며 엔진이 공개되어 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;env-setting&quot;&gt;Env Setting&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.lua.org&#x2F;download.html&quot;&gt;Download Page&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;At Terminal(Mac tested)
&lt;ul&gt;
&lt;li&gt;별도의 환경 변수 설정을 할 필요는 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -R -O&lt;&#x2F;span&gt;&lt;span&gt; http:&#x2F;&#x2F;www.lua.org&#x2F;ftp&#x2F;lua-5.4.4.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tar -zxf&lt;&#x2F;span&gt;&lt;span&gt; lua-5.4.4.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; lua-5.4.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; all test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio에서 작업하는 것을 권장한다. 아래 확장 프로그램을 설치해서 사용한다.
&lt;ul&gt;
&lt;li&gt;Code Runner(필수)&lt;&#x2F;li&gt;
&lt;li&gt;Lua, Lua Debug(Optional)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lua-resources&quot;&gt;Lua Resources&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lua Books
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Programming-Third-Edition-Roberto-Ierusalimschy&#x2F;dp&#x2F;859037985X&quot;&gt;Programming in Lua&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.lua.org&#x2F;pil&#x2F;contents.html&quot;&gt;The first edition is available online&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;0470069171&#x2F;&quot;&gt;Beginning Lua Programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Lua Tutorial
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tylerneylon.com&#x2F;a&#x2F;learn-lua&#x2F;&quot;&gt;Learn Lua in 15 Minutes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ebens.me&#x2F;post&#x2F;lua-for-programmers-part-1&#x2F;&quot;&gt;Lua for Programmers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.w3big.com&#x2F;lua&#x2F;default.html&quot;&gt;w3big.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tutorialspoint.com&#x2F;lua&#x2F;index.htm&quot;&gt;tutorialspoint.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Other Useful Sites
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;lua-users.org&#x2F;&quot;&gt;lua-users.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;lua-users.org&#x2F;wiki&#x2F;LuaShortReference&quot;&gt;Lua Short Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;lua&quot;&gt;Lua&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;data-types&quot;&gt;Data Types&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nil&lt;&#x2F;code&gt; : null과 같은 표현이다. 초기 LISP에서 사용되었던 표현을 계승했다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;boolean&lt;&#x2F;code&gt; : False and True&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;number&lt;&#x2F;code&gt; : 정수, 부동소수점 모두 &lt;code&gt;number&lt;&#x2F;code&gt;타입이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;string&lt;&#x2F;code&gt; : 문자열&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;table&lt;&#x2F;code&gt; : 연관 배열(Python의 dictionary와 유사하다)
&lt;ul&gt;
&lt;li&gt;테이블 원소에 필드 이름을 붙이면 레코드처럼 사용할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;참조할 때는 필드 이름을 문자열로 참조한다. 아래 프로그램은 7을 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pnt &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pnt&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pnt&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Mixed  Table형태로 레코드와 배열을 한 테이블에 사용 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 레코드와 배열의 구분을 위해 &lt;code&gt;;&lt;&#x2F;code&gt;를 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fav &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Lua&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1993&lt;&#x2F;span&gt;&lt;span&gt;}; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dynamic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fast&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;for구문에서 pair함수를 사용하여 테이블의 key를 참조할 수 있다.	
&lt;ul&gt;
&lt;li&gt;pair함수는 테이블의 key, value를 반환하는 반복자다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 프로그램에서는 k만 사용했으므로 value부분이 버려진 상태이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pairs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fav&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;for 구문에서 ipairs함수를 활용하여 테이블의 배열을 표현할 수 있다.
&lt;ul&gt;
&lt;li&gt;ipairs함수는 테이블의 index, value를 반환하는 반복자다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ipairs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fav&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;type()&lt;&#x2F;code&gt;을 이용하여 변수의 타입을 확인 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;operators&quot;&gt;Operators&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;본 절에서는 &lt;code&gt;Lua&lt;&#x2F;code&gt;의 특이한 operator에 대해서만 기술한다.&lt;&#x2F;li&gt;
&lt;li&gt;자세한 정보는 &lt;a href=&quot;http:&#x2F;&#x2F;www.lua.org&#x2F;download.html&quot;&gt;Download Page&lt;&#x2F;a&gt;에서 다운받은 파일을 압축 해제하여 README.md를 읽어보자.&lt;&#x2F;li&gt;
&lt;li&gt;비교 연산자
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~=&lt;&#x2F;code&gt; : 다른 언어에서의 &lt;code&gt;!=&lt;&#x2F;code&gt;표현과 같은 의미이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;산술 연산자
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;&#x2F;code&gt; : 거듭제곱을 연산하는 산술 연산자이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;논리 연산자
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;&#x2F;code&gt;, &lt;code&gt;or&lt;&#x2F;code&gt;, &lt;code&gt;not&lt;&#x2F;code&gt; : 문자 그대로의 의미를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;논리 연산에서는 &lt;code&gt;nil&lt;&#x2F;code&gt;과 &lt;code&gt;false&lt;&#x2F;code&gt;를 모두 &lt;code&gt;거짓&lt;&#x2F;code&gt;으로 판단한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 먼저 위치한 타입을 따른다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드의 첫 번째 문장을 실행하면 &lt;code&gt;nil&lt;&#x2F;code&gt;, 두 번째 문장을 실행하면 &lt;code&gt;false&lt;&#x2F;code&gt;를 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;조건 연산자
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;&#x2F;code&gt;, &lt;code&gt;or&lt;&#x2F;code&gt;를 조합하여 아래와 같이 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 프로그램은 x, y중 더 큰 값을 max에 저장한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;string operators
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;..&lt;&#x2F;code&gt;을 사용하여 string concatenation이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;&#x2F;code&gt;메소드를 사용하여 string을 자를 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드를 실행하면 &amp;quot;he&amp;quot;가 출력된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;대입 연산자
&lt;ul&gt;
&lt;li&gt;다중 대입 연산을 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;필드 개수가 안 맞으면 남는 값은 버린다.&lt;&#x2F;li&gt;
&lt;li&gt;변수의 개수가 더 많은 경우 남는 변수는 &lt;code&gt;nil&lt;&#x2F;code&gt;로 설정된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드의 2행을 실행시킨 결과는 0, 1, &lt;code&gt;nil&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;위 코드의 5행을 실행시킨 결과는 0, 1이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Sharp(#)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lua&lt;&#x2F;code&gt;에서는 크기를 측정할 때 &lt;code&gt;#&lt;&#x2F;code&gt;을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 문자열 크기를 측정하는 예시이다. 출력값은 5이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(#&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HEllo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Modulo Operation
&lt;ul&gt;
&lt;li&gt;원래 Lua에는 modulo연산자가 없었다.&lt;&#x2F;li&gt;
&lt;li&gt;math 라이브러리를 활용해서 math.fmod(17, 5)와 같이 기술하여 구현했다.&lt;&#x2F;li&gt;
&lt;li&gt;또는 몫과 나멎지 사이의 관계를 통해 나머지 연산을 구현하기도 했다.
&lt;ul&gt;
&lt;li&gt;math.fmod(17, 5)와 같은 표현으로 17 - math.floor(17&#x2F;5) * 5를 사용할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 두 방법은 음수에 대한 나머지 연산 시 차이가 있으므로 이를 생각해야 한다.
&lt;ul&gt;
&lt;li&gt;fmod는 좌측 인수의 부호를 따라가지만 floor는 항상 작은 정수를 반환하기 때문에 차이가 생긴다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;현재는 Lua에서 &lt;code&gt;%&lt;&#x2F;code&gt;연산자를 지원하므로 이렇게 구현할 필요는 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;One Line Comment : &lt;code&gt;--&lt;&#x2F;code&gt;를 사용하면 해당 행의 끝까지 주석 처리된다.&lt;&#x2F;li&gt;
&lt;li&gt;Multiline Comment : &lt;code&gt;--[[ statement ]]&lt;&#x2F;code&gt;처럼 사용하면 괄호 쌍 안의 모든 내용이 주석 처리된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;[[ ]]&lt;&#x2F;code&gt;괄호 쌍 안의 문자열은 long string literal로 사용되므로 print등 다른 함수에서도 사용 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scope&quot;&gt;Scope&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 &lt;code&gt;Lua&lt;&#x2F;code&gt;의 모든 변수는 global variable이다.&lt;&#x2F;li&gt;
&lt;li&gt;지역 변수를 사용하려면 키워드 &lt;code&gt;local&lt;&#x2F;code&gt;을 사용해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Lua&lt;&#x2F;code&gt;의 함수 내부에서 함수를 정의할 수 있는데, 이 경우 내부 함수 역시 global function이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;control-structure&quot;&gt;Control Structure&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if-else&lt;&#x2F;code&gt;구문은 아래 코드처럼 마지막에 &lt;code&gt;end&lt;&#x2F;code&gt;키워드를 사용해야 한다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;while&lt;&#x2F;code&gt;, &lt;code&gt;for&lt;&#x2F;code&gt;역시 마지막에 &lt;code&gt;end&lt;&#x2F;code&gt;키워드를 사용해야 한다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;condition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- statement
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- Generic For Loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;structure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- statement
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- structure 자리에는 iterator 가 위치한다.
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- Generic For Loop의 경우 iterator가 모두 순회할 때까지 반복한다.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- Neumeric For Loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- statement
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-- 증분 값을 생략하면 1로 자동 설정된다.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lua&lt;&#x2F;code&gt;에서 함수를 정의할 때는 &lt;code&gt;function&lt;&#x2F;code&gt;키워드를 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;함수가 끝날 때는 &lt;code&gt;end&lt;&#x2F;code&gt;를 사용하여 함수의 선언이 종료되었음을 명시해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;대입과 마찬가지로 부족한 인수는 &lt;code&gt;nil&lt;&#x2F;code&gt;로 전달되며, 남는 인수는 버린다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 함수는 두 값을 더하는 함수 add이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(a, b)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Lua&lt;&#x2F;code&gt;는 Default Argument를 지원하지 않는다. 하지만 조건 연산자를 이용하면 비슷한 역할을 하도록 구현할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 인수가 주어지지 않은 경우(&lt;code&gt;nil&lt;&#x2F;code&gt;인 경우 원하는 기본 인수(0)으로 설정하는 함수이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(a, b)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 팩토리얼을 계산하는 &lt;code&gt;Lua&lt;&#x2F;code&gt;함수이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then 
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이를 tail recursion을 만족하도록 수정하면 다음과 같다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tailFactorial&lt;&#x2F;span&gt;&lt;span&gt;(n, acc)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acc &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acc &lt;&#x2F;span&gt;&lt;span&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acc
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acc &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acc &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tailFactorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acc&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lambda&quot;&gt;Lambda&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;람다 함수&lt;&#x2F;code&gt;란 이름 없는 함수를 뜻한다.&lt;&#x2F;li&gt;
&lt;li&gt;키워드 &lt;code&gt;function&lt;&#x2F;code&gt;다음에 아무 이름 없이 함수를 쓰면 &lt;code&gt;람다 함수&lt;&#x2F;code&gt;가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 덧셈을 수행하는 람다 함수 프로그램이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(a, b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;람다 함수를 사용하면 아래와 같이 지역 함수를 정의할 수 있다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(a, b)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add1 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(b)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;재귀 지역 함수(Recursive Local Function)의 사용에서 주의사항&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;down &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beep!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위와 같이 선언할 경우 down의 값은 &lt;code&gt;nil&lt;&#x2F;code&gt;이므로 위 프로그램은 오류이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래처럼 지역 변수를 먼저 선언한 후 할당하면, 함수 호출 시 선언된 지역 변수 값을 이용하므로 문제가 없다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;down
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;down &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Beep!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;file-input-and-output&quot;&gt;File Input and Output&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;파일을 모드 문자열에 지정된 대로 여는 방법(file open)&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle &lt;&#x2F;span&gt;&lt;span&gt;= io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MODE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;기본 입력 혹은 출력을 handle로 바꾸는 방법(file set)&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;), io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;파일을 닫는 방법&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;input&quot;&gt;Input&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;문자열을 입력받아 반환&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;수를 입력받아 반환&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;한 행을 입력받아 반환&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;파일 내 모든 데이터를 입력받아 반환&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;output&quot;&gt;output&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 출력한다&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;파일의 맨 끝 행에 출력한다. print와 달리 개행문자를 출력하지 않는다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span&gt;io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;closure&quot;&gt;Closure&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;closure.png&quot; alt=&quot;Closure&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;참조 환경과 함수를 묶은 것을 &lt;code&gt;Closure&lt;&#x2F;code&gt;라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;언제든지 함수를 계산할 수 있는 형태이다.&lt;&#x2F;li&gt;
&lt;li&gt;람다 함수는 참조 환경이 없는 클로저라고 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;Lua&lt;&#x2F;code&gt;의 &lt;code&gt;Closure&lt;&#x2F;code&gt;를 정의한 예시이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;newCounter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return function&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 위의 &lt;code&gt;Closure&lt;&#x2F;code&gt; 사용 예시이다.
&lt;ul&gt;
&lt;li&gt;newCounter()가 총 10번 실행된다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 newCounter()의 호출 시마다 내부 참조 환경 i의 값이 바뀌어 매번 다른 값을 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c1 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newCounter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c1&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;iterator&quot;&gt;Iterator&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;어떤 자료 구조의 모든 자료를 훑는 함수를 반복자(iterator)라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Lua&lt;&#x2F;code&gt;의 &lt;code&gt;Closure&lt;&#x2F;code&gt;를 이용하면 반복자를 작성할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;Lua&lt;&#x2F;code&gt;의 반복자 정의 예시이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span&gt;(t)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sz &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return function&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 위 프로그램에서 정의한 반복자를 사용하는 &lt;code&gt;Lua&lt;&#x2F;code&gt;프로그램의 예시이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;coroutine&quot;&gt;Coroutine&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;자신만의 수행 상태를 지니고 있는 함수를 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;이라고 부른다.&lt;&#x2F;li&gt;
&lt;li&gt;이전 상태를 기억한다는 측면에서 과거 인식 함수(history sensitive function)과 유사하다.&lt;&#x2F;li&gt;
&lt;li&gt;자신만의 수행 상태가 유지된다는 측면에서 스레드(Thread)와 유사하다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 병렬 수행은 불가하므로 유사병렬성(quasi-concurrency)을 구현하는데 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Coroutine&lt;&#x2F;code&gt;은 수행 상태를 유지해야 하므로 아래의 상태 중 하나에 놓이게 된다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;중단(suspend)&lt;&#x2F;code&gt; : &lt;code&gt;Coroutine&lt;&#x2F;code&gt;이 생성되었으나 실행되고 있지 않은 상태&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;실행(running)&lt;&#x2F;code&gt; : &lt;code&gt;Coroutine&lt;&#x2F;code&gt;이 실행 중인 상태&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;종료(dead)&lt;&#x2F;code&gt; : &lt;code&gt;Coroutine&lt;&#x2F;code&gt;의 본체가 모두 수행되어 종료된 상태&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Lua&lt;&#x2F;code&gt;에서의 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;은 통상적인 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;과 달리 호출자와 피호출자가 구분되는 asymetric &lt;code&gt;Coroutine&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Coroutine&lt;&#x2F;code&gt;은 상태를 지니고 있다는 점에서 &lt;code&gt;Iterator&lt;&#x2F;code&gt;와 유사한 측면이 있다. 하지만 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;은 &lt;code&gt;Iterator&lt;&#x2F;code&gt;보다 훨씬 다양한 상태에 있을 수 있으므로 훨씬 강력하다.&lt;&#x2F;li&gt;
&lt;li&gt;아래의 코드는 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;을 사용한 &lt;code&gt;Lua&lt;&#x2F;code&gt;프로그램 코드이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cntdown &lt;&#x2F;span&gt;&lt;span&gt;= coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;repeat
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cnt &lt;&#x2F;span&gt;&lt;span&gt;= coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cntdown&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cnt &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;and &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Blast&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cnt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;until &lt;&#x2F;span&gt;&lt;span&gt;coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cntdown&lt;&#x2F;span&gt;&lt;span&gt;) == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dead&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cnt &lt;&#x2F;span&gt;&lt;span&gt;= coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cntdown&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cnt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;coroutine.create&lt;&#x2F;code&gt;를 통해 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;을 생성한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;coroutine.tield&lt;&#x2F;code&gt;를 통해 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;을 실행한다(사실상 return의 역할을 수행한다).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;coroutine.resume&lt;&#x2F;code&gt;을 통해 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;을 재개한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;coroutine.status&lt;&#x2F;code&gt;를 통해 현재 &lt;code&gt;Coroutine&lt;&#x2F;code&gt;의 상태를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pail-ibculryeog-coroutineheu-sahyonhan-yesi-peuroggeraem&quot;&gt;파일 입출력 &amp;amp; Coroutine을 사용한 예시 프로그램&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 프로그램은 1부터 입력받은 수 n까지의 모든 수 중 짝수만을 &lt;code&gt;evens.txt&lt;&#x2F;code&gt;에 write하는 프로그램이다.&lt;pre data-lang=&quot;Lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Lua &quot;&gt;&lt;code class=&quot;language-Lua&quot; data-lang=&quot;Lua&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;producer &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(n)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;consumer &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(p)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle &lt;&#x2F;span&gt;&lt;span&gt;= io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;evens.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;		io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;repeat
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span&gt;= coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;				io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;until &lt;&#x2F;span&gt;&lt;span&gt;coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dead&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;= io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;producer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;consumer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;coroutine.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Memory Management(2)</title>
		<published>2023-05-12T00:00:00+00:00</published>
		<updated>2023-05-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/memory-management-2/" type="text/html"/>
		<id>https://js970.github.io/memory-management-2/</id>
		<content type="html">&lt;h2 id=&quot;memory-allocation-schemes-continuous-memory-allocation&quot;&gt;Memory Allocation Schemes - Continuous Memory Allocation&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MMU&lt;&#x2F;code&gt;에서  &lt;code&gt;limit register&lt;&#x2F;code&gt;, &lt;code&gt;relocation register&lt;&#x2F;code&gt;를 사용하여 프로세스 단위로 메모리 할당.&lt;&#x2F;li&gt;
&lt;li&gt;메모리 상에서 free space(&lt;code&gt;hole&lt;&#x2F;code&gt;)를 탐핵하여 프로세스를 할당한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;partition&lt;&#x2F;code&gt;이 늘어나면 memory management관점에서 multiprogramming이 제한된다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스가 할당되기에 충분한 &lt;code&gt;hole&lt;&#x2F;code&gt;에 프로세스를 할당한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first-fit&lt;&#x2F;code&gt; : 메모리를 탐색해서 할당 가능한 &lt;code&gt;hole&lt;&#x2F;code&gt;이라고 판단되면 바로 할당한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;best-fit&lt;&#x2F;code&gt; : 모든 메모리를 탐색해서 할당 가능한 가장 작은 &lt;code&gt;hole&lt;&#x2F;code&gt;에 할당한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;worst-fit&lt;&#x2F;code&gt; : &lt;code&gt;best-fit&lt;&#x2F;code&gt;과 반대로 할당 가능한 가장 큰 &lt;code&gt;hole&lt;&#x2F;code&gt;에 할당한다(이렇게는 안한다).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hole&lt;&#x2F;code&gt;이 여러 개 생기게 되면서 실제로는 메모리 공간이 남아 있지만 프로세스를 할당할 수 없는 경우를 &lt;code&gt;external fragmentation&lt;&#x2F;code&gt;이라고 한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;worst-fit&lt;&#x2F;code&gt;을 사용하여 프로세스를 할당하지 않는 이유가 외부 단편화가 심하기 때문이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;compaction&lt;&#x2F;code&gt;을 사용하여 외부 단편화를 해결할 수 있다.&lt;code&gt;compaction&lt;&#x2F;code&gt;은 &lt;code&gt;relocation&lt;&#x2F;code&gt;을 통해 메모리 상의 &lt;code&gt;hole&lt;&#x2F;code&gt;을 없에는 것을 의미한다. 이는 소프트웨어적인 방법으로는 불가능하다. 또한 &lt;code&gt;dynamic relocation&lt;&#x2F;code&gt;을 사용하는 경우에만 실현 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;external fragmentation&lt;&#x2F;code&gt;문제를 해결하기 위해 non-continuous한 &lt;code&gt;logical memory&lt;&#x2F;code&gt;주소를 허용하여 &lt;code&gt;physical memory&lt;&#x2F;code&gt;의 어느 곳이든 할당 가능하도록 만드는 방법이 있다. 이렇게 해결하는 방법으로&lt;code&gt;Paging&lt;&#x2F;code&gt;과 &lt;code&gt;Segmentation&lt;&#x2F;code&gt;이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;internal fragmentattion&lt;&#x2F;code&gt;은 메모리가 할당될 때 실제 할당된 메모리보다 살짝 남겨 쓰는 것. int 타입 변수에 short로 충분한 값을 쓰는 행위 등으로 볼 수 있다.
&lt;ul&gt;
&lt;li&gt;이정도는 그냥 감안하고 넘어간다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;memory-allocation-schemes-paging&quot;&gt;Memory Allocation Schemes - Paging&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;paging-overview&quot;&gt;Paging Overview&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;paging.png&quot; alt=&quot;Paging Overview&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page&lt;&#x2F;code&gt;와 &lt;code&gt;page frame&lt;&#x2F;code&gt;은 같은 크기를 가지는 단위이다. &lt;code&gt;page&lt;&#x2F;code&gt;는 &lt;code&gt;virtual memory&lt;&#x2F;code&gt;에 존재하고, &lt;code&gt;page frame&lt;&#x2F;code&gt;은 &lt;code&gt;physical memory&lt;&#x2F;code&gt;에 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;한 프로세스 내에서 &lt;code&gt;page&lt;&#x2F;code&gt;는 &lt;code&gt;page table&lt;&#x2F;code&gt;을 통해 &lt;code&gt;physical memory&lt;&#x2F;code&gt;로 1:1 매핑된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pageing&lt;&#x2F;code&gt;을 통해 궁극적으로 non-continuous한 프로세스의 메모리 할당이 가능하다.
&lt;ul&gt;
&lt;li&gt;이로 인해 &lt;code&gt;external fragmentation&lt;&#x2F;code&gt;을 줄일 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;internal fragmentation&lt;&#x2F;code&gt;에 대해서는 근본적인 해결이 되지는 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로세스를 매핑하기 위해서는 &lt;code&gt;page table&lt;&#x2F;code&gt;역시 메모리에 load되어야 한다. 이 역시 오버헤드로 작용한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page table&lt;&#x2F;code&gt;의 관리를 위해 &lt;code&gt;TLB&lt;&#x2F;code&gt;라는 하드웨어를 사용하기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;address-translation-scheme&quot;&gt;Address Translation Scheme&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Page number&lt;&#x2F;code&gt; : 페이지 테이블의 index로 사용되며, 각각의 &lt;code&gt;page&lt;&#x2F;code&gt;가  &lt;code&gt;physical memory&lt;&#x2F;code&gt;로 매핑될 때의&lt;code&gt;base address&lt;&#x2F;code&gt;를 포함한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Page offset&lt;&#x2F;code&gt; : &lt;code&gt;base address&lt;&#x2F;code&gt;주소와 합쳐져서 &lt;code&gt;physical memory&lt;&#x2F;code&gt;의 주소를 도출하는 데 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;m비트의 &lt;code&gt;logical address space&lt;&#x2F;code&gt;를 가지고 &lt;code&gt;page size&lt;&#x2F;code&gt;가 n비트라면 아래와 같은 구조를 가진다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;addressTranslationScheme.png&quot; alt=&quot;Address Translation Scheme&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;32byte의 메모리에 &lt;code&gt;page entry size&lt;&#x2F;code&gt;가 4 byte인 경우 &lt;code&gt;page table&lt;&#x2F;code&gt;에 의해 아래와 같이 할당된다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;pagingScheme.png&quot; alt=&quot;Paging Scheme&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;internal fragmentation&lt;&#x2F;code&gt;에 대해 계산해 보자.
&lt;ul&gt;
&lt;li&gt;page size = 2048 bytes&lt;&#x2F;li&gt;
&lt;li&gt;process size = 72766 bytes&lt;&#x2F;li&gt;
&lt;li&gt;이 경우 72766 &#x2F; 2048 = 35 * 2048 + 1086 이므로 마지막 frame에는 1086 byte만 할당된다.&lt;&#x2F;li&gt;
&lt;li&gt;frame size = 2048 bytes 이므로 총 2048 - 1086 = 962 bytes의 &lt;code&gt;internal fragmentation&lt;&#x2F;code&gt;이 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;최악의 경우 1바이트 초과로 인한 internal fragmentation이 발생할 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;internal fragmentation&lt;&#x2F;code&gt;을 줄이기 위해 &lt;code&gt;page size&lt;&#x2F;code&gt;를 작게 만드는 것은 한계가 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page size&lt;&#x2F;code&gt;를 작게 하면 &lt;code&gt;page table&lt;&#x2F;code&gt;의 크기가 커지는데, 이 또한 메인 메모리에 적재되기 때문이다.&lt;&#x2F;li&gt;
&lt;li&gt;그래서 일부 운영체제에서는 두 개의 &lt;code&gt;page size&lt;&#x2F;code&gt;를 설정하여 상황에 맞게 선택하여 사용하기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;free-frames&quot;&gt;Free frames&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;page 할당을 위해서는 non-continuous하게 할당된 메모리 공간에서 scatter되어 있는 free frame을 찾아야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 처리하기 위해 &lt;code&gt;free-frame list&lt;&#x2F;code&gt;를 도입한다. 이는 linked list등의 자료 구조를 이용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;page-tableyi-guhyeon&quot;&gt;Page Table의 구현&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page table&lt;&#x2F;code&gt;은 메인 메모리에 계속 적재되어 있어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page table&lt;&#x2F;code&gt;은 &lt;code&gt;PTBR&lt;&#x2F;code&gt;(Page table base register), &lt;code&gt;PTLR&lt;&#x2F;code&gt;(Page table length register)를 사용하여 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 구조 상에서 &lt;code&gt;page table&lt;&#x2F;code&gt;을 참조하기 위한 메인 메모리 접근, 데이터&#x2F;명령어 전달을 위한 메인 메모리 접근이 각각 일어난다.
&lt;ul&gt;
&lt;li&gt;두 번의 메인 메모리 참조는 많은 오버헤드이다. 따라서 &lt;code&gt;TLB(Translation Look-aside Buffer)&lt;&#x2F;code&gt;라는 하드웨어의 도움을 받아 &lt;code&gt;page table&lt;&#x2F;code&gt;을 구현한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 &lt;code&gt;TLB&lt;&#x2F;code&gt;가 포함된 &lt;code&gt;page table&lt;&#x2F;code&gt;을 활용한 메모리 활당 과정이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;tlb.png&quot; alt=&quot;TLB&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TLB&lt;&#x2F;code&gt; lookup에 사용되는 시간을 $\varepsilon$ 이라고 하자.&lt;&#x2F;li&gt;
&lt;li&gt;메인 메모리 참조에 걸리는 시간은 1 time unit이라고 하자.&lt;&#x2F;li&gt;
&lt;li&gt;이때 Hit ratio를 $\alpha$ 라고 하면 아래와 같이 Effective Access Time(EAT)을 구할 수 있다.
&lt;ul&gt;
&lt;li&gt;EAT = (1+$\varepsilon$)$\alpha$ + (2+$\varepsilon$)(1-$\alpha$) = 2 + $\varepsilon$ - $\alpha$&lt;&#x2F;li&gt;
&lt;li&gt;위 공식을 이용하여 상황에 맞는 메모리 참조 시간을 구할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shared-code&quot;&gt;Shared Code&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 그림의 경우 프로세스 P1, P2, P3가 각각 ed1, ed2, ed3 페이지를 공유하는 상황이다. 이 경우 &lt;code&gt;physical memory&lt;&#x2F;code&gt;에 별도의 공간을 각각 확보하는 것은 낭비이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;sharedCode.png&quot; alt=&quot;Shared Code&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;운영 체제는 이렇게 &lt;code&gt;page table&lt;&#x2F;code&gt;을 이용하여 메모리 할당 시 프로세스 간 &lt;code&gt;page&lt;&#x2F;code&gt;를 공유하는 기능을 제공한다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 기능의 구현을 위해 아래 그림과 같은 &lt;code&gt;vaild-invalid bit&lt;&#x2F;code&gt;을 사용한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;validInvalid.png&quot; alt=&quot;Valid - Invalid bit&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;page-table-hierarchical-paging&quot;&gt;Page Table - Hierarchical paging&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;지금까지 살펴본 page table의 구조는 single-level page table이다. 앞서 살펴본 것처럼 page table이 커지면 메인 메모리의 많은 부분이 page table에 할당되어 오버헤드가 발생한다. 이를 해결하기 위한 page table의 구조로 hierarchical paging, hashed page tables, inverted page tables가 있다. 본 절에서는 이 중 hierarchical paging에 대해서 다룬다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page table&lt;&#x2F;code&gt;을 다단계로 나눈 구조이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;hierarchical.png&quot; alt=&quot;Hierarchical paging&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;outer page table&lt;&#x2F;code&gt;을 이용하여&lt;code&gt;page table&lt;&#x2F;code&gt;을 non-continuous하게 할당할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;실제로 모든 &lt;code&gt;page table&lt;&#x2F;code&gt;을 사용하게 된다면 &lt;code&gt;outer page table&lt;&#x2F;code&gt;이 추가로 메인 메모리에 올라가므로 손해일 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 대부분의 경우 &lt;code&gt;page table&lt;&#x2F;code&gt;의 모든 공간을 사용하지 않는 경우가 더 많다.&lt;&#x2F;li&gt;
&lt;li&gt;또한 &lt;code&gt;page table&lt;&#x2F;code&gt;자체의 크기가 일반적으로 너무 커서 이것이 메인 메모리에 전부 올라가는 것 자체가 굉장한 오버헤드이다.&lt;&#x2F;li&gt;
&lt;li&gt;Hierarchical paging에서는  &lt;code&gt;outer page table&lt;&#x2F;code&gt;을 이용하여 메인 메모리에 올라가는 &lt;code&gt;page table&lt;&#x2F;code&gt;의 크기를 유동적으로 설정하는 구조를 채택했다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 32bit machine에서 page size가 4K일때 2-level page table의 scheme이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;twoScheme.png&quot; alt=&quot;Two Level Scheme&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;2-level뿐만 아니라 3-level로 hierarchical page table을 구성하기도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 64비트 machine에서는 hierarchical page table방식으로도 너무 큰 &lt;code&gt;page table&lt;&#x2F;code&gt;을 가진다.
&lt;ul&gt;
&lt;li&gt;64비트 machine에서는 &lt;code&gt;page size&lt;&#x2F;code&gt;가 3G라고 해도 이미 &lt;code&gt;page table&lt;&#x2F;code&gt;의 크기가 4G이다.&lt;&#x2F;li&gt;
&lt;li&gt;hierarchical paging은 32비트 machine을 대상으로 한 설계에 사용된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;page-table-hashed-page-table&quot;&gt;Page Table - Hashed Page Table&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;virtual page number&lt;&#x2F;code&gt;가 해시 함수를 통해 &lt;code&gt;page frame&lt;&#x2F;code&gt;으로 hashed된다.&lt;&#x2F;li&gt;
&lt;li&gt;해시 함수는 고정 길이를 가지기 때문에 &lt;code&gt;page&lt;&#x2F;code&gt;의 크기가 작아져도 table의 크기는 일정하다.&lt;&#x2F;li&gt;
&lt;li&gt;같은 해시 값을 가질 경우 linked list를 통해 element를 보관한다.
&lt;ul&gt;
&lt;li&gt;linked list에 저장되는 값은 &lt;code&gt;virtual page number&lt;&#x2F;code&gt;, &lt;code&gt;frame number&lt;&#x2F;code&gt;, &lt;code&gt;next pointer&lt;&#x2F;code&gt;가 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;해시 값의 linked list를 탐색하여 &lt;code&gt;virtual page number&lt;&#x2F;code&gt;와 일치되는 값일 경우 해당되는 &lt;code&gt;physical frame&lt;&#x2F;code&gt;이 추출된다.&lt;&#x2F;li&gt;
&lt;li&gt;결과적으로 테이블의 크기가 커지는 것을 해시 함수와 리스트(linked list)를 이용하여 해결했다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;hashed page table&lt;&#x2F;code&gt;을 그림으로 나타낸 것이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;hashPaging.png&quot; alt=&quot;Hashed Page Table&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;page-table-inverted-page-table&quot;&gt;Page Table - Inverted Page Table&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;One entry for each frame(real page of memory)&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이전까지 다룬 구조에서는 프로세스 별 &lt;code&gt;page&lt;&#x2F;code&gt;를 &lt;code&gt;logical address&lt;&#x2F;code&gt;로 매핑했다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Inverted Page Table&lt;&#x2F;code&gt;은 &lt;code&gt;page table&lt;&#x2F;code&gt;이 &lt;code&gt;physical memory&lt;&#x2F;code&gt;와 같은 크기를 가지며, &lt;code&gt;logical address&lt;&#x2F;code&gt;를 생성할 때 PID값을 고려하여 생성한다.&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 &lt;code&gt;logical address&lt;&#x2F;code&gt;는 무제한이며, 실제 &lt;code&gt;physical memory&lt;&#x2F;code&gt;보다 큰 &lt;code&gt;logical address&lt;&#x2F;code&gt;공간을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Inverted Page Table&lt;&#x2F;code&gt;구조는 충분한 &lt;code&gt;physical memory&lt;&#x2F;code&gt;가 확보된 경우 사용할 수 있는 구조이다. &lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;logical memory address&lt;&#x2F;code&gt;를 해석하는 작업이 없으므로 search time이 비약적으로 상승한다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;Inverted Page Table&lt;&#x2F;code&gt;의 구조이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;invertedPaging.png&quot; alt=&quot;Inverted Page Table&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;memory-allocation-schemes-segmentation&quot;&gt;Memory Allocation Schemes - Segmentation&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;user view 에서의 memory management이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page&lt;&#x2F;code&gt;는 system view에서 memory를 &lt;code&gt;fixed size&lt;&#x2F;code&gt;로 관리했다.&lt;&#x2F;li&gt;
&lt;li&gt;사실상 &lt;code&gt;page&lt;&#x2F;code&gt;가 아닌 사용자에게 익숙한 자료 구조(procedure, function, method, ...)단위로 메모리를 할당한다는 점 이외에 &lt;code&gt;Page&lt;&#x2F;code&gt;를 기반으로 메모리 할당을 하는 방식과 차이가 없다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PTBR&lt;&#x2F;code&gt;, &lt;code&gt;PTLR&lt;&#x2F;code&gt;대신에 &lt;code&gt;STBR&lt;&#x2F;code&gt;, &lt;code&gt;STLR&lt;&#x2F;code&gt;을 사용하여 base, limit값을 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;이름만 다를 뿐 같은 역할을 하는 레지스터들이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Segmentation을 통한 메모리 할당 도식이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;segment.png&quot; alt=&quot;Segment&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Type Binding, Storage Binding, Scope</title>
		<published>2023-05-12T00:00:00+00:00</published>
		<updated>2023-05-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/type-binding-storage-binding-scope/" type="text/html"/>
		<id>https://js970.github.io/type-binding-storage-binding-scope/</id>
		<content type="html">&lt;h2 id=&quot;type-binding-storage-binding-scope&quot;&gt;Type Binding, Storage Binding, Scope&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;type&quot;&gt;Type&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type&lt;&#x2F;code&gt;은 &lt;code&gt;Value Set&lt;&#x2F;code&gt; + &lt;code&gt;Operation Set&lt;&#x2F;code&gt; 으로 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Value Set&lt;&#x2F;code&gt; : 가질 수 있는 값의 집합&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Operation Set&lt;&#x2F;code&gt; : 해당 타입의 값들에 대해 적용 가능한 연산자의 집합&lt;&#x2F;li&gt;
&lt;li&gt;예를 들어 C&#x2F;C++에서 &lt;code&gt;char&lt;&#x2F;code&gt;타입의 경우 아래와 같은 &lt;code&gt;Value Set&lt;&#x2F;code&gt;, &lt;code&gt;Operation Set&lt;&#x2F;code&gt;을 가진다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Value Set&lt;&#x2F;code&gt; : 8비트 범위의 이진수&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Operator Set&lt;&#x2F;code&gt; : 단항 -, +, 이항 -, +, *, &#x2F;, 등의 연산자를 지원한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;type-binding&quot;&gt;Type Binding&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;타입 바인딩을 두 가지 기준으로 구분해 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;어떻게 타입이 식별되는가 : &lt;code&gt;명시적(explicit)&lt;&#x2F;code&gt;, &lt;code&gt;암묵적(implicit&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;바인딩이 일어나는 시점은 언제인가 : &lt;code&gt;정적(static)&lt;&#x2F;code&gt;, &lt;code&gt;동적(dynamic)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이러한 기준에 의해 언어를 간단히 분류해 보면 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;typeBinding.png&quot; alt=&quot;Type Binding&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;동적 바인딩 된 경우에는 오류 검사가 힘들다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;타입 바인딩은 변수보다 명칭(function name, class name)에 대한 바인딩을 생각하는 경우가 많다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 동적 바인딩에서 변수에 대한 타입 바인딩이 실행 시간에 결정될 수 있다는 점에 차이가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;static-typing&quot;&gt;Static Typing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 translation time에 타입이 결정된다.&lt;&#x2F;li&gt;
&lt;li&gt;타입은 명시적으로 선얼될 수도, 암시적으로 선언될 수도 있다.
&lt;ul&gt;
&lt;li&gt;타입의 명시적 선언 예시로는 C언어의 명시적 타입 선언이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;타입의 암시적 선언 예시로는 BASIC의 &lt;code&gt;$&lt;&#x2F;code&gt;를 이용한 문자열 변수 암시적 선언이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이러한 방식을 가질 경우 &lt;code&gt;정적 타입 언어(statically typed language&lt;&#x2F;code&gt;라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-typing&quot;&gt;Dynamic Typing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;타입은 assignment연산을 통해 결정된다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 동적 타입 언어 APL의 예시이다.&lt;pre data-lang=&quot;APL&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-APL &quot;&gt;&lt;code class=&quot;language-APL&quot; data-lang=&quot;APL&quot;&gt;&lt;span&gt;LIST &amp;lt;- 2 4 6 8
&lt;&#x2F;span&gt;&lt;span&gt;LIST &amp;lt;- 10.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;1행에서의 LIST는 정수 배열이다.&lt;&#x2F;li&gt;
&lt;li&gt;2행에서의 LIST는 부동 소수점 변수이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;동적 타입 바인딩의 단점
&lt;ul&gt;
&lt;li&gt;형 검사(type check)가 힘들다.&lt;&#x2F;li&gt;
&lt;li&gt;실행 시간 중 오류가 발생할 확률이 비교적 높다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;동적 타입 바인딩의 장점
&lt;ul&gt;
&lt;li&gt;범용 프로그래밍(generic programming)등 유연성이 높은 프로그래밍이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;type-inference-taib-curon&quot;&gt;Type Inference(타입 추론)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;정적으로 바인딩 되었다고 하더라도 아래의 경우와 같이 타입 정의가 생략될 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;ML&lt;pre data-lang=&quot;ML&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ML &quot;&gt;&lt;code class=&quot;language-ML&quot; data-lang=&quot;ML&quot;&gt;&lt;span&gt;fun times10(x) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;* x;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;time10의 반환값은 정수형으로 &lt;code&gt;inference&lt;&#x2F;code&gt;된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Java(Java7 ~)&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 경우 생성자로 사용되는 ArrayList의 타입은 Java에서 &lt;code&gt;inference&lt;&#x2F;code&gt;하여 &lt;code&gt;Integer&lt;&#x2F;code&gt;로 설정된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;C++(C++11 ~)&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span&gt;string s &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HELLO&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; c: s)
&lt;&#x2F;span&gt;&lt;span&gt;	cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;변수 &lt;code&gt;c&lt;&#x2F;code&gt;의 타입은 &lt;code&gt;s&lt;&#x2F;code&gt;에 의해 &lt;code&gt;char&lt;&#x2F;code&gt;로 &lt;code&gt;inference&lt;&#x2F;code&gt;된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;storage-binding&quot;&gt;Storage Binding&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Allocation&lt;&#x2F;code&gt; : 사용 가능한 메모리로부터 &lt;code&gt;memory cell&lt;&#x2F;code&gt;을 가져오는 것&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Deallocation&lt;&#x2F;code&gt; : 할당된 &lt;code&gt;memory cell&lt;&#x2F;code&gt;을 사용 가능한 메모리에서 제거하는 것&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Lifetime of a variable&lt;&#x2F;code&gt; : 변수가 &lt;code&gt;memory cell&lt;&#x2F;code&gt;에 존재하는 시간&lt;&#x2F;li&gt;
&lt;li&gt;일반적인 실행 시간의 메모리 구조는 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;storageBinding.png&quot; alt=&quot;Storage Binding&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;static-variables&quot;&gt;Static Variables&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;정적 변수는 실행 시간 이전에 &lt;code&gt;memoy cell&lt;&#x2F;code&gt;이 바인딩된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;storage binding&lt;&#x2F;code&gt;이 실행 시간 중 변경되지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;대표적으로 C, C++, Java에서 &lt;code&gt;static&lt;&#x2F;code&gt;키워드를 사용하여 선언한 변수가 &lt;code&gt;static variable&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;static variable&lt;&#x2F;code&gt;을 사용하여 서브프로그램을 &lt;code&gt;history sensitive&lt;&#x2F;code&gt;하게 구현할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;로컬 변수를 사용한 재귀가 불가능하다는 단점이 있다.(old FORTRAN)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scope&quot;&gt;Scope&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;변수의 &lt;code&gt;scope&lt;&#x2F;code&gt;는 변수가 &lt;code&gt;visible&lt;&#x2F;code&gt;한 &lt;code&gt;statement&lt;&#x2F;code&gt;의 범위를 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;statement&lt;&#x2F;code&gt;에서 변수가 참조될 수 있다면 변수는 &lt;code&gt;visible&lt;&#x2F;code&gt;하다고 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램에서 &lt;code&gt;non-local variable&lt;&#x2F;code&gt;이란 &lt;code&gt;visible&lt;&#x2F;code&gt;하지만 그곳에 선언되지 않은 변수를 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어에서 &lt;code&gt;Scope Rule&lt;&#x2F;code&gt;이란 변수 선언과 참조 사이의 관계를 정의한 것이다.
&lt;ul&gt;
&lt;li&gt;특히 &lt;code&gt;non-local variable&lt;&#x2F;code&gt;에서 중요하게 다뤄진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;block&quot;&gt;Block&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;local variable&lt;&#x2F;code&gt;을 선언할 수 있는 코드 영역이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Block&lt;&#x2F;code&gt;단위로 &lt;code&gt;storage allocation&lt;&#x2F;code&gt;된다.&lt;&#x2F;li&gt;
&lt;li&gt;여러 &lt;code&gt;Block&lt;&#x2F;code&gt;이 섞여서 프로그램을 구성하는 프로그래밍 언어를 &lt;code&gt;Block-Structured Language&lt;&#x2F;code&gt;라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;서브프로그램을 구성하지 않는 &lt;code&gt;Block&lt;&#x2F;code&gt;을 &lt;code&gt;Nonprocedural Block&lt;&#x2F;code&gt;이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Nonprocedural Block&lt;&#x2F;code&gt;예시이다.&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;declare TEMP: integer;
&lt;&#x2F;span&gt;&lt;span&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;	TEMP := FIRST;
&lt;&#x2F;span&gt;&lt;span&gt;	FIRST := SECOND;
&lt;&#x2F;span&gt;&lt;span&gt;	SECOND := THIRD;
&lt;&#x2F;span&gt;&lt;span&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Pascal, Modula-2는 &lt;code&gt;Nonprocedural Block&lt;&#x2F;code&gt;을 지원하지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;static-scope&quot;&gt;Static Scope&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;변수들이 실행 시간 이전에 정적으로 결정되는 &lt;code&gt;Scope&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 텍스트에 기반한다.&lt;&#x2F;li&gt;
&lt;li&gt;자신으로 부터 가장 가까운 scope의 변수를 사용한다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 프로그램의 add1에서는 해당 &lt;code&gt;scope&lt;&#x2F;code&gt;에서 가장 가까운 형식 매개변수인 10을 참조하여 11을 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;위 프로그램에서 처럼 지역 변수에 의해 비지역 변수가 사용할 수 없는 지점을 &lt;code&gt;Scope Hole&lt;&#x2F;code&gt;이라 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Static Ancestor&lt;&#x2F;code&gt; : 상위의 모든 &lt;code&gt;Scope&lt;&#x2F;code&gt;를 지칭한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Static Parent&lt;&#x2F;code&gt; : 바로 상위의 &lt;code&gt;Scope&lt;&#x2F;code&gt;를 지칭한다.&lt;&#x2F;li&gt;
&lt;li&gt;Ada, C++등 특정 언어에서는 &lt;code&gt;Scope Hole&lt;&#x2F;code&gt;에서 가려진 변수를 접근할 수 있는 방법을 제공한다.
&lt;ul&gt;
&lt;li&gt;Ada에서 x가 hidden variable인 경우 접근하는 방법&lt;pre data-lang=&quot;Ada&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Ada &quot;&gt;&lt;code class=&quot;language-Ada&quot; data-lang=&quot;Ada&quot;&gt;&lt;span&gt;big.x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;C++에서 x가 hidden variable인 경우 접근하는 방법&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span&gt;::x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;static-scope-example&quot;&gt;Static Scope Example&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;program main;
&lt;&#x2F;span&gt;&lt;span&gt;	procedure A;
&lt;&#x2F;span&gt;&lt;span&gt;		procedure C;
&lt;&#x2F;span&gt;&lt;span&gt;			begin ... end;
&lt;&#x2F;span&gt;&lt;span&gt;		procedure D;
&lt;&#x2F;span&gt;&lt;span&gt;			begin ... end;
&lt;&#x2F;span&gt;&lt;span&gt;		begin {A}
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;span&gt;		end;  {A}
&lt;&#x2F;span&gt;&lt;span&gt;	procedure B;
&lt;&#x2F;span&gt;&lt;span&gt;		procedure E;
&lt;&#x2F;span&gt;&lt;span&gt;			begin ... end;
&lt;&#x2F;span&gt;&lt;span&gt;		begin {B}
&lt;&#x2F;span&gt;&lt;span&gt;		...
&lt;&#x2F;span&gt;&lt;span&gt;		end;  {B}
&lt;&#x2F;span&gt;&lt;span&gt;	begin {main}
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;span&gt;	end.  {main}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 프로그램에서 호출 가능성을 그래프로 나타내면 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;callGraph.png&quot; alt=&quot;Call Graph&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;main에서는 재귀 호출이 불가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;A, B, C, D, E는 서브프로그램이므로 재귀 호출이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;B, D는 각각 A, C이후에 선언된 서브프로그램이므로 A, C에 접근할 수 있지만 그 역은 불가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-scope&quot;&gt;Dynamic Scope&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Scope&lt;&#x2F;code&gt;는 서브프로그램의 호출 순서에 따라 결정된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Static Scope&lt;&#x2F;code&gt;는 공간에 의한 관계를 가지지만, &lt;code&gt;Dynamic Scope&lt;&#x2F;code&gt;는 일시적인 관계를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;LISP에서 나온 개념이며 일반적으로 사용되지는 않는다.
&lt;ul&gt;
&lt;li&gt;MaCarthy본인도 잘못 설계했음을 시인했다...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;evaluations-of-scoping-rules&quot;&gt;Evaluations of Scoping Rules&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Static Scope 장점
&lt;ul&gt;
&lt;li&gt;Static type checking이 가능하므로 reliable하다.&lt;&#x2F;li&gt;
&lt;li&gt;type information을 이용하여 신속한 코드 생성이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;가독성이 좋다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Static Scope 단점
&lt;ul&gt;
&lt;li&gt;변수 및 프로시저는 실제 필요한 범위보다 더 &lt;code&gt;visible&lt;&#x2F;code&gt;하다.&lt;&#x2F;li&gt;
&lt;li&gt;조금의 참조 기능의 사용만으로 전체 프로그램이 변경될 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Scope 장점
&lt;ul&gt;
&lt;li&gt;특정 상황에서 파라미터 전달을 생략할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Scope 단점
&lt;ul&gt;
&lt;li&gt;프로시저 호출자의 지역 변수는 피호출 프로시저에서 항상 &lt;code&gt;visible&lt;&#x2F;code&gt;하다.&lt;&#x2F;li&gt;
&lt;li&gt;Static type checking을 적용할 수가 없다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 가독성이 좋지 않다.&lt;&#x2F;li&gt;
&lt;li&gt;구현 역시 쉽지 않다(bad writability).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scope-and-lifetime&quot;&gt;Scope and Lifetime&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Scope&lt;&#x2F;code&gt;와 &lt;code&gt;Lifetime&lt;&#x2F;code&gt;은 밀접한 관계가 있다. 하지만 엄연히 구분하여야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Local Scope&lt;&#x2F;code&gt;의 &lt;code&gt;Lifetime&lt;&#x2F;code&gt;은 &lt;code&gt;Stack-Dynamic&lt;&#x2F;code&gt;이다.
&lt;ul&gt;
&lt;li&gt;물론, C계열 언어에서의 &lt;code&gt;static&lt;&#x2F;code&gt;변수 등 예외도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Global Scope&lt;&#x2F;code&gt;의 &lt;code&gt;Lifetime&lt;&#x2F;code&gt;은 &lt;code&gt;Static&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Lifetime&lt;&#x2F;code&gt;을 고려했을 때 아래와 같이 유용하게 생각할 수 있다.
&lt;ul&gt;
&lt;li&gt;C계열 언어에서 main()실행 전에 에러가 날 경우 높은 확률로 &lt;code&gt;static&lt;&#x2F;code&gt;의 선언에 문제가 발생한 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;referencing-environment&quot;&gt;Referencing Environment&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;참조 공간(Referencing Environment)란 &lt;code&gt;Scope Rule&lt;&#x2F;code&gt;을 다른 관점에서 본 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 상에서 &lt;code&gt;visivle&lt;&#x2F;code&gt;한 &lt;code&gt;namespace&lt;&#x2F;code&gt;를 지칭한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Static Scope Language&lt;&#x2F;code&gt;에서의 참조 공간은 아래와 같다.
&lt;ul&gt;
&lt;li&gt;지역 변수&lt;&#x2F;li&gt;
&lt;li&gt;모든 &lt;code&gt;ancestor scope&lt;&#x2F;code&gt;의 &lt;code&gt;visible&lt;&#x2F;code&gt;한 변수&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Dynamic Scope Language&lt;&#x2F;code&gt;에서의 참조 공간은 아래와 같다.
&lt;ul&gt;
&lt;li&gt;모든 실행 중인 프로그램에서 &lt;code&gt;visible&lt;&#x2F;code&gt;한 변수&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Static Scope Ref Environment&lt;&#x2F;code&gt; 예시&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;program main;
&lt;&#x2F;span&gt;&lt;span&gt;	var a, b: integer;
&lt;&#x2F;span&gt;&lt;span&gt;procedure sub1;
&lt;&#x2F;span&gt;&lt;span&gt;	var x, y: integer;
&lt;&#x2F;span&gt;&lt;span&gt;	begin {sub1}
&lt;&#x2F;span&gt;&lt;span&gt;	..{1}..
&lt;&#x2F;span&gt;&lt;span&gt;	end;  {sub1}
&lt;&#x2F;span&gt;&lt;span&gt;procedure sub2;
&lt;&#x2F;span&gt;&lt;span&gt;	var x: integer;
&lt;&#x2F;span&gt;&lt;span&gt;	procedure sub3;
&lt;&#x2F;span&gt;&lt;span&gt;		var x: integer;
&lt;&#x2F;span&gt;&lt;span&gt;		begin {sub3}
&lt;&#x2F;span&gt;&lt;span&gt;		..{2}..
&lt;&#x2F;span&gt;&lt;span&gt;		end;  {sub3}
&lt;&#x2F;span&gt;&lt;span&gt;	begin {sub2}
&lt;&#x2F;span&gt;&lt;span&gt;	..{3}..
&lt;&#x2F;span&gt;&lt;span&gt;	end;  {sub2}
&lt;&#x2F;span&gt;&lt;span&gt;begin {main}
&lt;&#x2F;span&gt;&lt;span&gt;..{4}..
&lt;&#x2F;span&gt;&lt;span&gt;end.  {main}	
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;{1} : sub1&#x27;s {x, y}, main&#x27;s {a, b}&lt;&#x2F;li&gt;
&lt;li&gt;{2} : sub3&#x27;s {x}, main&#x27;s {a, b}&lt;&#x2F;li&gt;
&lt;li&gt;{3} : sub2&#x27;s {x}, main&#x27;s {a, b}&lt;&#x2F;li&gt;
&lt;li&gt;{4} : main&#x27;s {a, b}&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Dynamic Scope Ref Environment&lt;&#x2F;code&gt; 예시&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;void sub1() {
&lt;&#x2F;span&gt;&lt;span&gt;	int a, b;
&lt;&#x2F;span&gt;&lt;span&gt;	..{1}..
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;void sub2() {
&lt;&#x2F;span&gt;&lt;span&gt;	int b, c;
&lt;&#x2F;span&gt;&lt;span&gt;	..{2}..
&lt;&#x2F;span&gt;&lt;span&gt;	sub1();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;void main() {
&lt;&#x2F;span&gt;&lt;span&gt;	int c, d;
&lt;&#x2F;span&gt;&lt;span&gt;	..{3}..
&lt;&#x2F;span&gt;&lt;span&gt;	sub2();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;{1} : sub1&#x27;s {a, b}, sub2&#x27;s {c}, main&#x27;s {d}&lt;&#x2F;li&gt;
&lt;li&gt;{2} : sub2&#x27;s {b, c}, main&#x27;s {d}&lt;&#x2F;li&gt;
&lt;li&gt;{3} : main&#x27;s {c, d}s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Memory Management(1)</title>
		<published>2023-05-11T00:00:00+00:00</published>
		<updated>2023-05-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/memory-management-1/" type="text/html"/>
		<id>https://js970.github.io/memory-management-1/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Synchronization, Deadlock 에서는 프로세스의 자원 공유에 관해 다뤘다면, 이번 글에서는 메모리 공유에 대해 다룬다. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;memory-management-backgrounds&quot;&gt;Memory Management Backgrounds&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;address-space&quot;&gt;Address Space&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;운영 체제가 생성하는 physical memory의 추상체가 &lt;code&gt;Address Space&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Program Code&lt;&#x2F;code&gt;, &lt;code&gt;Heap&lt;&#x2F;code&gt;,&lt;code&gt; Stack&lt;&#x2F;code&gt;영역으로 구분된다.                                                  &lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;addressSpace.png&quot; alt=&quot;Address Space&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Program Code&lt;&#x2F;code&gt; : 명령어들이 위치하는 공간&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Heap&lt;&#x2F;code&gt; : 동적 할당 메모리, C언어에서의 &lt;code&gt;malloc&lt;&#x2F;code&gt;, Java계열에서의 &lt;code&gt;new&lt;&#x2F;code&gt;로 할당되는 공간&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Stack&lt;&#x2F;code&gt; : &lt;code&gt;return address&lt;&#x2F;code&gt;, &lt;code&gt;value&lt;&#x2F;code&gt;등이 위치하는 공간. 
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;&#x2F;code&gt;에는 &lt;code&gt;local variable&lt;&#x2F;code&gt;, &lt;code&gt;arguments&lt;&#x2F;code&gt;가 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Address Space&lt;&#x2F;code&gt;는 &lt;code&gt;Address Translation Mechanism&lt;&#x2F;code&gt;을 통해 physical memory로 할당된다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;ATM.png&quot; alt=&quot;Address Translation Mechanism&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;memory-virtualization&quot;&gt;Memory Virtualization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Address
&lt;ul&gt;
&lt;li&gt;모든 실행 중인 프로그램의 주소는 &lt;code&gt;virtual&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;운영 체제(CPU)는 &lt;code&gt;virtual address&lt;&#x2F;code&gt;를 &lt;code&gt;physical address&lt;&#x2F;code&gt;로 변환하는 동작을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;virtual address&lt;&#x2F;code&gt;는 &lt;code&gt;logical address&lt;&#x2F;code&gt;라고도 하며, &lt;code&gt;physical address&lt;&#x2F;code&gt;로 bound된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;virtual address&lt;&#x2F;code&gt;와 &lt;code&gt;physical address&lt;&#x2F;code&gt;는 컴파일 타임및 load-time에는 같은 의미를 지닌다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 실행 시 &lt;code&gt;virtual address&lt;&#x2F;code&gt;와 &lt;code&gt;physical address&lt;&#x2F;code&gt;의 binding이 일어난다.
&lt;ul&gt;
&lt;li&gt;당연히 프로그램 실행 시에는 두 주소값의 차이가 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Memory Virtualization
&lt;ul&gt;
&lt;li&gt;운영 체제는 각각의 프로세스마다 가상 메모리 공간을 부여한다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 통해 각각의 프로세스는 메모리 공간 전체를 사용하는 것처럼 보인다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Memory Virtualization을 통해 &lt;code&gt;Transparency&lt;&#x2F;code&gt;, &lt;code&gt;Efficiency&lt;&#x2F;code&gt;, &lt;code&gt;Protection&lt;&#x2F;code&gt;을 기대할 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Transparency&lt;&#x2F;code&gt; : 프로세스는 메모리가 공유되고 있다는 사실을 고려하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Efficiency&lt;&#x2F;code&gt; : 단편화(fragmentation) 문제를 최소화 할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Protection&lt;&#x2F;code&gt; : 다른 프로세스 및 OS가 메모리 공간을 침범하는 것을 방지한다. 마찬가지로, 프로세스가 다른 프로세스에 영향을 미치며 종료되지 않도록 한다. 협력 프로세스의 경우에는 일부 메모리를 공유할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;static-relocation&quot;&gt;Static Relocation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Software-based relocation이다.&lt;&#x2F;li&gt;
&lt;li&gt;context switching에 의해 프로그램이 binding되는 &lt;code&gt;physical address&lt;&#x2F;code&gt;의 주소가 바뀔 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 Memory Space를 통재로 다른 &lt;code&gt;physical address&lt;&#x2F;code&gt;에 relocate하는 것이 &lt;code&gt;static relocation&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;하드웨어의 지원이 없어도 된다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 아래와 같은 단점이 존재한다.
&lt;ul&gt;
&lt;li&gt;의도치 않게 다른 프로세스의 메모리를 읽을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;OS를 포함한 다른 메모리 영역을 침범할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;External Fragmentation(외부 단편화)이 발생하여 메모리가 낭비될 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-relocation&quot;&gt;Dynamic Relocation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Hardware-based relocation이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MMU(Memory Management Unit)&lt;&#x2F;code&gt;가 모든 메모리 참조 명령어에 대해 address translation을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;하드웨어에 의해 &lt;code&gt;protection&lt;&#x2F;code&gt;이 강제된다.
&lt;ul&gt;
&lt;li&gt;만약 &lt;code&gt;virtual address&lt;&#x2F;code&gt;가 유효하지 않다면, &lt;code&gt;MMU&lt;&#x2F;code&gt;에서 예외 처리를 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 운영 체제가 &lt;code&gt;MMU&lt;&#x2F;code&gt;에 유효한 &lt;code&gt;virtual address&lt;&#x2F;code&gt;에 대한 정보를 넘겨주기 때문에 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MMU&lt;&#x2F;code&gt;의 구조에 대해 간단히 살펴보자&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;MMU.png&quot; alt=&quot;MMU&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reallocation register&lt;&#x2F;code&gt;는 &lt;code&gt;base register&lt;&#x2F;code&gt;라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;위 도식에서 확인할 수 있듯이, 유저 프로그램은 오직 &lt;code&gt;logical address&lt;&#x2F;code&gt;에 대해서만 관여하고, &lt;code&gt;physical address&lt;&#x2F;code&gt;에는 접근하지 않는다. 실제로 &lt;code&gt;physical address&lt;&#x2F;code&gt;에 대한 정보도 알 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;이 모든 과정은 실행 시간(execution time)에 일어난다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MMU&lt;&#x2F;code&gt;는 운영 체제에서 가장 중요한 역할 중 하나인 프로세스 보호(운영체제, user processes)를 수행한다.
&lt;ul&gt;
&lt;li&gt;이를 수행하기 위해 &lt;code&gt;base register&lt;&#x2F;code&gt;와 &lt;code&gt;limit register&lt;&#x2F;code&gt;를 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;base register&lt;&#x2F;code&gt;에는 프로세스 메모리의 시작 주소가 저장되어 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;limit register&lt;&#x2F;code&gt;에는 프로세스 메모리의 크기가 저장된다.&lt;&#x2F;li&gt;
&lt;li&gt;즉, &lt;code&gt;base register value&lt;&#x2F;code&gt; ~ &lt;code&gt;base register value + limit register value&lt;&#x2F;code&gt; 가 프로세스가 할당된 공간을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;위와 같은 레지스터를 활용하여 하드웨어 레벨에서 메모리에 할당된 각각의 프로세스가 서로의 영역을 침범하지 않게 한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;baseAndLimit.png&quot; alt=&quot;Base and Limit Register&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;위 그림에서 &lt;code&gt;bound register&lt;&#x2F;code&gt;는 &lt;code&gt;limit register&lt;&#x2F;code&gt;를 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;os-issues-for-memory-virtualizing&quot;&gt;OS Issues for Memory Virtualizing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;운영 체제는 &lt;code&gt;base-and-bound&lt;&#x2F;code&gt;접근을 구현하도록 동작해야 한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bound register&lt;&#x2F;code&gt;와 &lt;code&gt;limit register&lt;&#x2F;code&gt;를 사용하는 접근을 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;구체적으로는 아래와 같은 동작을 수행해야 한다.
&lt;ol&gt;
&lt;li&gt;프로세스가 실행될 때 &lt;code&gt;physical memory&lt;&#x2F;code&gt;의 Free Space를 찾아야 한다.
&lt;ul&gt;
&lt;li&gt;사용중이지 않은 &lt;code&gt;physical memory&lt;&#x2F;code&gt;공간을 저장하는 &lt;code&gt;free list&lt;&#x2F;code&gt;를 이용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로세스가 종료될 때 &lt;code&gt;physical memory&lt;&#x2F;code&gt;에 대한 해제가 필요하다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;free list&lt;&#x2F;code&gt;에 사용했던 메모리 공간을 추가해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;context-switch가 일어날 때 &lt;code&gt;base-bound pair&lt;&#x2F;code&gt;를 저장해야 한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PCB(process control block)&lt;&#x2F;code&gt;에 해당 &lt;code&gt;base-bound pair&lt;&#x2F;code&gt;를 저장해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-loading&quot;&gt;Dynamic Loading&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dynamic Loading&lt;&#x2F;code&gt;이란 호출될 때까지는 data를 loading하지 않고 있다가 호출 되면 load하는 것이다.
&lt;ul&gt;
&lt;li&gt;메모리 공간의 utilization을 높일 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;특히 대용량의 코드가 빈번하지 않게 처리될 경우에 유용하다.&lt;&#x2F;li&gt;
&lt;li&gt;운영 체제의 지원이 필요 없다. 프로그램 디자인을 통해 구현 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Dynamic Loading&lt;&#x2F;code&gt;에 의해 Linking역시 execution time 까지 연기된다. 
&lt;ul&gt;
&lt;li&gt;이것을 &lt;code&gt;Dynamic linking&lt;&#x2F;code&gt;이라 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;stub&lt;&#x2F;code&gt;코드를 사용하여 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;특히 라이브러리를 사용할 때 유용하다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 라이브러리의 사용을 공유 라이브러리(&lt;code&gt;shared libraries&lt;&#x2F;code&gt;)라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;swapping&quot;&gt;Swapping&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Swapping&lt;&#x2F;code&gt;이란 backing store(HDD, SSD)와 main memory간에 프로세스를 교체하는 것을 말한다.
&lt;ul&gt;
&lt;li&gt;main memory 에서 backing store로 가는 것을 &lt;code&gt;swap out&lt;&#x2F;code&gt;이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;backing store에서 main memory로 오는 것을 &lt;code&gt;swap in&lt;&#x2F;code&gt;이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;swap in&lt;&#x2F;code&gt;을 통해 프로세스는 연속적으로 실행될 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Swaping&lt;&#x2F;code&gt;의 핵심은 전송 시간이다.
&lt;ul&gt;
&lt;li&gt;backing store의 write&#x2F;read속도가 매우 느리기 때문에 &lt;code&gt;swap&lt;&#x2F;code&gt;되는 정보량에 따라 전송 시간이 차이난다.&lt;&#x2F;li&gt;
&lt;li&gt;결국 &lt;code&gt;swap&lt;&#x2F;code&gt;을 최소화 하는 것이 핵심이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Swapping&lt;&#x2F;code&gt;의 특징으로는 아래와 같은 것들이 있다.
&lt;ul&gt;
&lt;li&gt;운영 체제의 지원이 필요 없다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그래머가 직접 코드나 데이터를 필요에 의해 옮기는 것이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Swapping&lt;&#x2F;code&gt;은 &lt;code&gt;process level swapping&lt;&#x2F;code&gt;과 &lt;code&gt;page level swapping&lt;&#x2F;code&gt;이 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process level swapping&lt;&#x2F;code&gt;에서는 프로세스가 main memory와 backing store간에 &lt;code&gt;swapping&lt;&#x2F;code&gt;된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page level swapping&lt;&#x2F;code&gt;에서는 &lt;code&gt;page&lt;&#x2F;code&gt;단위로 &lt;code&gt;swapping&lt;&#x2F;code&gt;된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;process level swapping&lt;&#x2F;code&gt;은 전체 프로세스가 &lt;code&gt;swapping&lt;&#x2F;code&gt;되므로 시간이 많이 소모된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page level swapping&lt;&#x2F;code&gt;은 &lt;code&gt;swapping&lt;&#x2F;code&gt;에 대한 예측이 가능하다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Names and Bindings</title>
		<published>2023-05-11T00:00:00+00:00</published>
		<updated>2023-05-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/names-and-bindings/" type="text/html"/>
		<id>https://js970.github.io/names-and-bindings/</id>
		<content type="html">&lt;h2 id=&quot;names-and-bindings&quot;&gt;Names and Bindings&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;name&quot;&gt;Name&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Name&lt;&#x2F;code&gt;은 프로그램에서 식별자 역할을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Name&lt;&#x2F;code&gt;은 자료 구조, 타입, 함수, 특수 기능 등 여러 &lt;code&gt;namespace&lt;&#x2F;code&gt;에 속할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;문법적으로는 &lt;code&gt;Name&lt;&#x2F;code&gt;을 lexeme의 instance라고 말할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어 설계에 있어서 &lt;code&gt;Name&lt;&#x2F;code&gt;의 디자인 시 고려 사항으로는 아래와 같은 것들이 있다.
&lt;ul&gt;
&lt;li&gt;case sensitive?&lt;&#x2F;li&gt;
&lt;li&gt;최대로 가질 수 있는 길이&lt;&#x2F;li&gt;
&lt;li&gt;Special Words의 존재
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Keyword&lt;&#x2F;code&gt;, &lt;code&gt;Reserved Word&lt;&#x2F;code&gt;, &lt;code&gt;Predefined Word&lt;&#x2F;code&gt;가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Keyword&lt;&#x2F;code&gt; : 특정 문맥에서만 특별하게 사용되는 단어&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Reserved Word&lt;&#x2F;code&gt; : 사용자 지정 &lt;code&gt;name&lt;&#x2F;code&gt;으로 사용할 수 없는 단어&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Predefined Word&lt;&#x2F;code&gt; : &lt;code&gt;Reserved Word&lt;&#x2F;code&gt;는 아니지만 시스템에서 이미 정의된 단어&lt;&#x2F;li&gt;
&lt;li&gt;어떤 프로그래밍 언어에서는 &lt;code&gt;Keyword&lt;&#x2F;code&gt;가 &lt;code&gt;Reserved Word&lt;&#x2F;code&gt;가 아닐 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FORTRAN&lt;&#x2F;code&gt;에서는 아래와 같은 코딩이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;FORTRAN&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-FORTRAN &quot;&gt;&lt;code class=&quot;language-FORTRAN&quot; data-lang=&quot;FORTRAN&quot;&gt;&lt;span&gt;INTEGER REAL
&lt;&#x2F;span&gt;&lt;span&gt;REAL INTEGER
&lt;&#x2F;span&gt;&lt;span&gt;REAL = 3
&lt;&#x2F;span&gt;&lt;span&gt;INTEGER = 3.4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;connector(연결 문자), special symbol등의 허용 여부
&lt;ul&gt;
&lt;li&gt;Pascal, Modula-2는 연결 문자를 허용하지 않았다.&lt;&#x2F;li&gt;
&lt;li&gt;FORTRAN 77은 연결 문자로 공백을 사용했다.&lt;&#x2F;li&gt;
&lt;li&gt;대부분의 프로그래밍 언어들(C, COBOL, FORTRAN 90, ...)은 &lt;code&gt;_&lt;&#x2F;code&gt;을 연결 문자로 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;첫 글자 대소문자의 의미(상수, 변수를 구분하는 데 사용되기도 한다)
&lt;ul&gt;
&lt;li&gt;Haskell : 타입 이름은 반드시 capitalized되어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Prolog : 변수 이름은 반드시 capitalized되어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;variable&quot;&gt;Variable&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;변수는 메모리 블럭의 추상체로 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;변수는 &lt;code&gt;name&lt;&#x2F;code&gt;, &lt;code&gt;address&lt;&#x2F;code&gt;, &lt;code&gt;value&lt;&#x2F;code&gt;, &lt;code&gt;type&lt;&#x2F;code&gt;, &lt;code&gt;lifetime&lt;&#x2F;code&gt;, &lt;code&gt;scope&lt;&#x2F;code&gt;의 여섯 가지 &lt;code&gt;속성&lt;&#x2F;code&gt;값을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;대부분의 변수는 &lt;code&gt;name&lt;&#x2F;code&gt;을 가진다. 하지만 동적 할당 변수 등 &lt;code&gt;name&lt;&#x2F;code&gt;을 가지지 않는 변수도 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;address&lt;&#x2F;code&gt;는 변수와 관련된 메모리 주소이다. 변수의 &lt;code&gt;name&lt;&#x2F;code&gt;이 같다고 하더라도 &lt;code&gt;address&lt;&#x2F;code&gt;가 다를 수 있다.
&lt;ul&gt;
&lt;li&gt;파라미터 타입에 따른 차이, scope(local, global)에 따른 차이&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;binding&quot;&gt;Binding&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binding&lt;&#x2F;code&gt;이란 &lt;code&gt;name&lt;&#x2F;code&gt;과 &lt;code&gt;속성(attribute)&lt;&#x2F;code&gt;을 연관 짓는 것을 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;앞서 살펴본 변수에서와 같이 &lt;code&gt;name&lt;&#x2F;code&gt;자체가 &lt;code&gt;속성&lt;&#x2F;code&gt;일수도 있다.&lt;&#x2F;li&gt;
&lt;li&gt;더 넓은 관점에서 생각한다면 &lt;code&gt;프로그램 구성 요소&lt;&#x2F;code&gt;와 &lt;code&gt;속성&lt;&#x2F;code&gt;의 연관 짓는 것이라고 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;binding-time&quot;&gt;Binding Time&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binding&lt;&#x2F;code&gt;이 일어나는 시점을 바인딩 시간이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;언어 구성요소마다 바인딩 시간이 다를 수 있다.
&lt;ul&gt;
&lt;li&gt;예약어와 일반어의 바인딩 시간은 다르다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;언어의 같은 구성요소라고 하더라도 속성에 따라 바인딩 시간이 다를 수 있다.
&lt;ul&gt;
&lt;li&gt;동적 할당 여부, 글로벌 변수(static) 여부&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;바인딩 시각은 다음과 같이 분류할 수 있다.
&lt;ol&gt;
&lt;li&gt;언어 정의 시점 : &lt;code&gt;Reserved Word&lt;&#x2F;code&gt;의 경우 언어 정의 시점에 바인딩이 일어난다고 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;언어 구현 시점 : &lt;code&gt;sizeof(int)&lt;&#x2F;code&gt;등의 함수를 생각해 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 번역 시점 : 컴파일 시점에 바인딩이 일어나는 경우이다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 링크 시점 : 라이브러리 함수는 이 시점에 바인딩이 일어난다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 적재 시점 : 정적 변수의 주소는 이 시점에 바인딩이 일어난다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 수행 시점 : runtime에 바인딩이 일어나는 모든 경우가 해당된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 수행 이전 시점에 일어나는 &lt;code&gt;binding&lt;&#x2F;code&gt;을 &lt;code&gt;early binding(static binding)&lt;&#x2F;code&gt;이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 수행 시점에 일어나는 &lt;code&gt;binding&lt;&#x2F;code&gt;은 &lt;code&gt;late binding(dynamic binding)&lt;&#x2F;code&gt;이라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;다음 C언어 프로그램이 주어졌을 때 바인딩 시점에 대해 생각해 보자.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static int&lt;&#x2F;span&gt;&lt;span&gt; X; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; Y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;X);
&lt;&#x2F;span&gt;&lt;span&gt;X = X + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;변수 X의 타입 : 컴파일 타임(Program translation time)&lt;&#x2F;li&gt;
&lt;li&gt;변수 X의 값 : runtime(Program execution time)&lt;&#x2F;li&gt;
&lt;li&gt;기본타입에 관한 +의 의미 : Language definition time&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 코드 상에서의 +의 의미 : 컴파일 타임(Program translation time)&lt;&#x2F;li&gt;
&lt;li&gt;숫자 10의 의미 : Language definition time&lt;&#x2F;li&gt;
&lt;li&gt;숫자 10의 내부 표현 형태(2&#x27;s complement 등) : Language implementation time&lt;&#x2F;li&gt;
&lt;li&gt;scanf 호출 시 수행될 내용 : Program link edit time&lt;&#x2F;li&gt;
&lt;li&gt;변수 X의 주소 : Program load time&lt;&#x2F;li&gt;
&lt;li&gt;변수 Y의 주소 : runtime(Program execution time)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;early-binding&quot;&gt;Early Binding&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;번역 전에 파악할 수 있는 정보가 많다.&lt;&#x2F;li&gt;
&lt;li&gt;다양한 정보로 프로그램의 잠재적 오류를 사전에 검사할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;실행파일의 효율을 높일 수 있도록 번역할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;컴파일 방식과 잘 어울린다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;late-binding&quot;&gt;Late Binding&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;가능한 한 프로그래머의 선택을 늦은 시점까지 연기할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;범용 프로그래밍(generic programming)과 같은 유연한 프로그래밍 기법을 사용하기 쉽다.&lt;&#x2F;li&gt;
&lt;li&gt;실행 시간에 오류를 발견하는 경우가 많다(오류 검사가 늦다).&lt;&#x2F;li&gt;
&lt;li&gt;인터프리터 방식과 잘 어울린다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;aliases-name-binding&quot;&gt;Aliases(Name Binding)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;L-value&lt;&#x2F;code&gt; : 변수의 주소, assignment 연산의 좌측에 위치하는 값이다.
&lt;ul&gt;
&lt;li&gt;C언어에서 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;를 적용할 수 있는 값이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;R-value&lt;&#x2F;code&gt; : 실제 content의 값, assignment 연산의 우측에 위치하는 값이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Alias&lt;&#x2F;code&gt; : 하나의 메모리 공간에 대해 두 개 이상의 &lt;code&gt;name&lt;&#x2F;code&gt;이 존재하는 것이다.
&lt;ul&gt;
&lt;li&gt;가독성에 좋지 않다.&lt;&#x2F;li&gt;
&lt;li&gt;효율성의 이유로 사용된 기능이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Alias&lt;&#x2F;code&gt;의 원인으로는 아래와 같은 것들이 있다.
&lt;ul&gt;
&lt;li&gt;EQUIVALENCE in FORTRAN&lt;&#x2F;li&gt;
&lt;li&gt;union in C&#x2F;C++&lt;&#x2F;li&gt;
&lt;li&gt;varient records in Pascal and Ada&lt;&#x2F;li&gt;
&lt;li&gt;parameter passing&lt;&#x2F;li&gt;
&lt;li&gt;pointers and references&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 프로그램은 &lt;code&gt;Alias&lt;&#x2F;code&gt;로 인해 가독성이 떨어진 프로그램의 예시이다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;math.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span&gt;} a;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;*= a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span&gt;*= a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; z = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;(a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;+ a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;z : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, z);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;언뜻 생각하면 5가 출력될 것이라고 생각할 수 있지만 union자료 구조는 메모리 효율성을 위해 하나의 메모리 공간에 여러 변수를 저장하는 자료 구조이다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 최종 출력은 22가 출력된다.(4*4*16 + 512, sqrt(512) = 22)&lt;&#x2F;li&gt;
&lt;li&gt;서로 다른 변수명들이 같은 메모리 공간을 가리키고 있어서 이러한 문제가 발생한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Prolog</title>
		<published>2023-05-04T00:00:00+00:00</published>
		<updated>2023-05-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/prolog/" type="text/html"/>
		<id>https://js970.github.io/prolog/</id>
		<content type="html">&lt;h2 id=&quot;prolog-intro&quot;&gt;Prolog Intro&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;prolog-history&quot;&gt;Prolog History&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;1972년에 Alain colmerauer와 Philippe Roussel이 만들었다.&lt;&#x2F;li&gt;
&lt;li&gt;1979년에 Kowalski의 논문 Algorithm = Logic + Control에서 소개된 이후 널리 알려졌다.&lt;&#x2F;li&gt;
&lt;li&gt;일본 정부에서 5세대 프로젝트의 기본 언어로 채택되는 등 나름 영향력이 있었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;prolog-resources&quot;&gt;Prolog Resources&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Prolog Env
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.swi-prolog.org&#x2F;&quot;&gt;SWI Prolog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.visual-prolog.com&#x2F;&quot;&gt;Visual Prolog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.dobrev.com&#x2F;&quot;&gt;Strawberry Prolog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Prolog Docs
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cpp.edu&#x2F;~jrfisher&#x2F;www&#x2F;prolog_tutorial&#x2F;contents.html&quot;&gt;J.R. Fisher, Prolog Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.iso.org&#x2F;standard&#x2F;73194.html&quot;&gt;Prolog part1 - General core&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pauillac.inria.fr&#x2F;~deransar&#x2F;prolog&#x2F;docs.html&quot;&gt;J.P.E. Hudgson, Prolog : The ISO Standard Documents, 1999&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Prolog Books
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pearson.com&#x2F;uk&#x2F;educators&#x2F;higher-education-educators&#x2F;program&#x2F;Bratko-Prolog-Programming-for-Artificial-Intelligence-4th-Edition&quot;&gt;Ivan Bratko, Prolog Programming for Artificial Intelligence, 4th Ed., AddisonWesley, 2012&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.learnprolognow.org&#x2F;&quot;&gt;Patrick Blackburn, Johan Bos and Kristina Striegnitz, Learn Proglog Now!, College Publication, 2006&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amzi.com&#x2F;ExpertSystemsInProlog&#x2F;index.htm&quot;&gt;Dennis Merritt, Building Expert System in Prolog, Springer-Verlag, 1989&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ssucajjeo-peuroggeraeonco-heoeo-vs-sseoheojjeo-peuroggeraeonco-heoeo&quot;&gt;순차적 프로그래밍 언어 vs 선언적 프로그래밍 언어&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;순차적 프로그래밍 언어(Procedural Language)
&lt;ul&gt;
&lt;li&gt;BASIC, FORTRAN, C++, Pascal, Java, ...&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;computational step&lt;&#x2F;code&gt;을 일일히 명시해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;computational step&lt;&#x2F;code&gt;이란 &lt;code&gt;instruction&lt;&#x2F;code&gt;, &lt;code&gt;statement&lt;&#x2F;code&gt;, &lt;code&gt;procedure&lt;&#x2F;code&gt;을 통한 계산 과정이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;어떻게(How)&lt;&#x2F;code&gt;문제를 풀어야 하는지 기술한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;선언적 프로그래밍 언어(Declarative Language)
&lt;ul&gt;
&lt;li&gt;LISP, Prolog, ML, ...&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;computational rules&lt;&#x2F;code&gt;를 기술한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fact&lt;&#x2F;code&gt;는 &lt;code&gt;computational rules&lt;&#x2F;code&gt;의 한 종류이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;무엇(What)&lt;&#x2F;code&gt;을 풀어야 하는지 기술한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;사실 순차적 프로그래밍 언어와 선언적 프로그래밍 언어에서 문제의 기술에 관한 부분은 현실에서 항상 명확히 구별되지는 않는다.
&lt;ul&gt;
&lt;li&gt;순차적 프로그래밍 언어에서 타입 선언에 관한 부분은 &lt;code&gt;What&lt;&#x2F;code&gt;으로 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Prolog의 cut은 &lt;code&gt;How&lt;&#x2F;code&gt;에 대한 기술로 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;computational-model-of-prolog&quot;&gt;Computational Model of Prolog&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;1차 술어 계산(1st-order predicate calculus)을 기반으로 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Rule&lt;&#x2F;code&gt;은 &lt;code&gt;Horn clause&lt;&#x2F;code&gt;를 이용하여 표기한다.(CNF, Conjunctive Normal Form)&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;interesting(L) :- lectureByWoo(L), language(L).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Fact&lt;&#x2F;code&gt;는 아무 조건 없이 상상 성립하는 &lt;code&gt;Rule&lt;&#x2F;code&gt;이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;fact.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Goal&lt;&#x2F;code&gt;은 사실인지 확인하고 싶은 명제에 대해 질의하는 것을 의미한다. 질의의 결과는 참 또는 거짓이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- goal.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;Rule&lt;&#x2F;code&gt;, &lt;code&gt;Fact&lt;&#x2F;code&gt;를 포함하는 Prolog프로그램의 예시이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;lectureByWoo(prolog).
&lt;&#x2F;span&gt;&lt;span&gt;lectureByWoo(scheme).
&lt;&#x2F;span&gt;&lt;span&gt;language(prolog).
&lt;&#x2F;span&gt;&lt;span&gt;language(scheme).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;interesting(L) :- lectureByWoo(L), language(L).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 프로그램을 실행하여 질의하면 아래와 같다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- interesting(prolog).
&lt;&#x2F;span&gt;&lt;span&gt;true.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- interesting(scheme).
&lt;&#x2F;span&gt;&lt;span&gt;true.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- interesting(cpp).
&lt;&#x2F;span&gt;&lt;span&gt;false.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;swi-prolog-basic&quot;&gt;SWI-Prolog Basic&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;gibbo-sahyonbbeo&quot;&gt;기본 사용법&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 소스 편집&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;edit(file(&amp;#39;filename.pl&amp;#39;)).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 파일 참조(load). 두 표현은 같은 표현이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- consult(filename).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- [filename].
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;질의
&lt;ul&gt;
&lt;li&gt;parent에 관한 아래와 같은 &lt;code&gt;rule&lt;&#x2F;code&gt;이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;	son(jim, jane).
&lt;&#x2F;span&gt;&lt;span&gt;	son(jim, john).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	parent(X, Y) :- son(Y, X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;아래 질의에서는 parent &lt;code&gt;rule&lt;&#x2F;code&gt;을 만족시키는지를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;	?- parent(jane, jim).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;아래 질의에서는 목적을 명시하여 답변을 얻는다.&lt;&#x2F;li&gt;
&lt;li&gt;질의가 true가 되도록 하는 결과를 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;답변에 만족했다면 질의 이후 &amp;quot;enter&amp;quot;를 입력하면 질의가 종료된다.&lt;&#x2F;li&gt;
&lt;li&gt;다른 답변을 원한다면 질의 이후 &amp;quot;;&amp;quot;를 입력하여 게속 질의할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;	?- parent(X, jim).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;답변 출력(jane에서 &lt;code&gt;;&lt;&#x2F;code&gt;를 입력하여 다른 답을 요청했다)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;	X = jane ;
&lt;&#x2F;span&gt;&lt;span&gt;	X = john.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;해석기 종료&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;	?- halt.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;prolog-predicate-term&quot;&gt;Prolog = predicate + term&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Prolog는 &lt;code&gt;computational rules&lt;&#x2F;code&gt;를 &lt;code&gt;Horn clause&lt;&#x2F;code&gt;를 사용하여 정의한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Horn clause&lt;&#x2F;code&gt;는 &lt;code&gt;predicate&lt;&#x2F;code&gt;(술어) 와 &lt;code&gt;term&lt;&#x2F;code&gt;(항)으로 구성된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;predicate&lt;&#x2F;code&gt;(술어) : 소문자로 시작하며, 상수의 일종으로 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;term&lt;&#x2F;code&gt;(항): 변수 또는 상수이다.
&lt;ul&gt;
&lt;li&gt;변수 : &lt;code&gt;_&lt;&#x2F;code&gt;또는 대문자로 시작한다.&lt;&#x2F;li&gt;
&lt;li&gt;상수 : 소문자로 시작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Clause&lt;&#x2F;code&gt;(절) : &lt;code&gt;predicate&lt;&#x2F;code&gt;의 개별 정의를 &lt;code&gt;clauses&lt;&#x2F;code&gt;라고 한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fact&lt;&#x2F;code&gt;, &lt;code&gt;rule&lt;&#x2F;code&gt;모두 &lt;code&gt;Clause&lt;&#x2F;code&gt;에 포함된다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 문장은 &lt;code&gt;fact&lt;&#x2F;code&gt;로 이루어진 하나의 &lt;code&gt;Clause&lt;&#x2F;code&gt;이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;parent(jane, alen).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;body&lt;&#x2F;code&gt;없이 &lt;code&gt;fact&lt;&#x2F;code&gt;로만 이루어져 있으므로 항상 참이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 문장은 두 개의 &lt;code&gt;Clause&lt;&#x2F;code&gt;로 이루어진 &lt;code&gt;rule&lt;&#x2F;code&gt;이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;parent(X, Y) :- mother(X, Y).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;좌항은 &lt;code&gt;head&lt;&#x2F;code&gt;, 우항은 &lt;code&gt;body&lt;&#x2F;code&gt;라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;arguments&quot;&gt;Arguments&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;predicate&lt;&#x2F;code&gt;는 인수를 받을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;term&lt;&#x2F;code&gt;은 &lt;code&gt;상수&lt;&#x2F;code&gt;, &lt;code&gt;변수&lt;&#x2F;code&gt;, &lt;code&gt;복합형&lt;&#x2F;code&gt; 중 하나의 형태이다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;상수&lt;&#x2F;code&gt; : 소문자로 시작하는 이름을 가진다.
&lt;ul&gt;
&lt;li&gt;수(number) : 정수 및 부동소수점 수&lt;&#x2F;li&gt;
&lt;li&gt;기호상수(symbolic constants) : 항상 소문자로 시작되어야 하며, 숫자, &lt;code&gt;_&lt;&#x2F;code&gt;기호가 그 뒤로 올 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;문자열 상수(string constants) : 작은 따음표로 감싼 형태이다. 꼭 대문자를 사용하여 상수명을 지정하고 싶을 경우 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;변수&lt;&#x2F;code&gt; : 대문자 또는 &lt;code&gt;_&lt;&#x2F;code&gt;로 시작하는 이름을 가진다.
&lt;ul&gt;
&lt;li&gt;Prolog에서 &lt;code&gt;변수&lt;&#x2F;code&gt;, &lt;code&gt;상수&lt;&#x2F;code&gt;는 type을 가지지 않는다. 즉 어떠한 값이든 될 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Prolog에서 모든 &lt;code&gt;변수&lt;&#x2F;code&gt;는 local variable이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;변수&lt;&#x2F;code&gt;의 값은 같은 절(clause)내에서는 일정하며, 절 외부의 값을 유지하는경우는 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;복합형&lt;&#x2F;code&gt; : 여러 항을 functional constructor(functor)로 묶은 것이다.
&lt;ul&gt;
&lt;li&gt;data constructor이다.&lt;&#x2F;li&gt;
&lt;li&gt;function으로 구성된다.&lt;&#x2F;li&gt;
&lt;li&gt;list역시 복합형이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;리스트는 &lt;code&gt;복합형&lt;&#x2F;code&gt; &lt;code&gt;term&lt;&#x2F;code&gt;이며, 아래의 두 가지 형태 중 하나의 형태를 가진다.
&lt;ul&gt;
&lt;li&gt;빈 리스트&lt;&#x2F;li&gt;
&lt;li&gt;원소가 하나 이상인 리스트&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;일반 항을 사용할 때 아래의 두 가지 패턴 중 하나를 사용하면 된다.
&lt;ul&gt;
&lt;li&gt;빈 리스트 : &lt;code&gt;[]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;원소가 하나 이상인 리스트 : &lt;code&gt;[H|T]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 리스트 사용 예시이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;sum([], 0).
&lt;&#x2F;span&gt;&lt;span&gt;sum([H|T], X) :- sum(T|Y), X is H + Y.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- sum([1, 2, 3, 4], X).
&lt;&#x2F;span&gt;&lt;span&gt;X = 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;X = 10이 유도되는 과정은 아래와 같다.
&lt;ol&gt;
&lt;li&gt;sum([1, 2, 3, 4], X) = sum([2, 3, 4], Y), X = 1 + Y&lt;&#x2F;li&gt;
&lt;li&gt;sum([2, 3, 4], X) = sum([3, 4], Y), X = 2 + Y&lt;&#x2F;li&gt;
&lt;li&gt;sum([3, 4], X) = sum([4], Y), X = 3 + Y&lt;&#x2F;li&gt;
&lt;li&gt;sum([4], X) = sum([], Y), H = 4 + Y, Y = 0, X = H + Y = 4&lt;&#x2F;li&gt;
&lt;li&gt;by 4, 3&#x27;s Y is 4, 3&#x27;s X is 7&lt;&#x2F;li&gt;
&lt;li&gt;by 3, 2&#x27;s Y is 7, 2&#x27;s X is 9&lt;&#x2F;li&gt;
&lt;li&gt;by 2, 1&#x27;s Y is 9, 1&#x27;s X is 10&lt;&#x2F;li&gt;
&lt;li&gt;by 1~7, sum([1, 2, 3, 4], X). X = 10&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;참고로 Prolog는 선언적 프로그래밍 언어이므로, 위 프로그램의 1행과 2행의 위치를 바꾸어도 정상적으로 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;unification-ddailhwa&quot;&gt;Unification(단일화)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;변수가 포함된 두 개의 항을 일치시키는 것을 의미하므로 &lt;code&gt;동형화&lt;&#x2F;code&gt;라고 볼 수도 있다.&lt;&#x2F;li&gt;
&lt;li&gt;두 항의 단일화가 가능하다면 &lt;code&gt;일치(match)&lt;&#x2F;code&gt;한다고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;구조와 인수가 맞아야 사용 가능하므로, 서로 다른 상수, 상수와 변수 간에는 &lt;code&gt;match&lt;&#x2F;code&gt;가 불가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 단일화의 예시이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- loves(john, X) = loves(Y, marry).
&lt;&#x2F;span&gt;&lt;span&gt;X = mary, Y = john
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- loves(john, X) = loves(mary, X).
&lt;&#x2F;span&gt;&lt;span&gt;false.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;computation&quot;&gt;Computation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Prolog에서는 &lt;code&gt;단일화(unification)&lt;&#x2F;code&gt;중 &lt;code&gt;computation&lt;&#x2F;code&gt;이 일어난다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;computation&lt;&#x2F;code&gt; : &lt;code&gt;is&#x2F;2&lt;&#x2F;code&gt; 술어를 통해 수행된다. &lt;&#x2F;li&gt;
&lt;li&gt;값을 계산하기 위해 술어 &lt;code&gt;is&lt;&#x2F;code&gt;를 사용해야 하는 것에 주의하자, &lt;code&gt;=&lt;&#x2F;code&gt;를 사용할 경우 Prolog는 연산하지 않고 값을 그대로 보여준다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 리스트 절에서 다룬 sum프로그램의 &lt;code&gt;is&lt;&#x2F;code&gt;를 &lt;code&gt;=&lt;&#x2F;code&gt;로 변경한 코드와 그 실행 결과이다.
&lt;ul&gt;
&lt;li&gt;코드&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;sum([], 0).
&lt;&#x2F;span&gt;&lt;span&gt;sum([H|T], S) :- sum(T, S1), S = H + S1.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;실행 결과                                                             &lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;isPredecateTest.png&quot; alt=&quot;predecate test&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;factorial-in-prolog&quot;&gt;Factorial in Prolog&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 프로그램은 Prolog에서 Factorial을 계산하는 코드이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;fact(0, 1).
&lt;&#x2F;span&gt;&lt;span&gt;fact(N, M) :-
&lt;&#x2F;span&gt;&lt;span&gt;	N &amp;gt; 0,
&lt;&#x2F;span&gt;&lt;span&gt;	N1 is N - 1,
&lt;&#x2F;span&gt;&lt;span&gt;	fact(N1, M1),
&lt;&#x2F;span&gt;&lt;span&gt;	M is N * M1.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;prolog-and-tail-recursion&quot;&gt;Prolog and Tail Recursion&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;tail-recursion&quot;&gt;Tail Recursion&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 코드는 계산 결과를 저장하는 변수(M)의 연산이 이뤄지는 부분에서 재귀 이외의 연산이 있다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;fact(0, 1).
&lt;&#x2F;span&gt;&lt;span&gt;fact(N, M) :-
&lt;&#x2F;span&gt;&lt;span&gt;	N &amp;gt; 0,
&lt;&#x2F;span&gt;&lt;span&gt;	N1 is N-1,
&lt;&#x2F;span&gt;&lt;span&gt;	fact(N1, M1),
&lt;&#x2F;span&gt;&lt;span&gt;	M is N * M1.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;연산 과정을 자세히 살펴보자. 10!을 연산하기 위해서는 아래와 같이 질의해야 한다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- fact(1, X).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이때 X는 질의 결과를 저장하는 변수임과 동시에 계산 과정의 중간 결과를 저장하는 변수이다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램의 마지막 줄에서 M is N * M1부분이 있는데, M1은 fact(N1, M1).의 호출을 통해 도출된다.&lt;&#x2F;li&gt;
&lt;li&gt;X의 값을 구하기 위한 부분에서 fact의 호출 후 이를 N과 곱하는 연산이 추가로 일어나는 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 위 코드는 Tail Recursion이 아니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Tail Recursion조건을 만족하도록 &lt;code&gt;fact&#x2F;3&lt;&#x2F;code&gt;을 작성하면 아래와 같다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;fact(0, M, M).
&lt;&#x2F;span&gt;&lt;span&gt;fact(N, Acc, F) :-
&lt;&#x2F;span&gt;&lt;span&gt;	N &amp;gt; 0,
&lt;&#x2F;span&gt;&lt;span&gt;	N1 is N - 1,
&lt;&#x2F;span&gt;&lt;span&gt;	Acc1 is Acc * N,
&lt;&#x2F;span&gt;&lt;span&gt;	fact(N1, Acc1, F).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;질의 결과를 저장하는 변수 F와 계산의 중간 결과를 저장하는 Acc를 따로 설정하여 전달하므로 재귀 과정에서 &lt;code&gt;fact&#x2F;3&lt;&#x2F;code&gt;의 호출 이외의 연산이 일어나지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 위 코드는 Tail Recursion 조건을 만족한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tail-recursiongwa-hyeossa-ssusse&quot;&gt;Tail Recursion과 연산 순서&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;앞서 연산은 &lt;code&gt;is&#x2F;2&lt;&#x2F;code&gt;로만 이루어지고 &lt;code&gt;=&lt;&#x2F;code&gt;를 사용할 경우 연산 없이 그대로 출력한다고 했다. 이를 이용해서 연산 순서 및 결합 방향에 대해 알아보자.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Tail Recursion 조건을 만족하지 않는 sum함수이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;sum([], 0).
&lt;&#x2F;span&gt;&lt;span&gt;sum([H|T], S) :- sum([T|S1], S1), S is H + S1.	
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드의 &lt;code&gt;is&lt;&#x2F;code&gt;를 &lt;code&gt;=&lt;&#x2F;code&gt;로 수정하여 연산 순서를 확인하면 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;isPredecateTest.png&quot; alt=&quot;predecate test&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 같은 프로그램을 Tail Recursion 조건을 만족하도록 하여 구현한 코드이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;sum([], Si, Si).
&lt;&#x2F;span&gt;&lt;span&gt;sum([H|T], Acc, So) :-
&lt;&#x2F;span&gt;&lt;span&gt;	Acc1 is H + Si,
&lt;&#x2F;span&gt;&lt;span&gt;	sum(T, Acc1, So).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드의 &lt;code&gt;is&lt;&#x2F;code&gt;를 &lt;code&gt;=&lt;&#x2F;code&gt;로 수정하여 연산 순서를 확인하면 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;tailAssign.png&quot; alt=&quot;tailAssign&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Tail Recursion의 경우 Top-Down으로 연산한다. Tail Recursion이 아닌 Recursion의 경우 Bottom-up으로 연산한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;swi-prolog-debugging&quot;&gt;SWI-Prolog Debugging&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;4-port-model-of-prolog-execution&quot;&gt;4 Port Model of prolog Execution&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;fourPortModel.png&quot; alt=&quot;Four Port Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;위 그림은 Prolog의 프로그램이 실행되는 상태 전이 모형을 나타낸 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Call&lt;&#x2F;code&gt; : 프로그램이 처음 호출되었을 대 사용되는 포트&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Exit&lt;&#x2F;code&gt;:  프로그램이 진행되어 실행이 종료될 때 사용되는 포트&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Fail&lt;&#x2F;code&gt; : 프로그램 실행 중 완전히 실패(failure)한 경우 사용되는 포트&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Redo&lt;&#x2F;code&gt; : failure한 경우 다른 정답을 찾으려 시도할 때 사용되는 포트&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;enable-debugging&quot;&gt;Enable Debugging&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;trace&#x2F;0&lt;&#x2F;code&gt; : 모든 포트에서 정지하도록 설정&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nottrace&#x2F;0&lt;&#x2F;code&gt; : 정지 설정을 끈다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;debug&#x2F;0&lt;&#x2F;code&gt; : 디버깅 모드를 활성화한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nodebug&#x2F;0&lt;&#x2F;code&gt; : 디버깅 모드를 종료한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;debugging-example&quot;&gt;Debugging Example&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 짝수인지 판별하는 결함이 있는 Prolog 코드이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;isEven(2).
&lt;&#x2F;span&gt;&lt;span&gt;isEven(X) :-
&lt;&#x2F;span&gt;&lt;span&gt;	Y is X - 2,
&lt;&#x2F;span&gt;&lt;span&gt;	isEven(Y).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드의 입력으로 짝수가 주어졌을 때는 프로그램이 정상적으로 동작한다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;noBugDebugging.png&quot; alt=&quot;isEven(4) Nobug&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;하지만 입력으로 홀수가 주어졌을 때 프로그램이 종료되지 않는 문제가 있다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;isEven5Bug.png&quot; alt=&quot;isEven(5) Bug&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;버그를 수정하기 위해 &lt;code&gt;fail&#x2F;0&lt;&#x2F;code&gt;을 사용하여 홀수에 대한 처리를 해 주자.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;isEven(1) :- fail.
&lt;&#x2F;span&gt;&lt;span&gt;isEven(2).
&lt;&#x2F;span&gt;&lt;span&gt;isEven(X) :-
&lt;&#x2F;span&gt;&lt;span&gt;	Y is X - 2,
&lt;&#x2F;span&gt;&lt;span&gt;	isEven(Y).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;하지만 여전히 종료되지 않고 계속해서 실행되는 문제가 있다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;isEven5BugRedo.png&quot; alt=&quot;isEven(5) Bug2&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이는 &lt;code&gt;fail&lt;&#x2F;code&gt;을 유도하지 않는 다른 정답에 대해 계속해서 탐색하기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로그램이 되추적을 중단시키도록 &lt;code&gt;cut&lt;&#x2F;code&gt;을 사용하도록 코드를 수정한다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;isEven(1) :-
&lt;&#x2F;span&gt;&lt;span&gt;	!, fail.
&lt;&#x2F;span&gt;&lt;span&gt;isEven(2).
&lt;&#x2F;span&gt;&lt;span&gt;isEven(X) :-
&lt;&#x2F;span&gt;&lt;span&gt;	Y is X - 2,
&lt;&#x2F;span&gt;&lt;span&gt;	isEven(Y).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cut&lt;&#x2F;code&gt;은 위와 같이 &lt;code&gt;!&lt;&#x2F;code&gt;으로 표기한다.&lt;&#x2F;li&gt;
&lt;li&gt;이제는 프로그램이 정상적으로 홀수에 대해서도 처리하는 것을 확인할 수 있다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;isEven5NoBug.png&quot; alt=&quot;isEven(5) No Bug&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;n-queen-s-problem-with-prolog&quot;&gt;N-Queen&#x27;s Problem with Prolog&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;다른 프로그래밍 언어에 비해 매우 간단하게 이 문제를 해결할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 N-Queen&#x27;s Problem을 해결하는 Prolog코드이다.&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;queens(N, Qs) :-
&lt;&#x2F;span&gt;&lt;span&gt;	range(1, N, Ns),
&lt;&#x2F;span&gt;&lt;span&gt;	permutation(Ns, Qs),
&lt;&#x2F;span&gt;&lt;span&gt;	safe(Qs).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;safe([]).
&lt;&#x2F;span&gt;&lt;span&gt;safe([Q|Qs]) :-
&lt;&#x2F;span&gt;&lt;span&gt;	safe(Qs),
&lt;&#x2F;span&gt;&lt;span&gt;	not(attack(Q, Qs)).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;attack(X, Xs) :-
&lt;&#x2F;span&gt;&lt;span&gt;	attack(X, 1, Xs).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;attack(X, N, [Y|_]) :-
&lt;&#x2F;span&gt;&lt;span&gt;	X is Y + N; X is Y - N.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;attack(X, N, [_|Ys]) :-
&lt;&#x2F;span&gt;&lt;span&gt;	N1 is N + 1,
&lt;&#x2F;span&gt;&lt;span&gt;	attack(X, N1, Ys).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;range(N, N, [N]).
&lt;&#x2F;span&gt;&lt;span&gt;range(M, N, [M|Ns]) :-
&lt;&#x2F;span&gt;&lt;span&gt;	M &amp;lt; N,
&lt;&#x2F;span&gt;&lt;span&gt;	M1 is M + 1,
&lt;&#x2F;span&gt;&lt;span&gt;	range(M1, N, Ns).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 프로그램을 이용하여 4-Queen, 6-Queen에 대해 정답을 출력한 결과이다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;nqueensProlog.png&quot; alt=&quot;NQueens Prolog&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Backtracking - 0-1 Knapsack Problem</title>
		<published>2023-05-03T00:00:00+00:00</published>
		<updated>2023-05-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/backtracking-0-1-knapsack-problem/" type="text/html"/>
		<id>https://js970.github.io/backtracking-0-1-knapsack-problem/</id>
		<content type="html">&lt;h2 id=&quot;backtracking-0-1-knapsack-problem&quot;&gt;Backtracking - 0-1 Knapsack Problem&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;0-1 Knapsack problem에 대해서는 &lt;a href=&quot;https:&#x2F;&#x2F;js970.github.io&#x2F;greedy-algorithm&#x2F;&quot;&gt;Greedy Algorithm&lt;&#x2F;a&gt;에서 다루었다. 본 단에서는  Backtracking 알고리즘을 사용하여 0-1 Knapsack problem을 해결하는 방법에 대해 다룬다. 가방에 최대 담을 수 있는 무게는 16, 각 물건들의 가격과 무게는 (40$, 2), (30$, 5), (50$, 10), (10$, 5) 이다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;promising-function&quot;&gt;Promising Function&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;profit&lt;&#x2F;code&gt; : 현재 노드까지 가방에 넣은 보석을 판 값의 합&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;&#x2F;code&gt; : 현재 노드까지 가방에 넣은 보석의 무게 합&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;total_weight&lt;&#x2F;code&gt; : &lt;code&gt;weight&lt;&#x2F;code&gt; + 무게를 초과하지 않는 선에서 앞으로 담을 수 있는 보석의 무게 합&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;bound&lt;&#x2F;code&gt; : &lt;code&gt;profit&lt;&#x2F;code&gt; + 무게를 초과하지 않는 선에서 앞으로 담을 수 있는 보석을 판 값의 합 + 담을 수 없는 보석의 weight 당 profit을 계산하여 무게를 초과하지 않는 선에서 이를 추가한 값.
&lt;ul&gt;
&lt;li&gt;애초에 0-1 Knapsack problem에서 보석을 쪼개는 행위는 허용되지 않지만, 보석을 쪼갤 수 있다고 가정하고 획득 가능한 최대 &lt;code&gt;profit&lt;&#x2F;code&gt;상한을 계산한 것이 &lt;code&gt;bound&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 의사 코드는 위의 조건을 고려하여 작성한 promising function이다.&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;promising&lt;&#x2F;span&gt;&lt;span&gt;(index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	index j, k;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; totweight;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; bound;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(weight &amp;gt; W) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		j = i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		bound = profit;
&lt;&#x2F;span&gt;&lt;span&gt;		totweight = weight;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(j &amp;lt;= n &amp;amp;&amp;amp; totweight + w[j] &amp;lt; W){
&lt;&#x2F;span&gt;&lt;span&gt;			totweight += w[j];
&lt;&#x2F;span&gt;&lt;span&gt;			bound += p[j];
&lt;&#x2F;span&gt;&lt;span&gt;			j++;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		k = j;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(k &amp;lt;= n) bound += (W - totweight) * p[k] &#x2F; w[k];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; bound &amp;gt; maxprofit;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;space-state-tree&quot;&gt;Space State Tree&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;knapsackBacktracking.png&quot; alt=&quot;0-1 Knapsack Backtracking&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;노드에 표시된 정보는 위에서부터 현재 노드 상태에서의 &lt;code&gt;profit&lt;&#x2F;code&gt;, &lt;code&gt;weight&lt;&#x2F;code&gt;, &lt;code&gt;bound&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 promising함수를 이용하여 DFS로 Space State Tree를 Pruning하다 보면 정답(파란색 노드)을 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Backtracking을 통하여 12번의 탐색으로 본 0-1 Knapsack Problem의 해를 구할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TODO 2023-05-31
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Backtracking - N-Queen&#x27;s Problem</title>
		<published>2023-05-03T00:00:00+00:00</published>
		<updated>2023-05-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/backtracking-n-queen-s-problem/" type="text/html"/>
		<id>https://js970.github.io/backtracking-n-queen-s-problem/</id>
		<content type="html">&lt;h2 id=&quot;backtracking-n-queen-s-problem&quot;&gt;Backtracking - N-queen&#x27;s problem&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;n-queen-s-problem&quot;&gt;N-Queen&#x27;s Problem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;N x N의 체스보드에서 N개의 퀸들이 서로를 공격하지 않도록 배치시키는 방법을 구하는 문제&lt;&#x2F;li&gt;
&lt;li&gt;Sequence : N개의 Queen이 배치되는 위치에 대한 sequence&lt;&#x2F;li&gt;
&lt;li&gt;Set : Queen이 위치 가능한 N*N의 공간&lt;&#x2F;li&gt;
&lt;li&gt;Criterion : 어떠한 두 개의 Queen도 같은 행, 열, 대각선상에 존재할 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-queens-problem-solution&quot;&gt;4-Queens Problem Solution&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;chessboard4.png&quot; alt=&quot;4 * 4 Chessboard&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;아래는 위 chessboard에 대해 Backtracking을 적용하여 문제를 해결하는 과정을 도식으로 나타낸 것이다.
&lt;ol&gt;
&lt;li&gt;첫 번째 Queen배치, F = {(1, 1), $\phi$}&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;nqueens1.png&quot; alt=&quot;N-Queens 1&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;F에서 most promising한 노드 선택(1, 1), 이 노드에 대해 subproblem configuration으로 &lt;code&gt;expand&lt;&#x2F;code&gt;되어 생성된 모든 노드에 대해 &lt;code&gt;criterion&lt;&#x2F;code&gt;검사. 검사 결과 &lt;code&gt;non-promising&lt;&#x2F;code&gt;이면 discard한다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;nqueens2.png&quot; alt=&quot;N-Queens 2&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;(2, 3)의 경우 &lt;code&gt;non-promising&lt;&#x2F;code&gt;이 아니므로 F에 추가한다. 다시 subproblem configuration으로 expand 및 criterion검사를 수행한다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;nqueens3.png&quot; alt=&quot;N-Queens 3&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;(2, 3)의 모든 child가 &lt;code&gt;non-promising&lt;&#x2F;code&gt;이므로 Backtracking을 통해 (1, 1)까지 돌아간다. 이후 (1, 1)에서 탐색되지 않은 promising child인 (2, 4)에 대해 2의 과정을 반복한다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;nqueens4.png&quot; alt=&quot;N-Queens 4&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;4에 이어서(2, 4)에 대해 알고리즘을 수행한다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;nqueens5.png&quot; alt=&quot;N-Queens 5&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;(2,4)의 child중 promising child인 (3, 2)에 대해 알고리즘을 수행한다. 이 결과 (4, 2)가 criterion check에 의해 정답임이 판별되므로 이때의 경로 {(1, 1), (2, 4), (3, 2), (4, 2)}를 반환한다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;nqueens6.png&quot; alt=&quot;N-Queens 6&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 예시를 통해 확인할 수 있듯이, (1, 1)을 시작 노드로 가지는 4-Queens Problem의 해를 Backtracking알고리즘을 사용하면 &lt;code&gt;non-promising&lt;&#x2F;code&gt;노드의 child에 대한 조사를 생략 가능하므로 전수 조사 없이 해결 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;(1, 2), (1, 3), (1, 4)를 시작 노드로 설정하면 4-Queens Problem의 모든 해를 구할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TODO 2023-05-30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Backtracking - Sum of Subset Problem</title>
		<published>2023-05-03T00:00:00+00:00</published>
		<updated>2023-05-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/backtracking-sum-of-subset-problem/" type="text/html"/>
		<id>https://js970.github.io/backtracking-sum-of-subset-problem/</id>
		<content type="html">&lt;h2 id=&quot;backtracking-sum-of-subset&quot;&gt;Backtracking - sum of subset&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;sum-of-subset-problem&quot;&gt;Sum of Subset Problem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;집합 S는 s1, s2, ... , sn의 원소로 이루어져 있다.&lt;&#x2F;li&gt;
&lt;li&gt;W는 자연수이다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 S의 부분집합의 원소의 합이 W가 되는 모든 경우를 찾아라	&lt;&#x2F;li&gt;
&lt;li&gt;n개의 수를 원소로 가지는 집합에서 원소의 합이 W가 되도록 하는 부분집합을 구하는 문제&lt;&#x2F;li&gt;
&lt;li&gt;블랙젝을 생각하면 확 와닿는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;promising-function&quot;&gt;Promising Function&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 Sum of Subset문제를 해결하기 위한 promising function 의사 코드이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;promising&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(weight + total &amp;gt;= W) &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; case 1
&lt;&#x2F;span&gt;&lt;span&gt;	(weight == W || weight + S[idx+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt;= W); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; case 2
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;weight : 현재까지 선택한 모든 원소의 합&lt;&#x2F;li&gt;
&lt;li&gt;total : 아직 선택하지 않은 모든 원소의 합&lt;&#x2F;li&gt;
&lt;li&gt;S[idx] : S를 오름차순으로 정렬했을 때의 idx+1번째 원소&lt;&#x2F;li&gt;
&lt;li&gt;W : 부분집합의 합이 이 값이 된다면 찾고 있는 경우이다.&lt;&#x2F;li&gt;
&lt;li&gt;case 1 : weight + total이 W보다 작다면 W에 도달할 수 없는 경우 배제한다.&lt;&#x2F;li&gt;
&lt;li&gt;case 2 : weight값이 W를 초과하는 경우에 대해 배제한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;state-space-tree&quot;&gt;State Space Tree&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;집합 S의 원소를 오름차순으로 정렬한다.&lt;&#x2F;li&gt;
&lt;li&gt;오름차순으로 정렬된 S의 원소에 대해 포함시킬지, 미포함시킬지의 여부를 트리로 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;오름차순으로 트리를 구성하는 이유는 작은 원소를 먼저 생각하여 유망성을 판단하는 것이 유리하기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;앞서 구한 promising function을 사용하여 state space tree를 promising function이 true인 노드의 서브트리에 대해서만 재귀적으로 DFS를 통해 탐색한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 탐색 과정을 도식으로 나타낸 것이다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;backtracking_sumofsubset.png&quot; alt=&quot;State Space Diagram&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Deadlock(2)</title>
		<published>2023-05-03T00:00:00+00:00</published>
		<updated>2023-05-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/deadlock-2/" type="text/html"/>
		<id>https://js970.github.io/deadlock-2/</id>
		<content type="html">&lt;h2 id=&quot;deadlock-handling-deadlock-prevention&quot;&gt;Deadlock Handling - Deadlock Prevention&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;deadlock condition중 최소 한 가지 이상의 조건을 만족하지 않도록 설정하여 deadlock을 예방하는 방법&lt;&#x2F;li&gt;
&lt;li&gt;Computational Overhead가 너무 커서 실제로 사용하지는 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;본 절에서는 방법론에 대해서만 다룬다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mutual-exclusion&quot;&gt;Mutual Exclusion&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;shared resources를 require하지 않고 nonsharable resource만 hold하는 방법으로 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 Mutual Exclusion을 부정하는 방법으로는 deadlock prevent를 할 수 없다.
&lt;ul&gt;
&lt;li&gt;일부 자원의 경우 애초부터 non-sharable이기 때문&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hold-and-wait&quot;&gt;Hold and Wait&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;어떤 프로세스든 자원을 request할 때는 어떠한 resource도 hold하지 않는 것을 보장한다.&lt;&#x2F;li&gt;
&lt;li&gt;오버헤드가 너무 크다.(Low resource utilization문제가 있다)&lt;&#x2F;li&gt;
&lt;li&gt;starvation이 발생할 가능성이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;no-preemption&quot;&gt;No Preemption&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;어떤 프로세스가 자원을 holding하고 있으면서 request할 때, 곧바로 할당받는 것이 아니라 모든 resource를  release한 후에 자원을 할당받는다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스는 모든 자원을 확보한 후에야 실행 가능하다.
&lt;ul&gt;
&lt;li&gt;결과적으로 한번의 request를 통해 필요한 자원을 확보애햐 한다&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Preemptive동작을 하는 것과 동일한 효과이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;circular-wait&quot;&gt;Circular Wait&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;waiting이 circular cycle을 형성하지 않도록 한다.&lt;&#x2F;li&gt;
&lt;li&gt;process, resource가 increasing order로만 request가능하도록 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;P3는 P1이 점유중인 자원에 대해 request할 수 없는 rule을 만들어서 구현하는 방식이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;deadlock-handling-deadlock-avoidance&quot;&gt;Deadlock Handling - Deadlock Avoidance&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Deadlock Avoidance를 구현하기 위해서 시스템은 아래와 같은 사전 정보를 필요로 한다.
&lt;ul&gt;
&lt;li&gt;Resource currently available&lt;&#x2F;li&gt;
&lt;li&gt;The resources currently allocated to each process&lt;&#x2F;li&gt;
&lt;li&gt;The future requests and releases of each process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Deadlock Avoidance는 앞서 설명한 사전 정보들을 이용해서 circular-wait condition을 형성하는 자원 할당이 이루어지지 않도록 dynamically examines하는 알고리즘이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;safe-state&quot;&gt;Safe State&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;데드락을 발생시키지 않는 상태
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unsafe&lt;&#x2F;code&gt;의 경우 데드락이 생길 수도 있고, 생기지 않을 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로세스가 자원 할당을 요청할 때, 시스템은 immediate allocation이 시스템의 &lt;code&gt;safe state&lt;&#x2F;code&gt;에 영향을 미칠지를 판단해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 시스템의 모든 프로세스에 대해 P0, P1, P2, ..., Pn의 sequence가 존재한다면 시스템은 &lt;code&gt;safe State&lt;&#x2F;code&gt;에 있다고 한다.
&lt;ul&gt;
&lt;li&gt;시스템의 모든 프로세스 request에 대해 데드락을 발생시키지 않는 프로세스의 sequence가 있다면 시스템은&lt;code&gt;safe state&lt;&#x2F;code&gt; 이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;deadlock-avoidance-strategy&quot;&gt;Deadlock Avoidance Strategy&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Deadlock Avoidance를 위해서는 아래와 같은 사항을 생각해야 한다.
&lt;ul&gt;
&lt;li&gt;현재 시점에서 &lt;code&gt;safe state&lt;&#x2F;code&gt;여야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;request가 온 이후에도 &lt;code&gt;safe state&lt;&#x2F;code&gt;여야 한다.
&lt;ul&gt;
&lt;li&gt;request가 온 것으로 가정(pretend)하고 deadlock이 발생할지 판단한다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 미래에 올 request를 알고 있기 때문에 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;자원이 한 개의 인스턴스로만 이루어질 때는 &lt;code&gt;resource-allocation graph&lt;&#x2F;code&gt;를 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;자원이 여러 개의 인스턴스 타입을 가질 때는 &lt;code&gt;Banker&#x27;s Algorithm&lt;&#x2F;code&gt;을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;resource-allocation-graph-scheme&quot;&gt;Resource-Allocation graph Scheme&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;자원이 한 개의 인스턴스로만 이루어질 경우 Deadlock Avoidance를 위해 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;claim edge&lt;&#x2F;code&gt; : Pi가 Rj를 request할 지도 모른다는 것을 점선으로 표시한다.
&lt;ul&gt;
&lt;li&gt;할당된 자원이 해제되면 &lt;code&gt;assignment edge&lt;&#x2F;code&gt;는 &lt;code&gt;claim edge&lt;&#x2F;code&gt;로 변경된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;request edge&lt;&#x2F;code&gt; : 실제로 프로세스가 자원을 request할 경우
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;claim edge&lt;&#x2F;code&gt;의 Pi가 실제로 Rj를 request하면 &lt;code&gt;request edge&lt;&#x2F;code&gt;로 변경된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;assignment edge&lt;&#x2F;code&gt; : 자원이 실제로 프로세스에 할당된 경우
&lt;ul&gt;
&lt;li&gt;request에 따라 자원이 할당되면 &lt;code&gt;request edge&lt;&#x2F;code&gt;는 &lt;code&gt;assignment edge&lt;&#x2F;code&gt;로 변경된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;자원 할당은 claim -&amp;gt; request -&amp;gt; assignment의 과정을 거친다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;graphAvoidance.png&quot; alt=&quot;Resource-Allocation Graph Scheme&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;항상 claim을 처리하는 것이 아닌, claim 요청을 통해 cycle이 생성되지 않는 경우에만 request를 통해 assignment를 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;잠정적으로 deadlock을 발생시킬 수 있는 cycle이 발생하면 request를 처리하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;위 도식에서 P2는 R2를 claim하지만, 이 &lt;code&gt;claim edge&lt;&#x2F;code&gt;가 &lt;code&gt;request edge&lt;&#x2F;code&gt;로 변경되면 cycle이 생성되므로 이는 request되지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;banker-s-algorithm&quot;&gt;Banker&#x27;s Algorithm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;자원이 여러 개의 인스턴스 타입으로 이루어질 경우 Deadlock Avoidance를 위해 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;Banker&#x27;s Algorithm 용어 정리
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;&#x2F;code&gt; : 프로세스의 개수&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;m&lt;&#x2F;code&gt; : resource 인스턴스의 개수&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;available[j] = k&lt;&#x2F;code&gt; : Rj는 k개의 인스턴스에 할당 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Max[i, j] = k&lt;&#x2F;code&gt; : Pi는 최대 Rj에 최대 k개의 인스턴스를 요청할 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Allocation[i, j] = k&lt;&#x2F;code&gt; : Pi는 Rj로부터 k개의 인스턴스를 할당받은 상태이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Need[i, j] = k&lt;&#x2F;code&gt; : Pi는 task 수행을 완료하기 위해 Rj에 k개(이상)의 인스턴스를 요청할 것이다.
&lt;ul&gt;
&lt;li&gt;Need[i, j] = Max[i, j] - Allocation[i , j]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Safety Algorithm
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Work&lt;&#x2F;code&gt; : m크기의 벡터, &lt;code&gt;Finish&lt;&#x2F;code&gt; : n크기의 백터. 
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Work&lt;&#x2F;code&gt; = &lt;code&gt;Available&lt;&#x2F;code&gt;, &lt;code&gt;Finish[i] = false&lt;&#x2F;code&gt;로 초기화한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Finish[i] == false&lt;&#x2F;code&gt; 이고, &lt;code&gt;Need[i] &amp;lt;= Work&lt;&#x2F;code&gt;인 i를 찾는다. 만약 이러한 i가 없다면 4로 간다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Work&lt;&#x2F;code&gt; = &lt;code&gt;Work&lt;&#x2F;code&gt; + &lt;code&gt;Allocation[i]&lt;&#x2F;code&gt;, &lt;code&gt;Finish[i] = true&lt;&#x2F;code&gt;, 2로 돌아간다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 모든 i에 대해&lt;code&gt;Finish[i] == true&lt;&#x2F;code&gt; 라면 시스템은 &lt;code&gt;safe state&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Resource-Request Algorithm for Pi
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Request[i, j]&lt;&#x2F;code&gt; : Pi의 Rj로의 request vector
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Request[i, j] = k&lt;&#x2F;code&gt;라면 Pi가 Rj의 인스턴스 k개를 요청하는 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;만약 &lt;code&gt;Request[i, j] &amp;lt;= Need[i]&lt;&#x2F;code&gt; 라면 2로 넘어간다. 이외의 경우 에러를 발생시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 &lt;code&gt;Request[i, j] &amp;lt;= Available[j]&lt;&#x2F;code&gt; 라면 3으로 넘어간다. 
&lt;ul&gt;
&lt;li&gt;이외의 경우 자원 할당이 불가능하므로 대기해야 한다. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Pi에 자원 할당을 하는 것처럼 아래와 같이 시뮬레이션 한다.(pretend to allocate)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Available[j]&lt;&#x2F;code&gt; = &lt;code&gt;Available[j]&lt;&#x2F;code&gt; - &lt;code&gt;Request[i]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Allocation[i]&lt;&#x2F;code&gt; = &lt;code&gt;Allocation[i]&lt;&#x2F;code&gt; + &lt;code&gt;Request[i]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Need[i]&lt;&#x2F;code&gt; = &lt;code&gt;Need[i]&lt;&#x2F;code&gt; - &lt;code&gt;Request[i]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;위의 과정을 모든 프로세스에 대헤 진행하여 safe하다면 Pi에 자원을 할당한다.&lt;&#x2F;li&gt;
&lt;li&gt;unsafe라면 Pi는 선행 프로세스가 자원 할당을 해제할 때까지 대기해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Banker&#x27;s Algorithm 동작
&lt;ol&gt;
&lt;li&gt;Request에 대해 &lt;code&gt;Resource-Request Algorithm&lt;&#x2F;code&gt;을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Safety Algorithm&lt;&#x2F;code&gt;을 수행하여 &lt;code&gt;safe state&lt;&#x2F;code&gt;를 검사한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Deadlock Avoidance에서는 &lt;code&gt;Need&lt;&#x2F;code&gt;정보를 바탕으로 &lt;code&gt;safe sequence&lt;&#x2F;code&gt;가 존재하는지 검사한다. 
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;safe sequence&lt;&#x2F;code&gt; 가 존재한다면 Deadlock Avoidance가 되는 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;safe sequence&lt;&#x2F;code&gt;가 존재하지 않는다면 &lt;code&gt;unsafe&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;deadlock-handling-deadlock-detection&quot;&gt;Deadlock Handling - Deadlock Detection&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;앞서 살펴본 Deadlock Prevention, Deadlock Avoidance는 오버헤드가 너무 커서 실제로는 사용하지 않는 Deadlock 해결 방법이다.&lt;&#x2F;li&gt;
&lt;li&gt;실제로는 Deadlock을 허용하고, 이를 탐지하여 처리하는 방법인 Deadlock Detection을 사용한다.
&lt;ul&gt;
&lt;li&gt;이 방법 역시 오버헤드가 적지는 않지만 앞선 두 방법보다는 확실히 현실적이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;자원이 한 개의 인스턴스로 이루어진 경우 &lt;code&gt;request-allocation graph&lt;&#x2F;code&gt;를 변형한 &lt;code&gt;wait-for graph&lt;&#x2F;code&gt;를 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;자원이 여러 개의 인스턴스로 이루어진 경우 &lt;code&gt;변형된 banker&#x27;s algorithm&lt;&#x2F;code&gt;을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;wait-for-graph&quot;&gt;Wait-for graph&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;waitForGraph.png&quot; alt=&quot;Wait - For Graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;앞서 다루었던 &lt;code&gt;resource-allocation graph&lt;&#x2F;code&gt;를 통해 &lt;code&gt;wait-for graph&lt;&#x2F;code&gt;를 만들 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;resource&lt;&#x2F;code&gt; 를 고려하지 않고 프로세스 간의 관계만 고려한다.
&lt;ul&gt;
&lt;li&gt;자원이 한 개의 인스턴스로 이루어졌으므로 이것이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;variant-of-the-banker-s-algorithm&quot;&gt;Variant of the Banker&#x27;s Algorithm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Deadlock Avoidance가 목적이 아니라 Deadlock Detection이 목적이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Need[i]&lt;&#x2F;code&gt;에 대해서는 생각하지 않고, 순간 순간의 &lt;code&gt;Request[i]&lt;&#x2F;code&gt;를 처리할 수 있는지 판단한다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 &lt;code&gt;Request&lt;&#x2F;code&gt;가 처리되는 &lt;code&gt;sequence&lt;&#x2F;code&gt;가 존재한다면 해당 시스템에서는 Deadlock이 탐지되지 않은 것이다.
&lt;ul&gt;
&lt;li&gt;이는 &lt;code&gt;Request&lt;&#x2F;code&gt;의 순서를 다루는 것이므로 &lt;code&gt;safe sequence&lt;&#x2F;code&gt;와는 다른 개념이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;만약 &lt;code&gt;Work[i]&lt;&#x2F;code&gt;상태에서 처리할 수 있는 &lt;code&gt;Request[i]&lt;&#x2F;code&gt;가 없다면, &lt;code&gt;Finish == false&lt;&#x2F;code&gt;인 모든 프로세스가 Deadlock을 유발하는 프로세스이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Finish == false&lt;&#x2F;code&gt;로 Deadlock을 유발하는 프로세스들에 대해서 &lt;code&gt;Process Termination&lt;&#x2F;code&gt;혹은 &lt;code&gt;Resource Preemption&lt;&#x2F;code&gt;을 통해 Deadlock Recovery를 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;recovery-shceme-process-termination&quot;&gt;Recovery shceme : Process Termination&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Deadlock이 Detection된 경우 프로세스를 종료시키는 방법&lt;&#x2F;li&gt;
&lt;li&gt;한 번에 프로세스를 하나씩 abort하면서 deadlock이 없어지는지(cycle이 없어지는지)확인한다.&lt;&#x2F;li&gt;
&lt;li&gt;경우에 따라 다르지만 아래와 같은 기준으로 abort순서를 정한다.
&lt;ul&gt;
&lt;li&gt;프로세스의 priority&lt;&#x2F;li&gt;
&lt;li&gt;프로세스가 얼마나 오래 실행되었는지, 혹은 실행시간이 얼마나 남았는지&lt;&#x2F;li&gt;
&lt;li&gt;프로세스가 사용한 자원의 양&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;recovery-scheme-resource-preemption&quot;&gt;Recovery Scheme : Resource Preemption&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;victim&lt;&#x2F;code&gt;을 선택한다.(minimize cost)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;safe state&lt;&#x2F;code&gt;로 돌아간 뒤 해당 상태에서 다시 프로세스를 실행시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;이 과정에서 cost를 줄이는 방향으로 &lt;code&gt;victim&lt;&#x2F;code&gt;을 선정하게 되면 특정 프로세스가 계속 &lt;code&gt;victim&lt;&#x2F;code&gt;이 되어 &lt;code&gt;starvation&lt;&#x2F;code&gt;문제가 발생할 수 있다.
&lt;ul&gt;
&lt;li&gt;딱히 권장하는 방법은 아니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Backtracking</title>
		<published>2023-05-01T00:00:00+00:00</published>
		<updated>2023-05-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/backtracking/" type="text/html"/>
		<id>https://js970.github.io/backtracking/</id>
		<content type="html">&lt;h2 id=&quot;backtracking&quot;&gt;Backtracking&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Backtracking을 통해 미로에서 길을 찾는다고 생각해 보자.
&lt;ol&gt;
&lt;li&gt;Dead End에 도달할 때까지 경로를 따라간다.&lt;&#x2F;li&gt;
&lt;li&gt;Dead End에 도달하면 Fork지점까지 되돌아간다(Backtrack).&lt;&#x2F;li&gt;
&lt;li&gt;1에서 선택한 경로와 다른 경로를 선택한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;만약 어떤 경로가 Dead End로 도달할 것을 미리 알 수 있는 sign이 있다면?
&lt;ul&gt;
&lt;li&gt;특히 이런 sign이 경로의 초반부에서 발견될수록 많은 탐색 시간을 절약할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;backtracking-technique&quot;&gt;Backtracking Technique&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;어떤 집합에서 object의 sequence를 선택하는 문제를 해결하는데 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;이때, sequence는 어떠한 기준(criterion)을 만족해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;DFS가 사용된다.(BFS를 사용할 수도 있다.)&lt;&#x2F;li&gt;
&lt;li&gt;전치순회(pre order traversal)를 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;0-1 knapsack problem등 NP-complete문제를 효율적으로 해결하는데 사용된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;backtracking-vs-dynamic-programming&quot;&gt;Backtracking vs Dynamic Programming&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic programming은 Solution의 부분집합이 생성된다.&lt;&#x2F;li&gt;
&lt;li&gt;Backtracking은 생성되지 않아야 할 부분집합을 결정하는 technique이다.&lt;&#x2F;li&gt;
&lt;li&gt;Backtracking은 Large Instance 문제 해결에 효과적이다(항상 해결 가능하지는 않다).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;backtracking-strategy&quot;&gt;Backtracking Strategy&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Solution으로 도달하지 못하는 노드임이 확정되면, 부모노드를 통해 search되지 않은 child를 가지는 노드까지 되돌아간다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;non-promising node&lt;&#x2F;code&gt; : 이 노드에서는 solution에 도달할 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;promising node&lt;&#x2F;code&gt; : solution에 도달할 확률이 존재한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Backtracking에서는 &lt;code&gt;State Space Tree&lt;&#x2F;code&gt;를 &lt;code&gt;Pruning&lt;&#x2F;code&gt;한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pruning&lt;&#x2F;code&gt; 이란 &lt;code&gt;State Space Tree&lt;&#x2F;code&gt;를 순회하는 것을 말한다.
&lt;ul&gt;
&lt;li&gt;보통은 DFS를 이용하여 순회한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pruning&lt;&#x2F;code&gt; 중 어떤 노드가 &lt;code&gt;non-promising&lt;&#x2F;code&gt;임이 확인되면 Backtracking을 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Backtracking의 Search Space인 &lt;code&gt;State Space Tree&lt;&#x2F;code&gt;에서 configuration(x, y)와 Frontier Set F를 이용하여 Backtracking을 수행한다.
&lt;ul&gt;
&lt;li&gt;Configuration(x, y)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;&#x2F;code&gt; : tree에서 search되지 않은 부분, 남아 있는 문제&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y&lt;&#x2F;code&gt; : 현재 노드까지 도달하기 위해 선택한 노드의 집합&lt;&#x2F;li&gt;
&lt;li&gt;초기 configuration은 ($x$, $\phi$)로 설정된다.
&lt;ul&gt;
&lt;li&gt;x는 original problem instance이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;configuration은 additional choice에 따라 새로운 subproblem configuration으로 확장된다.&lt;&#x2F;li&gt;
&lt;li&gt;Dead End에서는 Backtracking을 통해 다른 configuration으로 돌아간 뒤 탐색을 이어간다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Frontier Set F
&lt;ul&gt;
&lt;li&gt;configuration의 집합이다.&lt;&#x2F;li&gt;
&lt;li&gt;탐색 대기 노드의 집합으로 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;DFS를 이용한 Backtracking에서는 Stack으로 구현되며, BFS를 이용할 경우 Queue로 구현된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;backtracking-procedure&quot;&gt;Backtracking Procedure&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;의사 코드를 통해 Backtracking Algorithm이 어떻게 구현되는지 알아보자.&lt;pre data-lang=&quot;pesudo&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-pesudo &quot;&gt;&lt;code class=&quot;language-pesudo&quot; data-lang=&quot;pesudo&quot;&gt;&lt;span&gt;Algorithm Backtracking(x):
&lt;&#x2F;span&gt;&lt;span&gt;	input(x) : A problem instance x for hard problem
&lt;&#x2F;span&gt;&lt;span&gt;	output : soution for problem or &amp;quot;no solution&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;	F &amp;lt;- {(x, 0)}
&lt;&#x2F;span&gt;&lt;span&gt;	while (F!= 0) do
&lt;&#x2F;span&gt;&lt;span&gt;		F에서 가장 promising한 configuration을 선택한다.
&lt;&#x2F;span&gt;&lt;span&gt;		configuration을 subproblem configurtaion으로 확장한다.
&lt;&#x2F;span&gt;&lt;span&gt;		확장된 configurations에 대해 simple consistency check을 수행한다.
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;quot;Solution Found&amp;quot; : return configuration(xi, yi)
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;quot;Dead end&amp;quot; : 해당 configuration을 버린다(discard)
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;quot;Continue&amp;quot; : F &amp;lt;- F + (xi, yi)
&lt;&#x2F;span&gt;&lt;span&gt;	end
&lt;&#x2F;span&gt;&lt;span&gt;	return &amp;quot;no solution&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이를 실제로 적용하기 위해서 아래의 사항들에 대한 정의가 필요하다.
&lt;ol&gt;
&lt;li&gt;Frontier Set F로부터 The most promising configuration을 선택하는 방법에 대한 정의&lt;&#x2F;li&gt;
&lt;li&gt;configuration(x, y)를 expend 하여 subproblem configuration을 만드는 방법에 대한 정의
&lt;ul&gt;
&lt;li&gt;확장을 통해 모든 feasible configuration을 생성 가능해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;simple consistency check에 대한 정의가 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;앞선 절에서 설명했듯이, Frontier set은 DFS의 경우 Stack으로 구현되며, BFS의 경우 Queue로 구현된다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 Backtracking과정을 시각적으로 표현한 것이다.
&lt;ul&gt;
&lt;li&gt;Example State Space Tree&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;backtracking_tree.png&quot; alt=&quot;Example State Space Tree&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;붉은  테두리의 노드는 &lt;code&gt;consistency check&lt;&#x2F;code&gt;결과 &lt;code&gt;non-promising&lt;&#x2F;code&gt;으로 확인되는 노드이다.&lt;&#x2F;li&gt;
&lt;li&gt;파란색 테두리의 노드는 &lt;code&gt;consistency check&lt;&#x2F;code&gt;결과 &lt;code&gt;promising&lt;&#x2F;code&gt;으로 판단되는 노드이다.&lt;&#x2F;li&gt;
&lt;li&gt;이외의 노드는 &lt;code&gt;Continue&lt;&#x2F;code&gt;를 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 트리에 대한 Backtracking중 Frontier Set F의 변화&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;frontier_set.png&quot; alt=&quot;Frontier Set F&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;F에서 stack pop된 튜플에 대해 &lt;code&gt;expend&lt;&#x2F;code&gt;를 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 결과 생성된 모든 subproblem configuration에 대해 &lt;code&gt;consistency check&lt;&#x2F;code&gt;를 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;consistency check의 결과에 따라 &lt;code&gt;discard&lt;&#x2F;code&gt;, &lt;code&gt;stack push&lt;&#x2F;code&gt;, &lt;code&gt;return&lt;&#x2F;code&gt;의 동작을 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이러한 방식으로 tree를 순회하면 stack의 특성상 왼쪽 노드보다 오른쪽 노드해 먼저 consistency check를 수행하게 된다. 하지만 backtracking은 결국 모든 상황에 대한 검사를 수행하기 때문에 최종적으로 정답을 탐색하는 데 문제는 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Deadlock(1)</title>
		<published>2023-05-01T00:00:00+00:00</published>
		<updated>2023-05-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/deadlock-1/" type="text/html"/>
		<id>https://js970.github.io/deadlock-1/</id>
		<content type="html">&lt;h2 id=&quot;deadlock-deadlock-conditions&quot;&gt;Deadlock - Deadlock conditions&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로세스는 한정적인 resource를 사용한다. 이때 다른 프로세스가 사용중인 resource를 요구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이 때 발생하는 문제에 대해 좀 더 직관적으로 살펴보기 위해 system model관점에서 살펴보자.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;system-model&quot;&gt;System Model&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;시스템은 &lt;code&gt;resource&lt;&#x2F;code&gt;와 &lt;code&gt;process&lt;&#x2F;code&gt;로 구성된다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resource&lt;&#x2F;code&gt;들은 Resource Type으로 분류한다.(R1, R2, R3, ... , Rm)&lt;&#x2F;li&gt;
&lt;li&gt;각 Resource Type들은 CPU cycle, Memory space, I&#x2F;O devices등 자원 타입을 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Resource Type Ri는 Wi개의 &lt;code&gt;instance&lt;&#x2F;code&gt;를 가질 수 잇다.
&lt;ul&gt;
&lt;li&gt;자원 종류별로 사용 가능한 &lt;code&gt;instance&lt;&#x2F;code&gt;개수가 제한된다.(Class-Object 개념으로 생각하자)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로세스들은 아래와 같은 과정으로 &lt;code&gt;resource&lt;&#x2F;code&gt;를 사용한다.
&lt;ul&gt;
&lt;li&gt;Request(자원 요청)&lt;&#x2F;li&gt;
&lt;li&gt;Use(자원 사용)&lt;&#x2F;li&gt;
&lt;li&gt;Release(자원 반납)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;deadlock&quot;&gt;deadlock&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A set of blocked processes each holding a resource and waiting to acquire a resource held by another process in the set&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;두 개의 프로세스가 자원을 보유(&lt;code&gt;held&lt;&#x2F;code&gt;)한 상태로 상대방의 자원을 &lt;code&gt;request&lt;&#x2F;code&gt;하고 있는 상황이 &lt;code&gt;deadlock&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;자원을 해제하지 않으면서 다른 프로세스에 의해 점유된 자원을 &lt;code&gt;request&lt;&#x2F;code&gt;하는 것이 &lt;code&gt;deadlock&lt;&#x2F;code&gt;의 원인이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;deadlock&lt;&#x2F;code&gt;을 해결하기 위해서는 &lt;code&gt;held&lt;&#x2F;code&gt;하고 있는 자원을 &lt;code&gt;release&lt;&#x2F;code&gt;하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;다음 장에서 설명할 4가지 deadlock conditions를 동시에 만족하면 deadlock이 발생할 가능성이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;deadlock-conditions&quot;&gt;Deadlock conditions&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래의 1, 2, 3, 4번 조건을 모두 만족한다면 deadlock이 발생할 가능성이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;하나의 프로세스만 하나의 자원을 사용할 수 있는 상황이다.(semaphore 등)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Hold and Wait&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;다른 프로세스에서 hold되어진 자원을 요청하고 이를 기다리는 상황이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;No Preemption&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;resource가 오직 resource를 hold하고 있는 프로세스의 release를 통해서만 회수된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Circular Wait&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 간 순환 구조를 형성하면서 대기중이다.&lt;&#x2F;li&gt;
&lt;li&gt;P1 -&amp;gt; P2 -&amp;gt; P3 -&amp;gt; P4 -&amp;gt; P1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;resource-allocation-graph&quot;&gt;Resource Allocation Graph&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 Resource Allocation Graph의 구성 요소 도식이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;resourceAllocationElements.png&quot; alt=&quot;Allocation Graph Consistents&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;그래프의 vertices는 두 가지 타입으로 구성된다
&lt;ul&gt;
&lt;li&gt;process(P0, P1, ..., Pm) : m개의 프로세스가 존재&lt;&#x2F;li&gt;
&lt;li&gt;resource(R0, R1, ..., Rn) : n개의 resource가 존재&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;그래프의 edge 역시 두 종류가 있다.
&lt;ul&gt;
&lt;li&gt;Request Edge : directed edge Pi -&amp;gt; Rj&lt;&#x2F;li&gt;
&lt;li&gt;Assignment Edge : directed edge Rj -&amp;gt; Pi&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;resource-allocation-graph-example1-no-deadlock&quot;&gt;Resource Allocation Graph Example1(No Deadlock)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;resourceAllocationGraphNoDeadlock.png&quot; alt=&quot;Resouurce Allocation Graph Example(No Deadlock)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;R1, R2, R3, R4는 mutex조건(mutual exclusion)을 만족한다고 가정하자.
&lt;ul&gt;
&lt;li&gt;위 그래프만으로는 알 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;hold and wait
&lt;ul&gt;
&lt;li&gt;P1은 R2를 hold하고 있으며 R1을 request하고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;P2는 R1을 hold하고 있으며 R3를 request하고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;P3의 경우 R3를 hold하고 있지만 resource를 request하고 있지 않다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;No Preemption조건 역시 그래프만으로는 확인할 수 없으므로 만족한다고 가정하자.&lt;&#x2F;li&gt;
&lt;li&gt;Circular Wait
&lt;ul&gt;
&lt;li&gt;circular wait을 만족하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;P1 -&amp;gt; R1 -&amp;gt; P2 -&amp;gt; R3 -&amp;gt; P3, R2 -&amp;gt; P2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;resource-allocation-graph-example2-deadlock&quot;&gt;Resource Allocation Graph Example2(Deadlock)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;resourceAllocationGraphDeadlock.png&quot; alt=&quot;Resource Allocation Graph with Deadlock&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;R1, R2, R3, R4는 mutual exclusion 조건을 만족한다고 가정하자.&lt;&#x2F;li&gt;
&lt;li&gt;Hold and Wait
&lt;ul&gt;
&lt;li&gt;P1, P2, P3모두 해당된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;No Preemption조건을 만족한다고 가정하자.&lt;&#x2F;li&gt;
&lt;li&gt;Circular Wait조건을 만족한다.
&lt;ul&gt;
&lt;li&gt;P1 -&amp;gt; R1 -&amp;gt; P2 -&amp;gt; R3 -&amp;gt; P3 -&amp;gt; R2 -&amp;gt; P1(P2)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;네 가지 조건을 만족하기 때문에 deadlock이 존재할 수 있고, 실제로도 있다.
&lt;ul&gt;
&lt;li&gt;네 가지 조건을 만족해도 deadlock이 없을 수 있다. 아래의 예시를 보자.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;resource-allocation-graph-example3-no-deadlock&quot;&gt;Resource Allocation Graph Example3(No Deadlock)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;resourceAllocationGraphCircleNoDeadlock.png&quot; alt=&quot;No Deadlock with deadlock conditions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;위 그래프는 deadlock condition의 네 가지 조건을 모두 만족한다. &lt;&#x2F;li&gt;
&lt;li&gt;하지만 실제로 deadlock은 발생하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 P4(또는 P2)가 자원을 release하면 P3가 R2에 접근하면서 Circular Cycle이 깨지게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;cycle은 P1과 P3가 형성하지만 P2, P4에 의해 cycle이 깨질 수 있으므로 deadlock이 발생하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;결국 Resource Allocation Graph를 통해서 확실히 알 수 있는 정보는 cycle유무를 통해 deadlock이 없다는 것을 확실히 할 수 있다는 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-05-01 수업정리</title>
		<published>2023-05-01T00:00:00+00:00</published>
		<updated>2023-05-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-5-1-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-5-1-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Review - SDLC&lt;&#x2F;li&gt;
&lt;li&gt;Review - White Box Testing&lt;&#x2F;li&gt;
&lt;li&gt;Black Box Testing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review-sdlc&quot;&gt;Review - SDLC&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;SDLC.png&quot; alt=&quot;SDLC&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;어느 정도의 규모가 있는 조직에서는 implementation을 담당하는 개발자, 설계를 검토하는 설계자, PM이 모두 따로 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;각각의 단계에 대해서 테스트를 담당하는 사람 역시 따로 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 unit test 단계까지는 코드를 설계한 프로그래머가 담당한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review-white-box-testing&quot;&gt;Review - White Box Testing&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;code_coverage.png&quot; alt=&quot;Code Coverage&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;소스코드를 이용하여 code coverage를 측정하여 testing한다.&lt;&#x2F;li&gt;
&lt;li&gt;code coverage는 아래와 같이 분류된다.
&lt;ul&gt;
&lt;li&gt;Statement Coverage&lt;&#x2F;li&gt;
&lt;li&gt;Branch Coverage&lt;&#x2F;li&gt;
&lt;li&gt;Condition Coverage&lt;&#x2F;li&gt;
&lt;li&gt;Decision&#x2F;Condition Coverage&lt;&#x2F;li&gt;
&lt;li&gt;MCDC&lt;&#x2F;li&gt;
&lt;li&gt;Multiple Condition Coverage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;black-box-testing&quot;&gt;Black Box Testing&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;blackboxTesting.png&quot; alt=&quot;Black Box Testing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;소스코드를 모르는 상황에서 실행한다.
&lt;ul&gt;
&lt;li&gt;물론 소스코드를 아는 상황에서도 Black Box Testing을 실행할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;다양한 입력값의 조합을 통해 프로그램 내부의 branch를 최대한 실행시키는 것이 목적이다.&lt;&#x2F;li&gt;
&lt;li&gt;입력값이 편중되지 않도록 주의해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;problem-of-exhaustive-testing&quot;&gt;Problem of Exhaustive Testing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;이론적으로 모든 경우에 대한 Exhaustive Testing은 불가능하다.
&lt;ul&gt;
&lt;li&gt;32비트 워드 두 개를 input으로 받는 컴퓨터가 100ns당 한 번의 testgin이 가능하다고 해도 Exhaustive Testing을 수행에는 58000년 이상이 소모된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Equivalence Partitioning Testing&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;equivalentTesting.png&quot; alt=&quot;Equivalence Partitioning Test&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;input case에 대해서 partitioning하여 testing한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 partition들은 equivalent해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;equivalent에 대해서는 &amp;quot;&lt;strong&gt;같은 역할을 하는&lt;&#x2F;strong&gt;&amp;quot; set 으로 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이 set의 값들은 결함이 발생할 가능성이 같다고 가정한다. 즉 이 값들 중 하나만 선택해도 된다.&lt;&#x2F;li&gt;
&lt;li&gt;positive testing(valid value testing), negative testing(invalid value testing)이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;black-box-testing-bbanbbeo&quot;&gt;Black Box Testing 방법&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Boundary-value Analysis Testing
&lt;ul&gt;
&lt;li&gt;VEC 또는 IEC의 경계값에 대한 testing을 조사한다.&lt;&#x2F;li&gt;
&lt;li&gt;각 경계값에서 값을 선택하는 개수에 따라 2-value, 3-value boundary value test가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Equivalance Partitioning Testing에 비해서는 비용이 증가한다.&lt;&#x2F;li&gt;
&lt;li&gt;testing 효과가 늘어나는 것이 결함을 많이 찾아낸다는 것은 아님을 유념하자.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Combinational Testing&lt;&#x2F;li&gt;
&lt;li&gt;Dicision Table&#x2F;Cause Effect Graphing&lt;&#x2F;li&gt;
&lt;li&gt;State-based Testing&lt;&#x2F;li&gt;
&lt;li&gt;Use case Testing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Nachos(2)</title>
		<published>2023-04-30T00:00:00+00:00</published>
		<updated>2023-04-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/nachos-ssisseu-2/" type="text/html"/>
		<id>https://js970.github.io/nachos-ssisseu-2/</id>
		<content type="html">&lt;h1 id=&quot;1&quot;&gt;#1&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;kodde&quot;&gt;코드&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;selfTest2 메소드와 SimpleThread클래스를 아래와 같이 작성하여 Round-Robin 스케줄링을 구현할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;selftest2&quot;&gt;selfTest2()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selfTest2&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(dbgThread, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter KThread.selfTest2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; timeslice;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; numberOfThreads;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; burstTime1;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; burstTime2;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; fileName = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FileReader&lt;&#x2F;span&gt;&lt;span&gt; fileReader = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FileReader&lt;&#x2F;span&gt;&lt;span&gt;(fileName);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BufferedReader&lt;&#x2F;span&gt;&lt;span&gt; bufferedReader = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BufferedReader&lt;&#x2F;span&gt;&lt;span&gt;(fileReader);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; line = bufferedReader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readLine&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		timeslice = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(line);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		line = bufferedReader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readLine&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		numberOfThreads = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(line);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		line = bufferedReader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readLine&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		burstTime1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(line);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		line = bufferedReader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readLine&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		burstTime2= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(line);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		bufferedReader.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SimpleThread&lt;&#x2F;span&gt;&lt;span&gt;(burstTime1, timeslice))
&lt;&#x2F;span&gt;&lt;span&gt;		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;forked thread 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SimpleThread&lt;&#x2F;span&gt;&lt;span&gt;(burstTime2, timeslice))
&lt;&#x2F;span&gt;&lt;span&gt;		.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;forked thread 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mainThread&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IOException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input.txt&lt;&#x2F;code&gt;파일을 읽어서 timeslice, numberOfThread, burstTime1, burstTime2를 초기화한다.&lt;&#x2F;li&gt;
&lt;li&gt;초기화한 변수들을 바탕으로 KThread를 생성한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;simplethread&quot;&gt;SimpleThread&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SimpleThread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Runnable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;SimpleThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;burst_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeslice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.burst_time &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; burst_time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.timeslice &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; timeslice;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; remaining_time &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; burst_time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; current_tick;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(remaining_time &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(timeslice &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; remaining_time &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				current_tick &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				remaining_time&lt;&#x2F;span&gt;&lt;span&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				timeslice&lt;&#x2F;span&gt;&lt;span&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(current_tick 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; running:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					&lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, remaining time: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; remaining_time);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			timeslice &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;burst_time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;timeslice;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;selfTest2()에서 생성되는 KThread의 생성자 인수로 들어가는 SimpleThread class이다.&lt;&#x2F;li&gt;
&lt;li&gt;SimpleThread역시 Runnable인터페이스를 구현했으므로 run()에 대한 정의가 필요하다.&lt;&#x2F;li&gt;
&lt;li&gt;SimpleThread는 Round-Robin Scheduling으로 동작하는 Thread이다. timeslice 멤버 변수를 사용해서 두 틱동안 동작하고 yield()를 호출하여 다음 ready process로 resource를 넘긴다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 timeslice안에 프로세스가 종료되었을 경우, 곧바로 다음 프로세스로 resource를 넘긴다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ssihaeng-ggyeogwa&quot;&gt;실행 결과&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;proj2-1_result.png&quot; alt=&quot;result01&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2&quot;&gt;#2&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;PriorityScheduler는 Scheduler 추상 클래스를 상속하여 만들어진다.&lt;&#x2F;li&gt;
&lt;li&gt;PriorityScheduler를 구현하기에 앞서 Scheduler에 대해 분석해 보았다.&lt;&#x2F;li&gt;
&lt;li&gt;아래와 같이 코드를 수정한 후 proj폴더의 nachos.conf파일에서 scheduler를 priority scheduler로 변경해 주어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;abstract-class-scheduler&quot;&gt;Abstract Class Scheduler&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;schdeuler&quot;&gt;Schdeuler()&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Scheduler의 생성자이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;newthreadqueue-boolean-transferpriority&quot;&gt;_newThreadQueue(boolean transferPriority)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;public abstract ThreadQueue newThreadQueue(boolean transferPriority);&lt;&#x2F;li&gt;
&lt;li&gt;thread를 저장하는 Queue이다.&lt;&#x2F;li&gt;
&lt;li&gt;추상 메소드이므로 PriorityScheduler 에서 구현해 줘야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getpriority-kthread-thread&quot;&gt;getPriority(KThread thread)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;public int getPriority(KThread thread)&lt;&#x2F;li&gt;
&lt;li&gt;현재 thread의 priority를 반환하도록 구현되어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;제공된 코드에서는 구현된 바가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getpriority&quot;&gt;getPriority()&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;위의 메소드의 thread파라미터가 들어갈 자리에 현재 thread가 들어간다.&lt;&#x2F;li&gt;
&lt;li&gt;getPriority(KThread.currentThread());&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;geteffectivepriority-kthread-thread&quot;&gt;getEffectivePriority(KThread thread)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;public int getEffectivePriority(KThread thread)&lt;&#x2F;li&gt;
&lt;li&gt;본 함수를 사용하여 threadQueue에서 상대적인 priority를 비교한다.&lt;&#x2F;li&gt;
&lt;li&gt;제공된 코드에서는 구현된 바가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;geteffectivepriority&quot;&gt;getEffectivePriority()&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;위의 메소드의 thread 파라미터가 들어갈 자리에 현재 thread가 들어간다.&lt;&#x2F;li&gt;
&lt;li&gt;getEffectivePriority(KThread.currentThread());&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setpriority-kthread-thread-int-priority&quot;&gt;setPriority(KThread thread, int priority)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;public void setPriority(KThread thread, int priority)&lt;&#x2F;li&gt;
&lt;li&gt;우선순위를 설정하는 역할을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;제공된 코드에서는 구현된 바가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setpriority-int-priority&quot;&gt;setPriority(int priority)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;위의 메소드의 thread 파라미터가 들어갈 자리에 현재 thread가 들어간다.&lt;&#x2F;li&gt;
&lt;li&gt;setPriority(KThread.currentThread(), priority);&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;increasepriority-decreasepriority&quot;&gt;increasePriority(), decreasePriority()&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;public boolean increasePriority(), public boolean decreasePriority()&lt;&#x2F;li&gt;
&lt;li&gt;현재 thread의 priority를 올리거나 내린다.&lt;&#x2F;li&gt;
&lt;li&gt;제공된 코드에서는 구현된 바가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;priorityscheduler&quot;&gt;PriorityScheduler&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;newthreadqueue-boolean-transferpriority-1&quot;&gt;newThreadQueue(boolean transferPriority)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadQueue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newThreadQueue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; transferPriority) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt;(transferPriority);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;PriorityQueue를 생성하여 반환하도록 abstract method가 구현되었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getpriority-kthread-thread-1&quot;&gt;getPriority(KThread thread)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThreadState&lt;&#x2F;span&gt;&lt;span&gt;(thread).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;현재 ThreadState에서 getPriority()를 호출하여 현재 thread의 priority를 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;getPriority(), getThreadState등은 PriorityScheduler에서 추가한 메소드이며 아래 절에서 다룬다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;geteffectivepriority-kthread-thread-1&quot;&gt;getEffectivePriority(KThread thread)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEffectivePriority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThreadState&lt;&#x2F;span&gt;&lt;span&gt;(thread).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEffectivePriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;추후 정의되는 ThreadState 클래스의 getEffectivePriority() 메소드를 사용하여 파라미터로 전달받은 thread의 effectivePriority를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setpriority-kthread-thread-int-priority-1&quot;&gt;setPriority(KThread thread, int priority)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPriority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; priority) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(priority &amp;gt;= priorityMinimum &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;	priority &amp;lt;= priorityMaximum);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThreadState&lt;&#x2F;span&gt;&lt;span&gt;(thread).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPriority&lt;&#x2F;span&gt;&lt;span&gt;(priority);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;가능할 경우(maximum, minimum priority체크) 파라미터로 전달받은 thread의 priority를 파라미터로 전달받은 priority로 변경한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때, 우선순위의 변경은 ThreadState 클래스의 setPriority 메소드를 이용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;increasepriority&quot;&gt;increasePriority()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;increasePriority&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; intStatus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentThread&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; priority = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriority&lt;&#x2F;span&gt;&lt;span&gt;(thread);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(priority == priorityMaximum) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPriority&lt;&#x2F;span&gt;&lt;span&gt;(thread, priority+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restore&lt;&#x2F;span&gt;&lt;span&gt;(intStatus);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;현재 thread의 priority를 1만큼 증가시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 setPriority 메소드를 활용한다.&lt;&#x2F;li&gt;
&lt;li&gt;제한 조건에 해당되지 않는다면(정상적으로 priority increase가 일어났다면) true를 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;그렇지 않은 경우 false를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;decreasepriority&quot;&gt;decreasePriority()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decreasePriority&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; intStatus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentThread&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; priority = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriority&lt;&#x2F;span&gt;&lt;span&gt;(thread);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(priority == priorityMinimum)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPriority&lt;&#x2F;span&gt;&lt;span&gt;(thread, priority-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restore&lt;&#x2F;span&gt;&lt;span&gt;(intStatus);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;increasePriority()와 비슷하게 동작하지만, 현재 thread의 priority를 1만큼 감소시키는 동작을 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getthreadstate-kthread-thread&quot;&gt;getThreadState(KThread thread)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThreadState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(thread.schedulingState == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		thread.schedulingState = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt;(thread);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt;) thread.schedulingState;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;현재 thread의 schedulingState를 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;schedulingState는 ThreadState 클래스의 멤버 변수이며, 현재 thread의 상태를 나타낸다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;priorityqueue&quot;&gt;PriorityQueue&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;PriorityQueue클래스 내부에 protected로 선언된 클래스이다.&lt;&#x2F;li&gt;
&lt;li&gt;ThreadQueue를 상속하여 구현하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;member-variables&quot;&gt;Member Variables&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; threadsWaiting;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt; resourceHolder = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected int&lt;&#x2F;span&gt;&lt;span&gt; effectivePriority = priorityMinimum;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected boolean&lt;&#x2F;span&gt;&lt;span&gt; priorityChange;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean&lt;&#x2F;span&gt;&lt;span&gt; transferPriority;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;threadsWaiting
&lt;ul&gt;
&lt;li&gt;현재 waiting 상태인 threads를 저장하는 list이다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 위해 PriorityScheduler.java에서 java.util.List의 선언이 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;resourceHolder
&lt;ul&gt;
&lt;li&gt;현재 자원을 점유하고 있는 thread의 reference이다.&lt;&#x2F;li&gt;
&lt;li&gt;초기값은 null로 초기화된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;effectivePriority
&lt;ul&gt;
&lt;li&gt;queue의 effectivePriority를 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;초기값은 priorityMinimum으로 초기화된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;priorityChange
&lt;ul&gt;
&lt;li&gt;현재 effectivePriority가 유효하지 않은 경우 true 값을 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;transferPriority
&lt;ul&gt;
&lt;li&gt;Queue에서 대기중인 다른 thread로 priority transfer가 일어나야 하는 경우 true값을 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;priorityqueue-boolean-transferpriority&quot;&gt;PriorityQueue(boolean transferPriority)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; transferPriority) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.transferPriority = transferPriority;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.threadsWaiting = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;PriorityQueue의 생성자이다.&lt;&#x2F;li&gt;
&lt;li&gt;본 코드에서는 threadsWaiting을 LinkedList를 사용하여 구현했다.
&lt;ul&gt;
&lt;li&gt;이를 위해 java.util.LinkedList를 선언해 줘야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;waitforaccess-kthread-thread&quot;&gt;waitForAccess(KThread thread)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitForAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt; ts = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThreadState&lt;&#x2F;span&gt;&lt;span&gt;(thread);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.threadsWaiting.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(ts);
&lt;&#x2F;span&gt;&lt;span&gt;	ts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitForAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;ThreadState(PriorityQueue클래스와 마찬가지로 PriorityScheduler에 선언된 클래스이다. 아래 절에서 다룬다.) 타입의 ts변수를 선언하여 현재 thread의 상태를 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;threadsWaiting에 ts를 추가한다.&lt;&#x2F;li&gt;
&lt;li&gt;ts에 대해 waitForAccess를 호출한다.(마찬가지로 ThreadState의 메소드이다.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;acquire-kthread-thread&quot;&gt;acquire(KThread thread)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acquire&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt; ts = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThreadState&lt;&#x2F;span&gt;&lt;span&gt;(thread);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourceHolder != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourceHolder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourceHolder = ts;
&lt;&#x2F;span&gt;&lt;span&gt;	ts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acquire&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;waitForAccess와 같은 방식으로 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;resourceHolder가 null이 아니라면 현재 resourceHolder(ThreadState 객체이다.)를 Queue에서 remove 한다.&lt;&#x2F;li&gt;
&lt;li&gt;resourceHolder의 값을 ts로 갱신하고, ts에 대해서 acquire동작을 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;nextthread&quot;&gt;nextThread()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextThread&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt; nextThread = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pickNextThread&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(nextThread == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.threadsWaiting.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(nextThread);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acquire&lt;&#x2F;span&gt;&lt;span&gt;(nextThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThread&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; nextThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThread&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;다음에 실행될 thread를 반환하는 메소드이다.&lt;&#x2F;li&gt;
&lt;li&gt;다음에 실행될 thread의 정보를 얻기 위해 pickNextThread메소드를 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;다음에 실행될 thread가 존재하지 않는다면 null을 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;다음에 실행될 thread에 대해서 threadsWaiting에서 제거하고, acquire를 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;picknextthread&quot;&gt;pickNextThread()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pickNextThread&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; nextPriority = priorityMinimum;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt; next = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt; currThread : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.threadsWaiting) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; currPriority = currThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEffectivePriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(next == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (currPriority &amp;gt; nextPriority)) {	
&lt;&#x2F;span&gt;&lt;span&gt;				next = currThread;
&lt;&#x2F;span&gt;&lt;span&gt;				nextPriority = currPriority;
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; next;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;nextPriority변수를 설정하여 threadsWaiting리스트를 순회한다.&lt;&#x2F;li&gt;
&lt;li&gt;가장 priority가 높은 thread를 next로 설정하며, 이때의 priority를 nextPriority로 갱신한다.&lt;&#x2F;li&gt;
&lt;li&gt;threadsWaiting의 순회가 끝났을 때 가장 우선순위가 높은 thread를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;geteffectivepriority-1&quot;&gt;getEffectivePriority()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEffectivePriority&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.transferPriority) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; priorityMinimum;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priorityChange) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.effectivePriority = priorityMinimum;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt; curr : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.threadsWaiting) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.effectivePriority =
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.effectivePriority, curr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEffectivePriority&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priorityChange = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; effectivePriority;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;threadsWaiting을 순회하면서 가장 높은 priority를 갖는 thread의 priority로 effectivePriority값을 갱신하고, 이를 반환한다.)&lt;&#x2F;li&gt;
&lt;li&gt;effectivePriority가 갱신되었으므로 priorityChange는 false로 설정한다.(유효한 effectivePriority)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;invalidatecachedpriority&quot;&gt;invalidateCachedPriority()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invalidateCachedPriority&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.transferPriority) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priorityChange = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourceHolder != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) resourceHolder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invalidateCachedPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Priority가 변경되어야 할 경우, resourceHolder에 대해서 ThreadState.invalidateCachedPriority()를 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;threadstate&quot;&gt;ThreadState&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;PriorityQueue클래스 내부에 protected로 선언된 클래스이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;member-variables-1&quot;&gt;Member Variables&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected int&lt;&#x2F;span&gt;&lt;span&gt; priority;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected boolean&lt;&#x2F;span&gt;&lt;span&gt; priorityChange = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected int&lt;&#x2F;span&gt;&lt;span&gt; effectivePriority = priorityMinimum;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; resourcesIHave;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; resourcesIWant;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;thread
&lt;ul&gt;
&lt;li&gt;현재 thread를 저장한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;prioirty
&lt;ul&gt;
&lt;li&gt;priority를 저장한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;priorityChange
&lt;ul&gt;
&lt;li&gt;현재 ThreadState의 effective priority가 유효하지 않다면 true값을 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;effectivePriority
&lt;ul&gt;
&lt;li&gt;본 thread의 effective priority값을 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;resourceIHave
&lt;ul&gt;
&lt;li&gt;현재 resourceHolder가 가지고 있는 queue의 리스트&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;resourceIWant
&lt;ul&gt;
&lt;li&gt;현재 resourceHolder가 기다리는 queue의 리스트&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;threadstate-kthread-thread&quot;&gt;ThreadState(KThread thread)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ThreadState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; thread) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.thread = thread;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIHave = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIWant = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPriority&lt;&#x2F;span&gt;&lt;span&gt;(priorityDefault);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;ThreadState의 생성자이다.&lt;&#x2F;li&gt;
&lt;li&gt;resourcesIHave, resourcesIWant의 리스트로 Linked list를 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getpriority-1&quot;&gt;getPriority()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriority&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; priority;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;현재 thread의 priority를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;geteffectivepriority-2&quot;&gt;getEffectivePriority()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEffectivePriority&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIHave.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isEmpty&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priorityChange) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.effectivePriority = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt; pq : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIHave) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.effectivePriority =
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.effectivePriority, pq. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getEffectivePriority&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priorityChange = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.effectivePriority;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;resourcesIHave를 순회하면서 effectivepriority를 값을 갱신한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setpriority-int-priority-1&quot;&gt;setPriority(int priority)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPriority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; priority) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priority == priority) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priority = priority;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt; pq : resourcesIWant) {
&lt;&#x2F;span&gt;&lt;span&gt;		 q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invalidateCachedPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;resourcesIWant의 이전 상태의 Priority에 대해 invalidate처리를 진행한다.&lt;&#x2F;li&gt;
&lt;li&gt;이떄 PriorityQueue의 invalidateCachedPriority()메소드를 호출한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;waitforaccess-priorityqueue-waitqueue&quot;&gt;waitForAccess(PriorityQueue waitQueue)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitForAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt; waitQueue) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIWant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(waitQueue);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIHave.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(waitQueue);
&lt;&#x2F;span&gt;&lt;span&gt;	waitQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invalidateCachedPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Access요청이 들어온 queue를 resourcesIWant에 추가한다.&lt;&#x2F;li&gt;
&lt;li&gt;해당 큐를 resourcesIHave에서 제거한다.&lt;&#x2F;li&gt;
&lt;li&gt;해당 큐에 대해서 PriorityQueu.invalidateCachedPriority()를 호출한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;acquire-priorityqueue-waitqueue&quot;&gt;acquire(PriorityQueue waitQueue)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acquire&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt; waitQueue) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIHave.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(waitQueue);	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIWant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(waitQueue);	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invalidateCachedPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;acquire요청이 들어온 queue에 대해서 처리한다.&lt;&#x2F;li&gt;
&lt;li&gt;해당 큐를 resourcesIHave에 추가하고, resourcesIWant에서는 제거한다.&lt;&#x2F;li&gt;
&lt;li&gt;해당 큐에 대해서 PriorityQueue.invalidateCachedPriority()를 호출한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;release-priorityqueue-waitqueue&quot;&gt;release(PriorityQueue waitQueue)&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt; waitQueue) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIHave.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(waitQueue);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invalidateCachedPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;resourcesIHave에서 파라미터로 전달받은 waitQueue를 제거한다.&lt;&#x2F;li&gt;
&lt;li&gt;해당 큐에 대해서 PriorityQueue.invalidateCachedPriority()를 호출한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getthread&quot;&gt;getThread()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getThread&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; thread;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;member variable thread에 대한 getter이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;invalidatecachedpriority-1&quot;&gt;invalidateCachedPriority()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invalidateCachedPriority&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priorityChange) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.priorityChange = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PriorityQueue&lt;&#x2F;span&gt;&lt;span&gt; pq : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.resourcesIWant) {
&lt;&#x2F;span&gt;&lt;span&gt;		pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invalidateCachedPriority&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;resourcesIWant에 대해서 invalidateCachedPriority()를 호출한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;reference&quot;&gt;reference&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;priority scheduler의 구현에 있어 아래 깃허브 저장소를 참고했습니다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jeremyrios&#x2F;CS162-Nachos-OperatingSystem&quot;&gt;reference github repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Greedy Algorithm - Dijkstra Algorithm</title>
		<published>2023-04-26T00:00:00+00:00</published>
		<updated>2023-04-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/greedy-algorithm-dijkstra-algorithm/" type="text/html"/>
		<id>https://js970.github.io/greedy-algorithm-dijkstra-algorithm/</id>
		<content type="html">&lt;h2 id=&quot;review&quot;&gt;Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Prim&#x27;s Algorithm vs Kruskal Algorithm
&lt;ul&gt;
&lt;li&gt;Prim&#x27;s Algorithm Time Complexity : n*n&lt;&#x2F;li&gt;
&lt;li&gt;Kruskal&#x27;s Algorithm Time Complexity : m*log m(n-1 &amp;lt;= m &amp;lt;= n(n-1)&#x2F;2)&lt;&#x2F;li&gt;
&lt;li&gt;Sparse graph : Kruskal Algorithm
&lt;ul&gt;
&lt;li&gt;Kruskal Algorithm(n*log n) is faster than Prim&#x27;s Algorithm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Highly connected graph : Prim&#x27;s Algorithm
&lt;ul&gt;
&lt;li&gt;Prim is faster than Kruskal(n*n*log n) &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dijkstra-s-algorithm&quot;&gt;Dijkstra&#x27;s Algorithm&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;시작 정점 V에서 나머지 정점들까지의 최단 경로를 구하는 알고리즘이다.&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘은 아래와 같이 동작한다.
&lt;ol&gt;
&lt;li&gt;Vertex의 부분집합 Y(처음에는 시작 정점만 포함된다. 선택된 정점을 의미한다.)&lt;&#x2F;li&gt;
&lt;li&gt;V는 모든 정점의 집합을 의미한다.(G = (V, E), 선택되지 않은 정점을 의미한다.)&lt;&#x2F;li&gt;
&lt;li&gt;F는 edge집합의 부분집합이며, 시작 정점에서 다른 노드로의 최단 경로에 사용되는 edge의 집합이다.&lt;&#x2F;li&gt;
&lt;li&gt;V-Y에 속한 vertex중 시작 정점과 가장 가까운(weight이 가장 작은) vertex를 선택한다. 과정에서 Y집합에 포함된 vertex는 중간 노드(intermediate node)로 활용할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;선택된 vertex를 집합 Y에 추가한다.&lt;&#x2F;li&gt;
&lt;li&gt;선택된 vertex가 destination node인 edge를 F에 추가한다.&lt;&#x2F;li&gt;
&lt;li&gt;Y=V일때까지(모든 정점에 대한 최단거리를 구할 때까지) 4~6을 반복한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Prim Algorithm과 유사하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;한 정점&lt;&#x2F;code&gt;에서 &lt;code&gt;다른 정점&lt;&#x2F;code&gt;까지의 최단 경로를 구한다.(이 부분이 Prim과 다르다.)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Prim&lt;&#x2F;code&gt;은 &lt;code&gt;MST&lt;&#x2F;code&gt;를 구하는 것이 목적이다. &lt;code&gt;Dijkstra&lt;&#x2F;code&gt;는 MST가 아닌 &lt;code&gt;최단 경로&lt;&#x2F;code&gt;를 구하는 것이 목적이다.&lt;&#x2F;li&gt;
&lt;li&gt;Prim의 MST가 Dijkstra의 최단 경로를 보장하지 않으며, 역 역시 마찬가지이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;모든 정점&lt;&#x2F;code&gt;에서 다른 &lt;code&gt;모든 정점&lt;&#x2F;code&gt;으로의 최단 경로를 구하는 알고리즘으로는 &lt;code&gt;Floyd&#x27;s all-pair Algorithm&lt;&#x2F;code&gt;이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Dijkstra&#x27;s Algorithm이 적용되는 과정을 나타낸 도식이다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;dijkstra.png&quot; alt=&quot;Dijkstra&#x27;s Algorithm&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (가중치, 노드)값을 나타내는 상수
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; pil;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dijkstra&lt;&#x2F;span&gt;&lt;span&gt;(vector&amp;lt;vector&amp;lt;pil&amp;gt; &amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;graph&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distance&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 시작 노드의 거리를 0으로 초기화
&lt;&#x2F;span&gt;&lt;span&gt;    distance[start] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; min heap을 사용하는 우선순위 큐
&lt;&#x2F;span&gt;&lt;span&gt;    priority_queue&amp;lt;pil, vector&amp;lt;pil&amp;gt;, greater&amp;lt;pil&amp;gt; &amp;gt; pq;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 시작 노드의 가중치는 0으로 설정
&lt;&#x2F;span&gt;&lt;span&gt;    pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, start));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(!pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 현재 선택된 노드
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; curr_node = pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 현재 노드까지의 거리(가중치 값으로 초기화)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; curr_dist = pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 이미 처리한 노드면 건너뛴다.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(curr_dist &amp;gt; distance[curr_node]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 현재 노드와 연결된 인접 노드를 탐색한다.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; graph[curr_node].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); ++i) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 다음 노드
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; next_node = graph[curr_node][i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 다음 노드까지의 거리
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; next_dist = curr_dist + graph[curr_node][i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 다음 노드까지의 거리가 현재 기록된 거리보다 짧다면 갱신 후 큐에 삽입한다.
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(next_dist &amp;lt; distance[next_node]) {
&lt;&#x2F;span&gt;&lt;span&gt;                distance[next_node] = next_dist;
&lt;&#x2F;span&gt;&lt;span&gt;                pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(next_dist, next_node));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 노드의 개수
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start_node = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 시작 노드
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 그래프 초기화
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;vector&amp;lt;pil&amp;gt; &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;graph&lt;&#x2F;span&gt;&lt;span&gt;(n + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 인덱스를 1부터 사용하기 위해 크기를 n+1로 설정
&lt;&#x2F;span&gt;&lt;span&gt;    graph[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    graph[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    graph[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    graph[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    graph[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    graph[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    graph[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    graph[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 최단 거리를 저장하는 배열 초기화
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distance&lt;&#x2F;span&gt;&lt;span&gt;(n + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, INT_MAX);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 다익스트라 알고리즘 호출
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dijkstra&lt;&#x2F;span&gt;&lt;span&gt;(graph, start_node, distance);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 결과 출력
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; ++i) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(distance[i] == INT_MAX)
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INF &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1 -&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; distance[i] &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;출력 결과            &lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;dijkstra_result.png&quot; alt=&quot;Dijkstra&#x27;s Algorithm Result&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;every-case-time-complexity-of-dijkstra-algorithm&quot;&gt;Every-case Time Complexity of Dijkstra Algorithm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The number of vertices : n&lt;&#x2F;li&gt;
&lt;li&gt;Basic Operation : n-1회의 while loop(시작정점을 제외한 모든 정점에 대해 탐색한다.)
&lt;ul&gt;
&lt;li&gt;각 loop내부에서 n-1회 순회하며 각 단계의 정점의 모든 edge에 대한 minimum distance를 찾는 연산을 수행한다.
$$T(n) = (n-1)\times (n-1) \in \Theta(n^2)$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Greedy Algorithm - Kruskal Algorithm</title>
		<published>2023-04-24T00:00:00+00:00</published>
		<updated>2023-04-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/greedy-algorithm-kruskal-algorithm/" type="text/html"/>
		<id>https://js970.github.io/greedy-algorithm-kruskal-algorithm/</id>
		<content type="html">&lt;h2 id=&quot;kruskal-s-algorithm&quot;&gt;Kruskal&#x27;s Algorithm&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ol&gt;
&lt;li&gt;그래프의 개별 노드로 구성된 V개의 subset을 생성한다.&lt;&#x2F;li&gt;
&lt;li&gt;edge들을 weight에 따라 오름차순으로 정렬한다.&lt;&#x2F;li&gt;
&lt;li&gt;edge를 선택했을 때 두 개의 서로 다른 V를 연결한다면, 해당 edge를 final edge set에 추가시키고, 두 V를 merge 한다.(이제 두 subset은 하나의 집합으로 인식한다.)&lt;&#x2F;li&gt;
&lt;li&gt;subset의 집합이 하나만 남을 때까지 3을 반복해서 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;다음 그래프에 대해 Kruskal Algorithm을 적용해 보자.                            &lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;graph_ex1.png&quot; alt=&quot;Example Graph&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;위에서 설명한 과정을 차례대로 수행하면 아래 그림과 같다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;kruskal.png&quot; alt=&quot;Kruskal Algorithm&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Union-Find 자료구조를 위한 클래스
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UnionFind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; parent;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; rank;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;UnionFind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        parent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(n);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        rank.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(n, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;; i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; n; i&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) parent[i] &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; i;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(parent[x] &lt;&#x2F;span&gt;&lt;span&gt;!=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; x)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            parent[x] &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(parent[x]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; parent[x];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;unite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rootX &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(x);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rootY &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(y);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(rootX &lt;&#x2F;span&gt;&lt;span&gt;!=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rootY) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(rank[rootX] &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rank[rootY])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                parent[rootX] &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rootY;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(rank[rootX] &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rank[rootY])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                parent[rootY] &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rootX;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                parent[rootY] &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; rootX;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                rank[rootX]&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 간선을 나타내는 클래스
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Edge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; src, dest, weight;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Edge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; src;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dest &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; dest;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; weight;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;compare &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Edge&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Edge&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Kruskal 알고리즘으로 최소 신장 트리를 구하는 함수
&lt;&#x2F;span&gt;&lt;span&gt;vector&amp;lt;Edge&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;kruskalMST&lt;&#x2F;span&gt;&lt;span&gt;(vector&amp;lt;Edge&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edges&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 간선을 가중치의 오름차순으로 정렬
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(edges.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), edges.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(), compare);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;Edge&amp;gt; result; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 최소 신장 트리를 저장할 벡터
&lt;&#x2F;span&gt;&lt;span&gt;    UnionFind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uf&lt;&#x2F;span&gt;&lt;span&gt;(V); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Union-Find 자료구조 객체
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Edge&amp;amp; edge : edges) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; srcRoot = uf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(edge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; destRoot = uf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(edge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 사이클을 형성하지 않는다면 간선을 추가하고 Union-Find자료구조를 업데이트
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(srcRoot != destRoot) {
&lt;&#x2F;span&gt;&lt;span&gt;            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(edge);
&lt;&#x2F;span&gt;&lt;span&gt;            uf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unite&lt;&#x2F;span&gt;&lt;span&gt;(srcRoot, destRoot);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; V, E;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;정점 개수와 간선 개수를 입력하세요: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; V &amp;gt;&amp;gt; E;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;Edge&amp;gt; edges;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;간선 정보를 입력하세요 (출발 정점, 도착 정점, 가중치):&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; E; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; src, dest, weight;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; src &amp;gt;&amp;gt; dest &amp;gt;&amp;gt; weight;
&lt;&#x2F;span&gt;&lt;span&gt;        edges.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emplace_back&lt;&#x2F;span&gt;&lt;span&gt;(src, dest, weight);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;Edge&amp;gt; mst = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kruskalMST&lt;&#x2F;span&gt;&lt;span&gt;(edges, V);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;최소 신장 트리의 간선 정보:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Edge&amp;amp; edge : mst) {
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; edge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; edge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dest &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; edge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weight &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;kruskal-vs-prim&quot;&gt;Kruskal vs Prim&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Kruskal Algorithm의 경우 모든 edge를 정렬하는 과정이 필요하다. 이때 정렬에 걸리는 시간복잡도는 mlogm이다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 vertex가 연결된 n개의 정점을 가지는 그래프의 경우 n(n-1)&#x2F;2개의 edge를 가질 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 kruskal algorithm의 worst case는 아래와 같다.$$\Theta(\frac{n(n-1)}2 \times log(\frac{n(n-1)}2)) = \Theta(n^2log(n^2)) = \Theta(2n^2log(n)) = \Theta(n^2log(n))$$&lt;&#x2F;li&gt;
&lt;li&gt;V개의 vertex중 최소 edge 개수는 n-1개이다. 이때의 시간복잡도는 아래와 같다.$$\Theta((n-1)log(n-1)) = \Theta(nlogn)$$&lt;&#x2F;li&gt;
&lt;li&gt;Prim Algorithm의 시간복잡도는 아래와 같다.$$\Theta(n^2)$$&lt;&#x2F;li&gt;
&lt;li&gt;따라서 edge의 개수가 많을 경우에는 Prim Algorithm이 더 빠르고, edge의 개수가 적을 경우에는 Kruskal Algorithm이 더 빠르다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Greedy Algorithm - Prim Algorithm</title>
		<published>2023-04-24T00:00:00+00:00</published>
		<updated>2023-04-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/greedy-algorithm-prim-algorithm/" type="text/html"/>
		<id>https://js970.github.io/greedy-algorithm-prim-algorithm/</id>
		<content type="html">&lt;h2 id=&quot;prim-s-algorithm&quot;&gt;Prim&#x27;s Algorithm&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ol&gt;
&lt;li&gt;그래프에서 하나의 꼭짓점을 선택한다.&lt;&#x2F;li&gt;
&lt;li&gt;꼭짓점과 edge를 구성하는 vertex중 edge의 weight이 가장 작은 vertex를 선택한다.&lt;&#x2F;li&gt;
&lt;li&gt;2에서의 vertices와 edge를 구성하는 vertex중 edge의 weight이 가장 작은 vertex를 선택한다.&lt;&#x2F;li&gt;
&lt;li&gt;더 이상 선택되지 않은 vertex가 없을 때까지 1~3을 반복한다.
&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;Prim.png&quot; alt=&quot;Prim&#x27;s Algorithm&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Code by https:&#x2F;&#x2F;4legs-study.tistory.com&#x2F;m&#x2F;112 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; number of vertex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; v = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; adj[1][2][2] : e(1, 2), w = 2
&lt;&#x2F;span&gt;&lt;span&gt;vector&amp;lt;p&amp;gt; adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check array
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; visit[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;compare {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;operator()&lt;&#x2F;span&gt;&lt;span&gt;(p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Prim&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 큐 안의 간선들은 가중치 기준 오름차순으로 항상 정렬된다.
&lt;&#x2F;span&gt;&lt;span&gt;    priority_queue&amp;lt;p, vector&amp;lt;p&amp;gt;, compare&amp;gt; pque;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 출발지와 연결된 간선들을 모두 큐에 삽입
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++) pque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;][i]);
&lt;&#x2F;span&gt;&lt;span&gt;    visit[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; cnt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 정점의 개수 - 1만큼 반복한다.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(cnt &amp;lt; v - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 큐 안의 간선들 중 가중치가 가장 작은 간선을 큐에서 빼낸다.
&lt;&#x2F;span&gt;&lt;span&gt;        p curline = pque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        pque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; node, weight값을 curline의 값으로 갱신
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; node = curline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; weight = curline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 뽑은 간선의 목적지 노드가 이미 발견된 상태라면 선택하지 않음
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(visit[node]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 방문 노드 표시
&lt;&#x2F;span&gt;&lt;span&gt;        visit[node] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        cnt++;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 현재 간선을 MST에 추가
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;번 정점 발견 : 비용 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, node, weight);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 뽑은 간선의 목적지 노드와 연결된 간선들을 모두 큐에 삽입
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; adj[node].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; nextnode = adj[node][i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!visit[nextnode]) pque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(adj[node][i]);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Graph Initialization
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[MST]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Prim&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;every-case-time-complexity-of-prim-s-algorithm&quot;&gt;Every-Case Time Complexity of Prim&#x27;s Algorithm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Input Size : n&lt;&#x2F;li&gt;
&lt;li&gt;서로 connection이 없는 vertex의 edge weight는 무한대로 초기화된다.&lt;&#x2F;li&gt;
&lt;li&gt;Basic operation : n-1회 반복하는 반복문 내부에 각각 n-1회 반복하는 2개의 for loop이 존재한다.
&lt;ul&gt;
&lt;li&gt;n-1회 반복하는 반복문 : 시작 vertex를 제외한 모든 vertex에 대해 탐색&lt;&#x2F;li&gt;
&lt;li&gt;n-1회 반복하는 for문-1 : 모든 vertex중 가장 weight이 작은 vertex 탐색&lt;&#x2F;li&gt;
&lt;li&gt;n-1회 반복하는 for문-2 : 선택되지 않은 vertex의 weight 갱신
$$T(n) = 2 \times (n-1) \times (n-1) \in \Theta(n^2)$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;4legs-study.tistory.com&#x2F;m&#x2F;112&quot;&gt;MST - Prim code&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Greedy Algorithm</title>
		<published>2023-04-24T00:00:00+00:00</published>
		<updated>2023-04-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/greedy-algorithm/" type="text/html"/>
		<id>https://js970.github.io/greedy-algorithm/</id>
		<content type="html">&lt;h2 id=&quot;greedy-algorithm&quot;&gt;Greedy Algorithm&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Greedy Algorithm은 &amp;quot;순간순간 선택의 시점마다 항상 그 상황에서 최선인 선택을 하는&amp;quot; 알고리즘이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Greedy Algorithm의 예시이다.
&amp;gt;10원, 50원, 100원, 500원 동전이 무한 개 있다. 코인의 개수를 가장 적게 선택하여 730원을 지불하려면 어떻게 해야 하는가?&lt;&#x2F;li&gt;
&lt;li&gt;이를 해결하기 위해서는 동전의 선택 시점마다 항상 선택 가능한 동전 중 금액이 가장 큰 동전을 선택하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;greedy-algorithm-vs-dynamic-programming&quot;&gt;Greedy Algorithm vs Dynamic Programming&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;두 알고리즘 모두 최적화 문제를 풀기 위해 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;Greedy Algorithm의 경우 한번 선택된 사항에 대해 재고하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;Greedy Algorithm의 선택은 이전 선택이나 이후 선택에 영향을 받지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;Greedy Algorithm의 경우 Locally Optimal하다.
&lt;ul&gt;
&lt;li&gt;따라서 Locally Optimal함이 반드시 증명되어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;greedy-approach&quot;&gt;Greedy Approach&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Selection procedure : 현재 상태에서 최선의 해답을 선택한다.&lt;&#x2F;li&gt;
&lt;li&gt;Feasibility Check : 선택된 해가 문제의 조건을 만족하는지 확인한다.&lt;&#x2F;li&gt;
&lt;li&gt;Solution Check : 원래 문제가 해결되었는지 검사하고, 해결되지 않았다면 1~3을 반복한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;spanning-tree-ssijjan-teuri&quot;&gt;Spanning Tree(신장 트리)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;G = (V, E)인 undirected weighted graph이다.&lt;&#x2F;li&gt;
&lt;li&gt;V = {v1, v2, v3, v4, v5}&lt;&#x2F;li&gt;
&lt;li&gt;E = {(v1, v2), (v1, v3), (v2, v4), (v3, v4), (v3, v5), (v4, v5)}&lt;&#x2F;li&gt;
&lt;li&gt;W : 각 edge의 weight값&lt;&#x2F;li&gt;
&lt;li&gt;Spanning Tree는 Graph G의 모든 Vertices를 포함하는 Subgraph이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;minimum-spanning-tree&quot;&gt;Minimum Spanning Tree&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;G = (V, E), T = (V, F)인 undirected graph G, T가 있다. 이때  F가 E의 부분집합일 때 F의 weight 값의 합이 최솟값을 가지는 spanning tree를 Minimum Spanning Tree라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;G에 대한 MST를 찾는 데 Greedy Algorithm이 이용된다. 대표적으로 아래와 같은 알고리즘이 있다.
&lt;ul&gt;
&lt;li&gt;Prim Algorithm&lt;&#x2F;li&gt;
&lt;li&gt;Kruskal Algorithm&lt;&#x2F;li&gt;
&lt;li&gt;Dijkstra Algorithm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;0-1-knapsack-problem&quot;&gt;0-1 Knapsack Problem&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;도둑이 보석 가게에 가방을 들고 물건을 훔치러 침입했다. 각각의 보석은 무게와 가격을 가지며, 가방은 최대 용량 W를 초과하면 터진다. 도둑이 가방의 최대 용량을 초과하지 않으면서 최대한 많은 보석을 훔쳐가려면 어떻게 해야 하는가?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;brute-fore-solution&quot;&gt;Brute Fore Solution&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;총 n개의 보석 집합의 부분집합의 개수는 2^n개이다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 부분집합에 대해 가방의 용량 W를 초과하지 않으면서, 최대한 큰 가격을 가지는 보석의 부분집합을 선택한다.&lt;&#x2F;li&gt;
&lt;li&gt;시간복잡도가 exponential이므로 해결 불가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;greedy-solution&quot;&gt;Greedy Solution&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;가격 &#x2F; 무게 연산을 통해 profit을 계산한다.&lt;&#x2F;li&gt;
&lt;li&gt;보석을 profit순서대로 내림차순 정렬한다.&lt;&#x2F;li&gt;
&lt;li&gt;무게를 초과하지 않을 때까지 profit이 큰 보석부터 가방에 담는다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이 알고리즘은 optimal하지 않다.&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;greedy_notopt.png&quot; alt=&quot;Not Optimal Greedy Solution&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;0-1 Knapsack문제에 있어서 exponential보다 나은 시간복잡도를 가지는 해결법은 발견되지 않았다.&lt;&#x2F;li&gt;
&lt;li&gt;그렇다고 해서 exponential보다 나은 시간복잡도를 가지는 것이 불가능하다고 증명되지도 않았다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 greedy algorithm은 이 문제의 적절한 해결책이 아니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-04-24 수업정리</title>
		<published>2023-04-24T00:00:00+00:00</published>
		<updated>2023-04-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-4-24-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-4-24-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;SDLC&lt;&#x2F;li&gt;
&lt;li&gt;Unit Testing&lt;&#x2F;li&gt;
&lt;li&gt;JUnit 을 이용한 Unit Testing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;sdlc-software-developement-life-cycle&quot;&gt;SDLC(Software Developement Life Cycle)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;구조도의 그림이 V형태여서 V-model이라고도 한다.&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;SDLC.png&quot; alt=&quot;SDLC&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Acceeptance Testing의 경우에는 defect를 찾는 것이 목적이 아니다. User Requirements에 부합하는지 검사하는 것이 목적이다.&lt;&#x2F;li&gt;
&lt;li&gt;System Testing, Integration Testing, Unit Testing은 defect를 찾는 것이 목적이다.&lt;&#x2F;li&gt;
&lt;li&gt;각각의 Test Basis에 맞는 Testing방법을 사용하여 테스트한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;테스트의 성공은 의미가 없다.
&lt;ul&gt;
&lt;li&gt;Test Case를 올바르게 선정하여 Robustness(강건성)을 테스트 하는 것이 목표이다.&lt;&#x2F;li&gt;
&lt;li&gt;올바르지 않은 입출력, 경계값 등을 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;Fail이 Test의 Success를 이끌어 내는 데 도움이 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;function, class등의 단위 테스팅에 대한 내용이다.&lt;&#x2F;li&gt;
&lt;li&gt;어떤 모듈(function, class)이 요구사항의 specification대로 동작하는지 검사하는 과정이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;iut-implementation-under-test&quot;&gt;IUT(Implementation Under Test)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;테스트를 위한 코드이다.&lt;&#x2F;li&gt;
&lt;li&gt;베릴로그 모듈 테스트에서 시스템 베릴로그로 작성한 테스트벤치를 생각하면 이해하기 쉽다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;unit-testing-framework&quot;&gt;Unit Testing Framework&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;본 강의에서는 JUnit을 사용한 실습을 진행한다.&lt;&#x2F;li&gt;
&lt;li&gt;JUnit
&lt;ul&gt;
&lt;li&gt;java의 단위 테스팅 프레임워크이다.&lt;&#x2F;li&gt;
&lt;li&gt;annotation을 사용하여 before, test, after에 대한 결과를 확인한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;CppUnit
&lt;ul&gt;
&lt;li&gt;c++의 단위 테스팅 프레임워크이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;MS Unit
&lt;ul&gt;
&lt;li&gt;CppUnit과 비슷하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;junit-tutorial&quot;&gt;JUnit Tutorial&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;java-build-pathsseojjeon&quot;&gt;Java Build Path설정&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Project우클릭 후 properties선택&lt;&#x2F;li&gt;
&lt;li&gt;Java Build Path 선택 후 Libraries tab 선택&lt;&#x2F;li&gt;
&lt;li&gt;Classpath 선택 후 Add Library 클릭&lt;&#x2F;li&gt;
&lt;li&gt;JUnit선택, Junit버전 선택&lt;&#x2F;li&gt;
&lt;li&gt;Apply and Close&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;junit-test-tutorial&quot;&gt;JUnit Test Tutorial&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;테스트를 위한 Calculator.java를 아래와 같이 작성한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addTwoNumbersTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; number1 &lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; number2;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;multiplyTwoNumbersTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; number1 &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; number2;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;src 폴더를 우클릭한 후 JUnit Test Case 선택&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;JUnitTest.png&quot; alt=&quot;JUnit Test&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;CalculatorTest.java를 아래와 같이 작성한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import static &lt;&#x2F;span&gt;&lt;span&gt;org.junit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Assert&lt;&#x2F;span&gt;&lt;span&gt;.*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.junit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CalculatorTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Calculator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;calculator &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Calculator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertEquals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, calculator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addTwoNumbersTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;multiplyTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertEquals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, calculator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;multiplyTwoNumbersTest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;실행&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;JUnitTestResult.png&quot; alt=&quot;Result&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;결과 확인&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;JUnitResult.png&quot; alt=&quot;Result&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mac Setting</title>
		<published>2023-04-21T00:00:00+00:00</published>
		<updated>2023-04-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/mac-setting/" type="text/html"/>
		<id>https://js970.github.io/mac-setting/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Terminal Setting&lt;&#x2F;li&gt;
&lt;li&gt;Drive Setting&lt;&#x2F;li&gt;
&lt;li&gt;Flow Applications&lt;&#x2F;li&gt;
&lt;li&gt;Communicative Applications&lt;&#x2F;li&gt;
&lt;li&gt;Other Applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;terminal-setting&quot;&gt;Terminal Setting&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;iterm&quot;&gt;iterm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iterm2.com&quot;&gt;iterm2 Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;oh-my-zsh&quot;&gt;Oh-my-zsh&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ohmyz.sh&#x2F;#install&quot;&gt;Oh-my-zsh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sh -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;wiki&#x2F;Themes&quot;&gt;Themes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;package-manager-homebrew&quot;&gt;Package Manager (homebrew)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;add PATH to .zshrc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export PATH=&#x2F;opt&#x2F;homebrew&#x2F;bin:$PATH&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.zshrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brew.sh&#x2F;index_ko&quot;&gt;homebrew Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;bin&#x2F;bash -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;drive-setting&quot;&gt;Drive Setting&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;synology-client&quot;&gt;Synology Client&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Home NAS에 어플리케이션을 통한 실시간 동기화 및 접근을 위해 설치하는 어플리케이션&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.synology.com&#x2F;ko-kr&#x2F;support&#x2F;download&#x2F;DS220j?version=7.1#utilities&quot;&gt;Synology Client Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;flow-applications&quot;&gt;Flow Applications&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;bettertouchtool&quot;&gt;Bettertouchtool&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;키 바인딩 어플리케이션&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;folivora.ai&#x2F;&quot;&gt;BettertouchTool&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;alfred&quot;&gt;Alfred&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;생산성 증가를 위한 키 바인딩 및 플로우 생성 어플리케이션&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.alfredapp.com&quot;&gt;Alfred Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;logi-options&quot;&gt;Logi Options&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;MX Master 3를 이용하기 위한 어플리케이션&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.logitech.com&#x2F;ko-kr&#x2F;software&#x2F;options.html&quot;&gt;Logi Options Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;communicative-applications&quot;&gt;Communicative Applications&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;kakaotalk&quot;&gt;KakaoTalk&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;apps.apple.com&#x2F;kr&#x2F;app&#x2F;kakaotog&#x2F;id869223134?mt=12&quot;&gt;KakaoTalk Download&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;slack&quot;&gt;Slack&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;slack.com&#x2F;intl&#x2F;ko-kr&#x2F;downloads&#x2F;instructions&#x2F;mac&quot;&gt;Slck Download&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-applications&quot;&gt;Other Applications&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;obsidian&quot;&gt;Obsidian&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;마크다운 파일 관리 어플리케이션&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;obsidian.md&#x2F;download&quot;&gt;Obsidian Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;google-chrome&quot;&gt;Google Chrome&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.google.co.kr&#x2F;chrome&#x2F;?brand=YTUH&amp;amp;gclid=CjwKCAjw6IiiBhAOEiwALNqncV3Bsl0fyCe93vDqBYB2CHyCZtHIx8FwqzZMC6XMycI8QQT58DuK8xoCX44QAvD_BwE&amp;amp;gclsrc=aw.ds&quot;&gt;Chrome Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;draw-io&quot;&gt;draw.io&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgraph&#x2F;drawio-desktop&#x2F;releases&#x2F;tag&#x2F;v21.2.1&quot;&gt;draw.io Download&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;docs&#x2F;?dv=osx&quot;&gt;Visual Studio Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-04-18 수업정리</title>
		<published>2023-04-18T00:00:00+00:00</published>
		<updated>2023-04-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-4-18-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-4-18-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Extended BNF&lt;&#x2F;li&gt;
&lt;li&gt;Syntax Chart&lt;&#x2F;li&gt;
&lt;li&gt;Recursive-Descent Parser&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;extended-bnf&quot;&gt;Extended BNF&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;BNF(Backus-Naur-Form에서 추가로 몇 가지 meta-symbol이 추가된 표기법이다.&lt;&#x2F;li&gt;
&lt;li&gt;$\epsilon, \lambda$ 등 아무 것도 없음을 나타낼 경우 그냥 공백으로 표기한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;optional-elements&quot;&gt;optional Elements&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ... ]
&lt;ul&gt;
&lt;li&gt;&amp;lt;number&amp;gt; ::= &amp;lt;digits&amp;gt;[.&amp;lt;digits&amp;gt;]&lt;&#x2F;li&gt;
&lt;li&gt;숫자의 옵션으로 소수점및 소수 부분을 포함할 수 있다는 규칙이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;alternative-elements&quot;&gt;Alternative Elements&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;( ... | ... | ... )
&lt;ul&gt;
&lt;li&gt;&amp;lt;signed number&amp;gt; ::= ( + | - ) &amp;lt;number&amp;gt;&lt;&#x2F;li&gt;
&lt;li&gt;부호가 있는 정수는 &#x27;+&#x27; 또는 &#x27;-&#x27;의 nonterminal을 &amp;lt;number&amp;gt;에 left-associative하게 가진다는 규칙이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sequence-of-elements&quot;&gt;Sequence of Elements&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;{ ... } or ${ ... }^*$ or ${ ... }^+$&lt;&#x2F;li&gt;
&lt;li&gt;*, +를 활용한 표기는 non-standard이다.&lt;&#x2F;li&gt;
&lt;li&gt;&amp;lt;identifier&amp;gt; ::= &amp;lt;letter&amp;gt; { &amp;lt;letter&amp;gt; | &amp;lt;digit&amp;gt; }&lt;&#x2F;li&gt;
&lt;li&gt;식별자는 &amp;lt;letter&amp;gt;뒤에 &amp;lt;letter&amp;gt;또는 &amp;lt;digit&amp;gt;이 복수로 위치할 수 있다는 규칙이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;syntax-chart&quot;&gt;Syntax Chart&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Syntax Diagram, Railroad Diagram이라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;syntactic rules를 도식으로 나타낸 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;LHS(EBNF의 좌항)는 시작 화살표의 좌측에 위치한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 예시는 &amp;lt;expr&amp;gt; ::= { (&#x27;+&#x27; | &#x27;-&#x27;) } 을 Syntax Chart로 나타낸 것이다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;railroad_diagram.png&quot; alt=&quot;Railroad Diagram&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pascal-if-then-else-railroad-diagram&quot;&gt;Pascal if-then-else Railroad Diagram&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;pascal_railroad_diagram.png&quot; alt=&quot;Pascal Railroad Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;위의 Railroad Diagram으로부터 역으로 EBNF를 뽑아낼 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;EBNF&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-EBNF &quot;&gt;&lt;code class=&quot;language-EBNF&quot; data-lang=&quot;EBNF&quot;&gt;&lt;span&gt;&amp;lt;if else then&amp;gt; := &amp;#39;if&amp;#39; &amp;lt;boolean expression&amp;gt; &amp;#39;then&amp;#39; &amp;lt;compound&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;					( &amp;lt;else if&amp;gt; | &amp;lt;else&amp;gt; ) &amp;#39;end&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;recursive-descent-parser&quot;&gt;Recursive-Descent Parser&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;parser란 string을 tree(generalized list)로 바꾸는 프로그램이다.
&lt;ul&gt;
&lt;li&gt;주어진 문법에 대해서 parser는 syntax를 check한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Parser Generator
&lt;ul&gt;
&lt;li&gt;YACC(Bison)&lt;&#x2F;li&gt;
&lt;li&gt;AntLR&lt;&#x2F;li&gt;
&lt;li&gt;CUP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Parser를 직접 만들수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;recursive-descent-parser-1&quot;&gt;Recursive-Descent Parser&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;순환 하강 구문분석기&lt;&#x2F;li&gt;
&lt;li&gt;parse tree의 위쪽 노드에서부터 하강하면서 이동하여 검사한다.&lt;&#x2F;li&gt;
&lt;li&gt;한 노드에서 재귀적으로 이동하여 검사할 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;transform-grammar-to-recursive-descent-parser&quot;&gt;Transform Grammar to Recursive-Descent Parser&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;문법은 left-factored해야 하며, EBNF를 사용하여 left-recursion을 제거해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 논터미널 기호에 대해 right-hand side의 production rule을 simulation하는 subprogram을 생성해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;토큰 등 터미널 기호에 대해서는 match(eat up)를 통해 symbol처리를 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Global variable LA(lookahead)를 사용하여 현재 토큰을 저장한다.
&lt;ul&gt;
&lt;li&gt;추가적인 속성 문법을 위한 변수를 선언해야 할 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;yylex()
&lt;ul&gt;
&lt;li&gt;다음 토큰을 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;match(int t)
&lt;ul&gt;
&lt;li&gt;(인자로 받은 토큰에 대해) 검사 후 전진&lt;&#x2F;li&gt;
&lt;li&gt;현재 토큰에 대해 처리한다.&lt;&#x2F;li&gt;
&lt;li&gt;문법에 부합하면 전진&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 matching parentheses에 대한 grammar를 검사하는 parser이다.
&lt;ul&gt;
&lt;li&gt;우선 문법을 정의한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;EBNF&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-EBNF &quot;&gt;&lt;code class=&quot;language-EBNF&quot; data-lang=&quot;EBNF&quot;&gt;&lt;span&gt;A := eof | L A
&lt;&#x2F;span&gt;&lt;span&gt;L := S &amp;#39;newline&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;S := (S)S | ;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;이를 바탕으로 위에서 설명한 규칙에 맞게 C언어로 parser를 작성하면 아래와 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; LA;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;yylex&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getchar&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(LA == t) LA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yylex&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Syntax Error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(LA == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(LA == EOF)
&lt;&#x2F;span&gt;&lt;span&gt;    ;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    LA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yylex&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;실행 결과
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;paresr_execute.png&quot; alt=&quot;matching parentheses execution&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-04-13 수업정리</title>
		<published>2023-04-13T00:00:00+00:00</published>
		<updated>2023-04-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-4-13-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-4-13-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Review&lt;&#x2F;li&gt;
&lt;li&gt;Prolog Intro&lt;&#x2F;li&gt;
&lt;li&gt;SWI-Prolog &amp;amp; Demo&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Axiomatic System(공리계)
&lt;ul&gt;
&lt;li&gt;공리의 유한 집합, 사실(fact)과 추론 규칙(rules)로 구성된다.
&lt;ul&gt;
&lt;li&gt;사실(predicate) : 아래와 같이 표현 가능하다. 항상 참이다.$$\frac{true}{fact}$$&lt;&#x2F;li&gt;
&lt;li&gt;추론 규칙(rules) : 가정(hypothetics) 술어들을 바탕으로 결론 술어를 도출해 내는 규칙이다. 아래와 같이 표현 가능하다.$$\frac{predicate^{\ *}}{predicate}$$$$predicate^{\ *} \models predicate$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Hoare Logic$${P}\ S\ {Q}$$
&lt;ul&gt;
&lt;li&gt;P, S, Q를 묶어서 Hoare Triple이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;P : 사전조건(input spec)&lt;&#x2F;li&gt;
&lt;li&gt;Q : 사후조건(output spec)&lt;&#x2F;li&gt;
&lt;li&gt;output spec으로부터 input spec이 derive된다면 올바른 program이다. 이때 input spec P의 최약 사전 조건(weakest Precondition)을 Axiomatic System을 통해 찾을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;output spec으로부터 input spec을 derive 할 수 있음을 증명하기 위해 몇 가지 Axiom을 배웠다.
&lt;ul&gt;
&lt;li&gt;Assignment Axiom&lt;&#x2F;li&gt;
&lt;li&gt;The rule of consequence&lt;&#x2F;li&gt;
&lt;li&gt;The rule of compostion&lt;&#x2F;li&gt;
&lt;li&gt;The rule of selection&lt;&#x2F;li&gt;
&lt;li&gt;The rule of iteration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;특히 rule of iteration에서는 Invarient Variable I를 찾는 과정이 중요했다. I가 숨겨져 있으므로 직관적으로 판단하기가 힘들었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;prolog-intro&quot;&gt;Prolog Intro&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;prolog-history&quot;&gt;Prolog History&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;1972년에 Alain Colmerauer와 Philippe Roussel이 만든 언어&lt;&#x2F;li&gt;
&lt;li&gt;1979년에 Kowalski의 논문 Algorithm = Logic + Control, CACM에 의해 널리 알려졌다.&lt;&#x2F;li&gt;
&lt;li&gt;일본 정부에서 5세대 프로젝트의 기본 언어로 채택하는 등 나름 영향력이 있었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;prolog-resources&quot;&gt;Prolog Resources&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Prolog Env
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.swi-prolog.org&#x2F;&quot;&gt;SWI Prolog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.visual-prolog.com&#x2F;&quot;&gt;Visual Prolog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.dobrev.com&#x2F;&quot;&gt;Strawberry Prolog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Prolog Docs
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cpp.edu&#x2F;~jrfisher&#x2F;www&#x2F;prolog_tutorial&#x2F;contents.html&quot;&gt;J.R. Fisher, Prolog Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.iso.org&#x2F;standard&#x2F;73194.html&quot;&gt;Prolog part1 - General core&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pauillac.inria.fr&#x2F;~deransar&#x2F;prolog&#x2F;docs.html&quot;&gt;J.P.E. Hudgson, Prolog : The ISO Standard Documents, 1999&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Prolog Books
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pearson.com&#x2F;uk&#x2F;educators&#x2F;higher-education-educators&#x2F;program&#x2F;Bratko-Prolog-Programming-for-Artificial-Intelligence-4th-Edition&quot;&gt;Ivan Bratko, Prolog Programming for Artificial Intelligence, 4th Ed., AddisonWesley, 2012&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.learnprolognow.org&#x2F;&quot;&gt;Patrick Blackburn, Johan Bos and Kristina Striegnitz, Learn Proglog Now!, College Publication, 2006&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amzi.com&#x2F;ExpertSystemsInProlog&#x2F;index.htm&quot;&gt;Dennis Merritt, Building Expert System in Prolog, Springer-Verlag, 1989&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;procedural-language-vs-declarative-language&quot;&gt;Procedural Language vs Declarative Language&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Procedural Language(순차적 프로그래밍 언어) : BASIC, FORTRAN, C++, Pascal, Java ...
&lt;ul&gt;
&lt;li&gt;computational step을 하나하나 명시해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 computational step이란 instruction, statement, procedure을 통한 계산 과정이다.&lt;&#x2F;li&gt;
&lt;li&gt;어떻게(how) 문제를 풀어야 하는지 기술한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Declarative Language(선언적 프로그래밍 언어) : LISP, Prolog, ML ...
&lt;ul&gt;
&lt;li&gt;computational rules를 명시한다.&lt;&#x2F;li&gt;
&lt;li&gt;fact는 computational rules의 special cases이다.&lt;&#x2F;li&gt;
&lt;li&gt;무엇(what)을 풀어야 하는지 기술한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Procedural Language, Declarative Language가 how와 what의 차이를 보이기는 하지만, 현실에서는 이 둘이 항상 확실히 구별되지는 않는다.
&lt;ul&gt;
&lt;li&gt;순차적 언어에도 what에 대한 특징이 있다.(타입 선언)&lt;&#x2F;li&gt;
&lt;li&gt;선언적 언어에도 how에 대한 특징이 있다.(Prolog의 cut)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;computational-model-of-prolog&quot;&gt;Computational Model of Prolog&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;1차 술어 계산(1st-order predicate calculus)을 기반으로 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Rules(규칙) : Horn clause(Horn 절)을 이용하여 표시한다.
&lt;ul&gt;
&lt;li&gt;Horn절은 Conjunctive Normal Form으로 생각하면 이해하기 쉽다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;interesting(L) :- lectureByWoo(L), language(L).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Fact(사실) : 아무 조건 없이 성립하는 명제&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;fact.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;goal(질의) : 사실인지 확인하고 싶은 명제
&lt;ul&gt;
&lt;li&gt;질의의 결과는 참(true)또는 거짓(false)이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;-? goal.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;아래는 사실, 규칙, 질의 과정을 포함하는 Prolog 프로그램의 예시이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;lectureByWoo(prolog).
&lt;&#x2F;span&gt;&lt;span&gt;lectureByWoo(scheme).
&lt;&#x2F;span&gt;&lt;span&gt;language(prolog).
&lt;&#x2F;span&gt;&lt;span&gt;language(scheme).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;interesting(L) :- lectureByWoo(L), language(L).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;실행 결과&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- interesting(prolog).
&lt;&#x2F;span&gt;&lt;span&gt;true.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- interesting(scheme).
&lt;&#x2F;span&gt;&lt;span&gt;true.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- interesting(cpp).
&lt;&#x2F;span&gt;&lt;span&gt;false.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;swi-prolog-demo&quot;&gt;SWI-Prolog &amp;amp; Demo&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 소스 편집&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- edit(file(&amp;#39;filename.pl&amp;#39;)).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 파일 참조(load)
&lt;ul&gt;
&lt;li&gt;두 표현은 같은 표현이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- consult(filename).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?- [filename].
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;질의(목적의 명시)
&lt;ul&gt;
&lt;li&gt;당연하지만 parent rule이 명시되어 있어야 아래와 같은 질의가 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;답변에 만족했다면 질의 이후 &amp;quot;Enter&amp;quot; 입력&lt;&#x2F;li&gt;
&lt;li&gt;답변에 만족하지 않았다면 &amp;quot;;&amp;quot; 를 입력하여 계속 질의&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- parent(X, jim).
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;해석기 종료&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Prolog&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Prolog &quot;&gt;&lt;code class=&quot;language-Prolog&quot; data-lang=&quot;Prolog&quot;&gt;&lt;span&gt;?- halt.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;basic-swi-prolog-commands&quot;&gt;Basic SWI-Prolog Commands&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 명령어들은 SWI에만 특별히 존재하는 명령어이다. 리눅스 명령어에서 따옷 듯 하다.
&lt;ul&gt;
&lt;li&gt;pwd : 현재 디렉토리 출력&lt;&#x2F;li&gt;
&lt;li&gt;cd : 현재 디렉토리 변경&lt;&#x2F;li&gt;
&lt;li&gt;ls : 현재 디렉토리 파일 list&lt;&#x2F;li&gt;
&lt;li&gt;help : 특정 topic에 관한 도움말&lt;&#x2F;li&gt;
&lt;li&gt;edit : 파일 열기&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Synchronization(2)</title>
		<published>2023-04-12T00:00:00+00:00</published>
		<updated>2023-04-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/synchronization-2/" type="text/html"/>
		<id>https://js970.github.io/synchronization-2/</id>
		<content type="html">&lt;h2 id=&quot;synchronization-hardware&quot;&gt;Synchronization Hardware&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;lock&quot;&gt;Lock&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;critical section&lt;&#x2F;code&gt;으로 진입하지 못하도록 &lt;code&gt;key&lt;&#x2F;code&gt;를 이용하여 &lt;code&gt;lock&lt;&#x2F;code&gt;하는 것&lt;&#x2F;li&gt;
&lt;li&gt;hardware의 atomic instruction을 사용하여 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;대부분의 현대 기기들은 &lt;code&gt;atomic hardware instruction&lt;&#x2F;code&gt;을 지원한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;high level&lt;&#x2F;code&gt;코드를 &lt;code&gt;non-interruptable&lt;&#x2F;code&gt;하게 만드는 역할을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;test&lt;&#x2F;code&gt;와 &lt;code&gt;set&lt;&#x2F;code&gt;를 사용하여 구현하거나 &lt;code&gt;swap&lt;&#x2F;code&gt;을 이용하는 방법으로 &lt;code&gt;lock&lt;&#x2F;code&gt;을 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;test&lt;&#x2F;code&gt;, &lt;code&gt;set&lt;&#x2F;code&gt;, &lt;code&gt;swap&lt;&#x2F;code&gt;는 모두 &lt;code&gt;atomic hardware instruction&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;lock&lt;&#x2F;code&gt;을 사용하는 &lt;code&gt;critical section solution&lt;&#x2F;code&gt;코드이다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Acquire lock *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Critical Section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Release lock *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Remainder Section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;high level코드이지만 실제로는 &lt;code&gt;atomic instruction&lt;&#x2F;code&gt;이 사용되므로 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 대한 보호가 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Peterson&#x27;s Solution&lt;&#x2F;code&gt;으로 2개의 프로세스에 대한 Solution은 제공할 수 있지만, 실제로는 n개의 프로세스에 대한 &lt;code&gt;critical section solution&lt;&#x2F;code&gt;이 요구된다. 이는 Software적인 방식으로는 현실적인 문제가 있으므로 &lt;code&gt;Synchronization Hardwar&lt;&#x2F;code&gt;를 이용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;testandset-instruction&quot;&gt;TestAndSet Instruction&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 &lt;code&gt;lock&lt;&#x2F;code&gt;을 &lt;code&gt;TestAndSet&lt;&#x2F;code&gt;명령어를 사용하여 구현한 코드이다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;TestAndSet&lt;&#x2F;span&gt;&lt;span&gt;(boolean *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	boolean rv = *target;
&lt;&#x2F;span&gt;&lt;span&gt;	*target = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; rv;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TestAndSet&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;lcok));
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* critical section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	lock = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* remainder section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;과 &lt;code&gt;Progress&lt;&#x2F;code&gt;조건은 만족한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 &lt;code&gt;Bounded Waiting&lt;&#x2F;code&gt;조건을 만족하지 않는다는 문제가 있다.
&lt;ul&gt;
&lt;li&gt;여러 프로세스가 &lt;code&gt;critical section&lt;&#x2F;code&gt;진입을 위해 대기하고 있다고 했을 때, 현재 실행중인 프로세스가 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 대한 접근을 반환한 후 어떤 프로세스가 접근할 지 알 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;경우에 따라서는 특정 프로세스 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 접근을 하지 못하는 &lt;code&gt;starvation&lt;&#x2F;code&gt;문제가 발생할 수도 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Bounded Waiting&lt;&#x2F;code&gt;조건을 만족하지 않으므로 유효한 &lt;code&gt;critical section solution&lt;&#x2F;code&gt;으로 볼 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이는 &lt;code&gt;critical section&lt;&#x2F;code&gt;으로 진입하려는 프로세스들의 &lt;strong&gt;순서&lt;&#x2F;strong&gt;가 정해지지 않았기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;swap-instruction&quot;&gt;Swap Instruction&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Swap&lt;&#x2F;code&gt;명령어는 &lt;code&gt;key&lt;&#x2F;code&gt;와 &lt;code&gt;lock&lt;&#x2F;code&gt;값을 바꾸는 함수이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;lock&lt;&#x2F;code&gt;을 &lt;code&gt;Swap&lt;&#x2F;code&gt;명령어를 사용하여 구현한 코드이다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Swap &lt;&#x2F;span&gt;&lt;span&gt;(boolean *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, boolean *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	boolean temp = *a;
&lt;&#x2F;span&gt;&lt;span&gt;	*a = b;
&lt;&#x2F;span&gt;&lt;span&gt;	*b = temp;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(key == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Swap&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;lock, &amp;amp;key);
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* critical section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	lock = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* remainder section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;TestAndSet&lt;&#x2F;code&gt;의 경우와 마찬가지로 &lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;과 &lt;code&gt;Progress&lt;&#x2F;code&gt;조건은 만족하지만 &lt;code&gt;Bounded Waiting&lt;&#x2F;code&gt;조건을 만족하지 않아 유효한 &lt;code&gt;critical section solution&lt;&#x2F;code&gt;으로 볼 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bounded-waiting-joggeo-haeggyeo&quot;&gt;Bounded Waiting 조건 해결&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 &lt;strong&gt;순서&lt;&#x2F;strong&gt;를 정해서 &lt;code&gt;Bounded Waiting&lt;&#x2F;code&gt;조건을 만족시키도록 &lt;code&gt;TestAndSet&lt;&#x2F;code&gt;을 사용하는 코드이다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	waiting[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(waiting[i] &amp;amp;&amp;amp; key)
&lt;&#x2F;span&gt;&lt;span&gt;		key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TestAndSet&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;lock);
&lt;&#x2F;span&gt;&lt;span&gt;	waiting[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* critical section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	j = (i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) % n;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;((j != i) &amp;amp;&amp;amp; !waiting[j])
&lt;&#x2F;span&gt;&lt;span&gt;		j = (j+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) % n;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(j == i)
&lt;&#x2F;span&gt;&lt;span&gt;		lock = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		waiting[j] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* remainder section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;critical section&lt;&#x2F;code&gt;을 나온 뒤 어떤 프로세스에게 &lt;code&gt;critical section&lt;&#x2F;code&gt;의 점유를 넘겨줄 지를 정한다.&lt;&#x2F;li&gt;
&lt;li&gt;위 코드상으로는 &lt;code&gt;i == j&lt;&#x2F;code&gt;가 아니라면 프로세스 i+1에게 &lt;code&gt;critical section&lt;&#x2F;code&gt;의 점유를 넘긴다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;i == j&lt;&#x2F;code&gt;인 경우는 현재 디기 중인 프로세스가 프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;밖에 없는 상태이므로 다시 &lt;code&gt;critical section&lt;&#x2F;code&gt;으로 들어가면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;waiting&lt;&#x2F;code&gt;배열을 통해 &lt;code&gt;critical section&lt;&#x2F;code&gt;접근을 대기하는 프로세스는  순차대로 접근이 보장된다. &lt;&#x2F;li&gt;
&lt;li&gt;최악의 경우에도 n-1번의 다른 프로세스의 &lt;code&gt;critical section&lt;&#x2F;code&gt;접근이 끝난 뒤에는 &lt;code&gt;critical section&lt;&#x2F;code&gt;으로의 접근이 보장되므로 &lt;code&gt;Bounded waiting&lt;&#x2F;code&gt;을 만족한다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 이 Solution은 유효한 &lt;code&gt;critical section solution&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;semaphore&quot;&gt;Semaphore&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Semaphore&lt;&#x2F;code&gt;는  &lt;code&gt;wait()&lt;&#x2F;code&gt;, &lt;code&gt;signal()&lt;&#x2F;code&gt;의 두 개의 &lt;code&gt;atomic operation&lt;&#x2F;code&gt;에 의해서만 접근 가능한 정수 변수이다. &lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;wait()&lt;&#x2F;code&gt;을 구현한 코드이다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(S) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; S &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	S--;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wait()&lt;&#x2F;code&gt;는 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;값을 1만큼 감소시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Semaphore&lt;&#x2F;code&gt;값이 0이하라면 대기한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;signal()&lt;&#x2F;code&gt;을 구현한 코드이다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(s) {
&lt;&#x2F;span&gt;&lt;span&gt;	S++;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;signal()&lt;&#x2F;code&gt;은 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;값을 1만큼 증가시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;semaphoreyi-jjonryu&quot;&gt;Semaphore의 종류&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Binary Semaphore(0..1)&lt;&#x2F;code&gt; : &lt;code&gt;Semaphore&lt;&#x2F;code&gt;는 0 또는 1의 값만 가질 수 있다(&lt;code&gt;mutex lock&lt;&#x2F;code&gt;이라고도 한다).
&lt;ul&gt;
&lt;li&gt;초기값은 1로 설정된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Counting Semaphore(0..N)&lt;&#x2F;code&gt; : &lt;code&gt;Semaphore&lt;&#x2F;code&gt;는 는 제한된 범위의 모든 값을 가질 수 있다.
&lt;ul&gt;
&lt;li&gt;여러 개의 &lt;code&gt;resources&lt;&#x2F;code&gt;가 있을 경우 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;semaphoreyi-sahyon&quot;&gt;Semaphore의 사용&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;critical section problem&lt;&#x2F;code&gt;을 해결하기 위해 아래 코드처럼 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;를 사용할 수 있다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* critical sesction *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* remainder section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Process Syncronization&lt;&#x2F;code&gt;을 위해 아래 코드처럼 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;를 사용할 수 있다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Process P1*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;s1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(sync);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Process P2 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(sync);
&lt;&#x2F;span&gt;&lt;span&gt;s2;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sync&lt;&#x2F;code&gt;의 값이 0인 상태라면, s2는 Process P1의 signal이 실행되기 전에는 실행되지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;semaphoreyi-guhyeon&quot;&gt;Semaphore의 구현&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Busy waiting&lt;&#x2F;code&gt; : 어떤 프로세스가 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 있는 경우, &lt;code&gt;critical section&lt;&#x2F;code&gt;에 접근을 시도하는 다른 프로세스들은 loop의 entry code를 계속해서 계산하면서 loop을 순회하게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Blocking &amp;amp; Wake-up&lt;&#x2F;code&gt; : &lt;code&gt;Busy waiting&lt;&#x2F;code&gt;문제를 해결하기 위한 방법이다.
&lt;ul&gt;
&lt;li&gt;각각의 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;에는 &lt;code&gt;waiting queue&lt;&#x2F;code&gt;가 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스가 &lt;code&gt;wait()&lt;&#x2F;code&gt;를 실행시키고 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;값이 음수임이 확인되면 프로세스를 &lt;code&gt;waiting queue&lt;&#x2F;code&gt;에 삽입하여 동작을 중지한다(&lt;code&gt;block&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;waiting queue&lt;&#x2F;code&gt;를 사용하여 다음에 실행될 프로세스의 순서가 확정되므로 &lt;code&gt;Bounded Waiting&lt;&#x2F;code&gt;조건을 만족한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;semaphoreyi-munjejjeo&quot;&gt;Semaphore의 문제점&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Deadlock
&lt;ul&gt;
&lt;li&gt;두 개 이상의 프로세스가 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;를 점유한 채로 다른 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;를 &lt;code&gt;wait()&lt;&#x2F;code&gt;하고 있는 상태&lt;&#x2F;li&gt;
&lt;li&gt;자원을 점유한 상태에서 자원을 해제하지 않고 다른 자원을 요청하는 상황이 상호 프로세스 간 맞물린 것&lt;&#x2F;li&gt;
&lt;li&gt;아래 코드에서 &lt;code&gt;Semaphore&lt;&#x2F;code&gt; S, Q가 각각 1로 초기화 되었다면 P0과 P1은 &lt;code&gt;deadlock&lt;&#x2F;code&gt;상태에 빠지게 된다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Process P0 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(S);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(Q);
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(S);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(Q);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Process P1 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(Q);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(S);
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(Q);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(S);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;P0의 &lt;code&gt;wait(S)&lt;&#x2F;code&gt;가 실행되면서 S = 0이 된다.&lt;&#x2F;li&gt;
&lt;li&gt;P1의 &lt;code&gt;wait(Q)&lt;&#x2F;code&gt;가 실행되면서 Q = 0이 된다.&lt;&#x2F;li&gt;
&lt;li&gt;P0, P1는 각각 Q, S를 요구하는 상황이 되는데(&lt;code&gt;wait(Q)&lt;&#x2F;code&gt;, &lt;code&gt;wait(S)&lt;&#x2F;code&gt;호출) 이때 서로가 자원을 해제하지 않으면 영원히 교착 상태에 빠져 탈출하지 못한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Starvation
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Indefinite blocking&lt;&#x2F;code&gt;이라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스가 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;의 queue에서 빠져나오지 못해 사실상 중단된 상태이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;deadlock&lt;&#x2F;code&gt;으로 인해 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;의 queue에 있는 다른 프로세스들이 실행되지 못하여 발생한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Priority Inversion
&lt;ul&gt;
&lt;li&gt;높은 우선순위를 가지는 프로세스가 낮은 우선순위를 가지는 프로세스가 점유한 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;를 대기중일 때 발생하는 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림과 같은 상황은 독립된 프로세스 간에는 상관이 없지만 서로 연관되어 있으면서 서로 다른 우선순위를 가지는 프로세스들에 의해 발생한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;priority_inversion.png&quot; alt=&quot;Priority Inversion&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;위 그림에서 우선순위는 Process A가 Process B보다 높지만, Process C에서 점유한  &lt;code&gt;Semaphore&lt;&#x2F;code&gt;에 의해 프로세스가 block되면서 Process B가 Process A보다 먼저 실행되는 문제가 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;priority inversion&lt;&#x2F;code&gt;문제를 해결하기 위해 &lt;code&gt;priority-inheritance protocol&lt;&#x2F;code&gt;을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;priority-inheritance protocol&lt;&#x2F;code&gt;이란 낮은 우선순위(C, 5)를 가지는 프로세스의 우선순위를 일시적으로 높은 우선순위를 가지는 프로세스의 우선순위(A, 1)를 가지도록 우선순위를 높이는 것을 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;이후 높은 프로세스에서 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;에 의해 block이 일어나지 않는 시점이 되면, 낮은 프로세스의 우선순위를 원래대로 되돌린다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;classical-problems&quot;&gt;Classical Problems&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;본 절에서는 대표적인 동기화 문제에 대해서 알아본다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;bounded-buffer-problem&quot;&gt;Bounded-Buffer Problem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;N개의 buffer가 각각 하나의 item을 hold할 수 있다고 하자.&lt;&#x2F;li&gt;
&lt;li&gt;아래와 같은 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;를 사용한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutex&lt;&#x2F;code&gt; : 버퍼 pool에 &lt;code&gt;Mutual Exclusive&lt;&#x2F;code&gt;하게 접근하기 위한 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;, 1로 초기화된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;full&lt;&#x2F;code&gt; : &lt;code&gt;full buffer&lt;&#x2F;code&gt;의 개수를 세기 위한 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;, 0으로 초기화된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;empty&lt;&#x2F;code&gt; : &lt;code&gt;empty buffer&lt;&#x2F;code&gt;의 개수를 세기 위한 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;, N으로 초기화된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;item을 생산하는 프로세스 Producer의 코드는 아래와 같다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Produce an item *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(empty);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Add next product to buffer *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(full);
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutex&lt;&#x2F;code&gt;를 이용하여 버퍼 pool로의 &lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;을 보장한다.&lt;&#x2F;li&gt;
&lt;li&gt;생산자 프로세스에서 item을 생산할 예정이므로 &lt;code&gt;wait(empty)&lt;&#x2F;code&gt;를 사용해 item을 저장할 수 있는 버퍼가 있는지 확인한다.&lt;&#x2F;li&gt;
&lt;li&gt;작업이 끝나면 버퍼 pool로 다른 프로세스가 접근할 수 있도록 &lt;code&gt;signal(mutex)&lt;&#x2F;code&gt;를 호출한다.&lt;&#x2F;li&gt;
&lt;li&gt;작업이 끝나면 생산자 프로세스에서 item을 생산하였으므로 &lt;code&gt;full&lt;&#x2F;code&gt;을 증가시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;item을 소비하는 프로세스 Consumer의 코드는 아래와 같다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(full);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* remove an item from the buffer *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(empty);
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutex&lt;&#x2F;code&gt;를 이용하여 버퍼 pool로의 &lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;을 보장한다.&lt;&#x2F;li&gt;
&lt;li&gt;소비자 프로세스에서 item을 소비할 예정이므로 &lt;code&gt;wait(full)&lt;&#x2F;code&gt;을 통해 사용할 item이 있는지 확인한다.&lt;&#x2F;li&gt;
&lt;li&gt;작업이 끝나면 버퍼 pool로 다른 프로세스가 접근할 수 있도록 &lt;code&gt;signal(mutex)&lt;&#x2F;code&gt;를 호출한다.&lt;&#x2F;li&gt;
&lt;li&gt;작업이 끝나면 소비자 프로세스에서 item을 소비하였으므로 &lt;code&gt;empty&lt;&#x2F;code&gt;을 증가시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;참고로 프로세스 Consumer의 코드를 아래와 같이 수정하면 &lt;code&gt;deadlock&lt;&#x2F;code&gt;이 발생한다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(full);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* remove an item from the buffer *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(empty);
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;만약 &lt;code&gt;full&lt;&#x2F;code&gt;의 값이 0인 상황에서 Consumer가 실행되어 &lt;code&gt;mutex&lt;&#x2F;code&gt;를 점유하게 된다고 하자.&lt;&#x2F;li&gt;
&lt;li&gt;이때 &lt;code&gt;full&lt;&#x2F;code&gt;의 값이 0이므로 Consumer는 &lt;code&gt;wait(full)&lt;&#x2F;code&gt;에서 루프에 빠진다.&lt;&#x2F;li&gt;
&lt;li&gt;Consumer가 루프에서 탈출하기 위해서는 Product에서 item을 생산해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 &lt;code&gt;mutex&lt;&#x2F;code&gt;가 Consumer에 의해 점유된 상태이므로 Product는 &lt;code&gt;wait(mutex)&lt;&#x2F;code&gt;에서 루프에 빠진다.&lt;&#x2F;li&gt;
&lt;li&gt;서로가 자원을 점유한 상태에서 상대 프로세스의 자원을 대기중인 상황이므로 &lt;code&gt;deadlock&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 위 상황을 도식으로 나타낸 것이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;boundedBuffer.png&quot; alt=&quot;Bounded Buffer Deadlock&quot; &#x2F;&gt; &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;readers-and-writers-problem&quot;&gt;Readers and Writers Problem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Concurrent processes 간에 Data set이 공유되고 있다고 하자.
&lt;ul&gt;
&lt;li&gt;Readers : &lt;strong&gt;only read&lt;&#x2F;strong&gt; the data set, don&#x27;t perform any updates&lt;&#x2F;li&gt;
&lt;li&gt;Writers : can both &lt;strong&gt;read and write&lt;&#x2F;strong&gt; the data set&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래의 조건을 만족해야 한다.
&lt;ul&gt;
&lt;li&gt;동시에 여러 Readers가 읽는 동작을 수행하는 것을 허용한다. &lt;&#x2F;li&gt;
&lt;li&gt;하지만 오직 하나의 writer만 shared data에 접근 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;이에 따른 shared data에 대한 접근 제어가 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Semaphores &amp;amp; Shared data
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readcount&lt;&#x2F;code&gt; : 몇 개의 reader 프로세스가 data set을 read하고 있는지 count&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mutex&lt;&#x2F;code&gt; : 초기값은 1로 설정되며, &lt;code&gt;readcount&lt;&#x2F;code&gt;가 업데이트 될 때의 &lt;code&gt;mutual exclusion&lt;&#x2F;code&gt;을 보장한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;wrt&lt;&#x2F;code&gt; : 초기값은 1로 설정되며, writer의 &lt;code&gt;mutual exclusion&lt;&#x2F;code&gt;을 보장한다.(writer가 1개일 때는 의미x)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래에서 설명한 코드들은 writer process가 하나인 경우에 대한 solution이다.&lt;&#x2F;li&gt;
&lt;li&gt;Writer의 코드는 아래와 같다.&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(wrt);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; writing is performed
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(wrt);
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Reader의 코드는 아래와 같다.&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; readcount에 대한 mutual exclusion
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;	readcount++;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 첫 번째 reader의 경우 데이터가 쓰여졌는지 확인해야 한다.
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(readcount == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;(wrt);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; reading is performed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; readcount에 대한 mutual exclusion
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;	readcount--;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 마지막 reader의 경우 writer가 쓸 수 있는 상태임을 알려줘야 한다.
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(readcount == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(wrt);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;signal&lt;&#x2F;span&gt;&lt;span&gt;(mutex);
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dining-philoosophers-problem&quot;&gt;Dining-Philoosophers Problem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;식사하는 철학자 문제(사진출처 : 위키피디아)&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;dining_philosophers.png&quot; alt=&quot;Dining Philosophers Problem&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;굉장히 큰 규모의 concurrent process의 동시제어가 필요한 상황에 대해 다룬다.&lt;&#x2F;li&gt;
&lt;li&gt;문제 설명
&lt;ul&gt;
&lt;li&gt;다섯 명의 철학자가 원탁에 앉아 있고, 음식을 먹기 위해서는 양 옆의 젓가락을 동시에 들어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 바로 옆의 사람이 음식을 먹기 위해서는 본인이 젓가락을 내려 놓아야 하는 상황이다.&lt;&#x2F;li&gt;
&lt;li&gt;다섯 명 모두가 서로를 기다리는 &lt;code&gt;deadlock&lt;&#x2F;code&gt;상태에 빠질 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;chopstick을 &lt;code&gt;semaphore&lt;&#x2F;code&gt;로, philosophers를 &lt;code&gt;process&lt;&#x2F;code&gt;라고 생각하자.
&lt;ul&gt;
&lt;li&gt;젓가락의 사용 여부를 mutex로 0&#x2F;1로 표현한다.(초기값은 1로 설정된다.)&lt;&#x2F;li&gt;
&lt;li&gt;규칙을 tough하게 설정하여 &lt;code&gt;deadlock&lt;&#x2F;code&gt;이 발생하지 않도록 만들어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;monitor&quot;&gt;Monitor&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Semaphore&lt;&#x2F;code&gt;를 잘못 사용하면 &lt;code&gt;deadlock&lt;&#x2F;code&gt;을 포함한 탐지하기 힘든 error를 유발한다.
&lt;ul&gt;
&lt;li&gt;signal(mutex) -&amp;gt; wait(mutex) : &lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;을 만족하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;wait(mutex) -&amp;gt; wait(mutex) : &lt;code&gt;deadlock&lt;&#x2F;code&gt;상태에 빠질 위험이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;wait(mutex), signal(mutex)를 빠트린 경우 : &lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;, &lt;code&gt;deadlock&lt;&#x2F;code&gt;모두 유발 가능&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Java에서는 &lt;code&gt;Semaphore&lt;&#x2F;code&gt;를 잘못 사용하는 문제 등을 high level에서 해결하기 위해 &lt;code&gt;Monitor&lt;&#x2F;code&gt;를 제공한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Monitor&lt;&#x2F;code&gt;의 동작은 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;monitor.png&quot; alt=&quot;Monitor&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;모니터 내부의 프로시저들이 순차적으로 실행된다.&lt;&#x2F;li&gt;
&lt;li&gt;condition variable을 사용한다.(그림에서의 x와 y)&lt;&#x2F;li&gt;
&lt;li&gt;condition variable에 대한 wait(), signal()메소드를 제공한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wait&lt;&#x2F;code&gt; : 어떤 프로세스를 대기 상태로 변경&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;signal&lt;&#x2F;code&gt; : 대기 상태에서 다시 resume&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래 코드의 프로시저(P1, P2, P3 ... )는 한 번에 하나만 실행 가능하다.&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;monitor monotor_name {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; shared variable declaration
&lt;&#x2F;span&gt;&lt;span&gt;	procedure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;P1&lt;&#x2F;span&gt;&lt;span&gt;(...) {...}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	procedure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;P2&lt;&#x2F;span&gt;&lt;span&gt;(...) {...}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	procedure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;P3&lt;&#x2F;span&gt;&lt;span&gt;(...) {...}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-04-11 수업정리</title>
		<published>2023-04-11T00:00:00+00:00</published>
		<updated>2023-04-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-4-11-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-4-11-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;PL Review&lt;&#x2F;li&gt;
&lt;li&gt;Axiomatic System&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pl-review&quot;&gt;PL Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Programming Language는 Syntax와 Semantic으로 나타내어진다.&lt;&#x2F;li&gt;
&lt;li&gt;Syntax : CFG(Grammar)로 표기&lt;&#x2F;li&gt;
&lt;li&gt;Semantic
&lt;ul&gt;
&lt;li&gt;Static Semantic
&lt;ul&gt;
&lt;li&gt;Attribute Grammar : 속성 문법, (문법 규칙 + 속성 계산 규칙)을 통해 컴파일 이전에 의미에 대한 정의를 끝낸다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Semantic
&lt;ul&gt;
&lt;li&gt;Operational Semantics : 추상기계의 상태변화로 의미를 나타낸다.&lt;&#x2F;li&gt;
&lt;li&gt;Denotational Semantics : 의미 함수를 사용하여 프로그래밍 언어의 의미를 나타낸다.&lt;&#x2F;li&gt;
&lt;li&gt;Axiomatic Semantics : 조건 변화를 이용하여 프로그래밍 언어의 의미를 나타낸다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;axiomatic-semantics&quot;&gt;Axiomatic Semantics&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 요소에 대한 사전조건(precondition)과 사후조건(postcondition)을 통해 프로그램의 의미를 파학한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 수행 측면 중 일부는 무시된다.&lt;&#x2F;li&gt;
&lt;li&gt;아래와 같이 표기된다.$${P}\ program\ {Q}$$
&lt;ul&gt;
&lt;li&gt;P : 프로그램 수행 전의 조건, input specification&lt;&#x2F;li&gt;
&lt;li&gt;Q : 프로그램 수행 후의 조건, output specification&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;axiomatic-system&quot;&gt;Axiomatic System&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;axiom&quot;&gt;Axiom&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;조건 없이 참이라고 전제하는 명제&lt;&#x2F;li&gt;
&lt;li&gt;가정과 결론의 형태를 갖는 axiom을 특별히 rule이라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;axiomatic-system-1&quot;&gt;Axiomatic System&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;정리(&lt;strong&gt;Theorem&lt;&#x2F;strong&gt;)를 유도할 수 있는 임의의 axiom들의 집합&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-weakest-precondition-coehya-sajjeojoggeo&quot;&gt;The Weakest Precondition(최약 사전조건)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;여러 가능한 사전조건 중 주어진 사후조건에 대해 제한이 가장 작은 사전조건&lt;&#x2F;li&gt;
&lt;li&gt;아래는 wp의 예시이다.$${P}\ sum:= 2 * x +1\ {sum&amp;gt;1}$$
&lt;ul&gt;
&lt;li&gt;위 Axiomatic Semantics의 표현에서 사전조건으로 아래와 같은 식들이 모두 가능하다.
&lt;ul&gt;
&lt;li&gt;P : x &amp;gt; 50&lt;&#x2F;li&gt;
&lt;li&gt;P : x &amp;gt; 40&lt;&#x2F;li&gt;
&lt;li&gt;P : x &amp;gt; 10&lt;&#x2F;li&gt;
&lt;li&gt;P : x &amp;gt; 0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;x &amp;gt; 50은 x &amp;gt; 40, x &amp;gt;10, x &amp;gt; 0을 imply(함의) 할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 이 중에서 사후조건 sum&amp;gt;1 에 대해 가장 제약이 적은 사전조건은 P : x &amp;gt; 0이다.
&lt;ul&gt;
&lt;li&gt;wp : x &amp;gt; 0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;만약 wp를 output specification으로부터 추론 가능하다면 해당 프로그램 정상적인 프로그램이라고 말할 수 있다.
&lt;ul&gt;
&lt;li&gt;프로그램(S)의 결과(Q)에 대한 최약 사전조건(WP)이 도출되지 않는다면 비정상적인 프로그램이다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 사용해 프로그램의 유효성에 대한 증명을 할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;assignment-axiom&quot;&gt;Assignment Axiom&lt;&#x2F;h3&gt;
&lt;p&gt;$${Q[E&#x2F;x]}\ x:= E\ {Q}$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Q{[E&#x2F;x]}란, Q의 자유 변수 x를 모두 E로 치환한 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;적용 예시
$${P}\ a:=b&#x2F;2-1\ {a&amp;lt;10}$$
$${a&amp;lt;10}[(b&#x2F;2-1)&#x2F;a]$$
$${b&#x2F;2-1 &amp;lt; 10}$$
$${b&amp;lt;22}$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-rules-of-consequences&quot;&gt;The Rules of Consequences&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Weakening the Postcondition$$\frac{{P}\ S\ {Q&#x27;}, Q&#x27; \Rightarrow Q} {{P}\ S\ {Q}}$$&lt;&#x2F;li&gt;
&lt;li&gt;Strengthen the Precondition$$\frac{P\Rightarrow P&#x27;,\ {P&#x27;}\ S\ {Q}}{{P}\ S\ {Q}}$$&lt;&#x2F;li&gt;
&lt;li&gt;Merging them$$\frac{P\Rightarrow P&#x27;,\ {P&#x27;}\ S\ {Q&#x27;},\ Q&#x27;\Rightarrow Q}{{P}\ S\ {Q}}$$&lt;&#x2F;li&gt;
&lt;li&gt;적용 예시$$\frac{x&amp;gt;5\Rightarrow x&amp;gt;3,\ {x&amp;gt;3}\ x:x-3\ {x&amp;gt;0}}{{x&amp;gt;5}\ x:x-3\ {x&amp;gt;0}}$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-rule-of-composition&quot;&gt;The Rule of Composition&lt;&#x2F;h3&gt;
&lt;p&gt;$$\frac{{P}\ S_1\ {Q},\ {Q}\ S_2\ {R}}{{P}\ S_1;S_2\ {R}}$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;S1, S2를 순차적으로 실행하면 P로부터 R을 유도할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;적용 예시$${P}\ y:=3*x + 1;x:= y+3\ {x&amp;lt;10}$$
&lt;ul&gt;
&lt;li&gt;Assignment Axiom을 적용하여 아래와 같이 식의 변형이 가능하다.$${P}\ y:=3*x+1\ {y&amp;lt;7}$$&lt;&#x2F;li&gt;
&lt;li&gt;다시 Assignment Axiom을 적용하면$${P}\Rightarrow{x&amp;lt;2}$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-rule-of-selection&quot;&gt;The Rule of Selection&lt;&#x2F;h3&gt;
&lt;p&gt;$$\frac{{P\wedge B}\ S_1\ {Q},\ {P \wedge \neg B}\ S_2\ {Q}}{{P}\ if \ B\ then\ S_1\ else\ S_2}$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;적용 예시$${P}\ if\ (x&amp;gt;0)\ then\ y:=y-1\ else\ y:=y+1\ {y&amp;gt;0}$$&lt;&#x2F;li&gt;
&lt;li&gt;x&amp;gt;0 인 경우 Association Axiom에 의해 y&amp;gt;1이 유도된다.&lt;&#x2F;li&gt;
&lt;li&gt;x&amp;lt;=0인 경우 Association Axiom에 의해 y&amp;gt;-1이 유도된다.&lt;&#x2F;li&gt;
&lt;li&gt;y&amp;gt;1은 y&amp;gt;-1을 imply하므로 P = (y &amp;gt; 1)이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-rule-of-iteration&quot;&gt;The Rule of Iteration&lt;&#x2F;h3&gt;
&lt;p&gt;$$\frac{{I\wedge B}\ S\ {I}}{{I}\ while\ B\ do\ S\ {I\wedge \neg B}}$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I : Loop Invarient, 루프 불변식
&lt;ul&gt;
&lt;li&gt;반복문 수행 전에도 참&lt;&#x2F;li&gt;
&lt;li&gt;반복문 수행 중에도 참&lt;&#x2F;li&gt;
&lt;li&gt;반복문 수행 후에도 참&lt;&#x2F;li&gt;
&lt;li&gt;항상 참이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-rule-of-iteration-example-1&quot;&gt;The Rule of Iteration Example 1&lt;&#x2F;h3&gt;
&lt;p&gt;다음 구문에서 weakest precondition을 찾으시오&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;BNF&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-BNF &quot;&gt;&lt;code class=&quot;language-BNF&quot; data-lang=&quot;BNF&quot;&gt;&lt;span&gt;while y!=x do
&lt;&#x2F;span&gt;&lt;span&gt;	y := y+1
&lt;&#x2F;span&gt;&lt;span&gt;{y=x}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(cont...)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tomoyo.ivyro.net&#x2F;123&#x2F;wiki.php&#x2F;%EC%88%98%EB%A6%AC%EB%85%BC%EB%A6%AC%2Cmathematical_logic&quot;&gt;마크다운 수식(logic)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Synchronization(1)</title>
		<published>2023-04-11T00:00:00+00:00</published>
		<updated>2023-04-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/synchronization-1/" type="text/html"/>
		<id>https://js970.github.io/synchronization-1/</id>
		<content type="html">&lt;h2 id=&quot;critical-section-problem&quot;&gt;Critical Section Problem&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;the-problem-of-concurrency-ddonsisseon-munje&quot;&gt;The Problem of Concurrency(동시성 문제)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래와 같은 프로그램에서, OS는 한 번에 여러 작업에 대해서 연산한다.(juggling)&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;common.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;volitale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; counter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; loops;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt; worker*(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;* arg) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; loops; i++)
&lt;&#x2F;span&gt;&lt;span&gt;		counter++;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; null;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[]){
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(argc != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;usage: threads &amp;lt;value&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	loops = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;atoi&lt;&#x2F;span&gt;&lt;span&gt;(argv[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;	pthread_t p1, p2;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Initial value : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, counter);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pthread_create&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;p1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, worker, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pthread_create&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;p2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, worker, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pthread_join&lt;&#x2F;span&gt;&lt;span&gt;(p1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pthread_join&lt;&#x2F;span&gt;&lt;span&gt;(p2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Final value : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, counter);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드를 실행시키면 p1과 p2가 동시에 실행된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 프로그램을 실행시키면 1000회 정도의 적은 횟수의 loops값을 가질 때는 예상한 대로 동작할 수도 있다.
&lt;ul&gt;
&lt;li&gt;Result : Initial value = 0, Final value = 2000&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;하지만 loops값을 100000정도의 큰 수로 갖는다면 예상하지 못한 결과가 발생한다.
&lt;ul&gt;
&lt;li&gt;Result : Initial value = 0, Final value = 143012&lt;&#x2F;li&gt;
&lt;li&gt;심지어 실행 시마다 Final value가 달라진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이러한 문제가 발생하는 이유는 &lt;code&gt;concurrency issue&lt;&#x2F;code&gt;때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;background-of-concurrency-issue&quot;&gt;Background of Concurrency Issue&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;앞서 살펴본 &lt;code&gt;concurrency issue&lt;&#x2F;code&gt;가 발생하는 원인은 &lt;code&gt;shared variable&lt;&#x2F;code&gt;에 대한 연산이 &lt;code&gt;atomic operation&lt;&#x2F;code&gt;이 아니기 때문에 일어난다.&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;counter++;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 부분을 instruction level에서 살펴보면 아래와 같다.
&lt;ul&gt;
&lt;li&gt;당연하지만 그냥 예시일 뿐이다. 실제로는 아래보다 적은 연산으로도 해당 구문의 구현이 가능하다, 또한 이는 target machine의 ISA에 따라 다르다. &lt;code&gt;councurrency issue&lt;&#x2F;code&gt;의 이해 관점에서 참고하자.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;MOVE R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        ; get the value of counter into R1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ADD  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;              ; increase R1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;MOVE counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        ; save the results in counter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;machine instruction은 atomic operation이다. 하지만 high level language(C, C++, ...)에서의 statement는 이러한 instruction들이 모인 추상화 수준이 높은 operation이다.&lt;&#x2F;li&gt;
&lt;li&gt;실제 연산은 machine instruction으로 일어난다. 두 thread에서 각각의 statement를 번갈아 가며 실행하지만, 실제로는 instruction level에서 번갈아 가며 실행하는 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;이 과정에서 statement는 순차적으로 실행된 것 처럼 보여 문제가 없는 것처럼 보일 수 있으나, machine instruction level에서는 각 연산 간의 동기화 문제가 발생할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;좀 더 직관적으로 이해하기 위해 살펴보자 동작을 살펴보자.
&lt;ul&gt;
&lt;li&gt;counter의 초기값은 5이다.&lt;&#x2F;li&gt;
&lt;li&gt;P1은 counter 값을 1만큼 증가시킨다.(counter++)&lt;&#x2F;li&gt;
&lt;li&gt;P2는 counter 값을 1만큼 감소시킨다.(counter--)&lt;&#x2F;li&gt;
&lt;li&gt;이런 실행 환경에서 프로시저 실행이 P1, P2의 순서로 일어난다고 가정하자. 이를 instruction level에서 표현하면 아래와 같다.
&lt;ul&gt;
&lt;li&gt;P1 : register1 = counter [r1 = 5]&lt;&#x2F;li&gt;
&lt;li&gt;P1 : register1 = register1 + 1 [r1 = 6]&lt;&#x2F;li&gt;
&lt;li&gt;P2 : register2 = counter [r1 = 5]&lt;&#x2F;li&gt;
&lt;li&gt;P2 : register2 = register2 - 1 [r2 = 4]&lt;&#x2F;li&gt;
&lt;li&gt;P1 : counter = register1 [counter = 6]&lt;&#x2F;li&gt;
&lt;li&gt;P2 : counter = register2 [counter = 4]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로시저 P1, P2는 순서대로 실행되었다. (P1이 P2보다 먼저 실행되었으며, 먼저 종료되었다.)&lt;&#x2F;li&gt;
&lt;li&gt;하지만 instruction level에서 살펴보면 counter값에 5+1-1 = 5가 아닌 4가 저장된 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;즉, 이 상황의 근본적인 원인은 각 프로시저가 atomic operation이 아니라는 것이다.
&lt;ul&gt;
&lt;li&gt;P1, P2는 각각 3개의 atomic operation으로 구성된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이러한 상황을 &lt;code&gt;Race Condition&lt;&#x2F;code&gt;이라고 한다.
&lt;ul&gt;
&lt;li&gt;P1, P2가 명령어 실행 순서에 대해 &lt;strong&gt;&amp;quot;Race&amp;quot;&lt;&#x2F;strong&gt; 하는 상황임&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Race Condition&lt;&#x2F;code&gt;에 의한 &lt;code&gt;Concurrency Issue&lt;&#x2F;code&gt;를 해결하기 위해서는 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;에 대한 처리를 해 주면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Critical Section&lt;&#x2F;code&gt;이란 각 프로시저의 공유 변수에 대한 연산이 일어나는 영역이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Critical Section&lt;&#x2F;code&gt;에 진입하기 전(&lt;code&gt;Entry Section&lt;&#x2F;code&gt;), Critical Section을 탈출한 후(&lt;code&gt;Exit Section&lt;&#x2F;code&gt;)에 대한 처리를 통해 어떠한 두 개의 프로세스도 동시에 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;에 대해 접근할 수 없도록 하면 &lt;code&gt;Race Condition&lt;&#x2F;code&gt;에 의한 &lt;code&gt;Concurrency Issue&lt;&#x2F;code&gt;를 해결할 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Entry Section&lt;&#x2F;code&gt;에서는 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;에 대한 진입 허가 요청을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Exit Section&lt;&#x2F;code&gt;에서는 &lt;code&gt;Critical Section&lt;&#x2F;code&gt; 접근 권한을 반환하는 동작을 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;에 대한 대표적인 해결법이다.
&lt;ul&gt;
&lt;li&gt;Semaphore&lt;&#x2F;li&gt;
&lt;li&gt;Lock&lt;&#x2F;li&gt;
&lt;li&gt;Monitor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Critical Section&lt;&#x2F;code&gt;의 해결법은 다수 존재하지만 반드시 아래 세 가지 요건을 충족해야 한다. 세 가지 요건을 만족하는 것을 보임으로써 유효한 &lt;code&gt;Critical Section Solution&lt;&#x2F;code&gt;임을 증명할 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt; : &lt;code&gt;Critical Section&lt;&#x2F;code&gt;으로의 접근은 항상 한 개의 프로세스만 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Progress(진행조건)&lt;&#x2F;code&gt; : &lt;code&gt;Critical Section&lt;&#x2F;code&gt;에 접근중인 프로세스가 없을 경우, 임의의 프로세스가 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;접근을 요청하면 &lt;strong&gt;지연 없이&lt;&#x2F;strong&gt; 바로 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;으로의 접근이 허용되어야 한다.&lt;strong&gt;(절대로 접근이 지연되면 안된다)&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Bounded waiting&lt;&#x2F;code&gt; : &lt;code&gt;Critical Section&lt;&#x2F;code&gt;으로의 접근을 기다리는 프로시저들은 반드시 유한시간 대기 후 접근이 보장되어야 한다.
&lt;ul&gt;
&lt;li&gt;얼마나 대기하는지는 중요하지 않다. N개의 프로세스가 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;접근을 요청한 상황이라면 최소한 N-1개의 프로세스가 실행된 후에는 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;에 대한 접근이 가능해야 함을 의미한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peterson-s-solution&quot;&gt;Peterson&#x27;s Solution&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;peterson-s-solution-1&quot;&gt;Peterson&#x27;s Solution&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Critical Section에 대한 Software-based Solution이다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;LOAD&#x2F;STORE는 atomic opetaion이라고 가정하자.&lt;&#x2F;li&gt;
&lt;li&gt;Critical Section을 공유하는 프로시저들은 아래의 두 변수를 사용한다.
&lt;ul&gt;
&lt;li&gt;turn : 누가 critical section에 접근할 수 있는지를 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;flag[i] : 프로세스 i가 critical section에 접근할 준비가 되었음을 나타낸다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; turn;
&lt;&#x2F;span&gt;&lt;span&gt;boolean flag[i];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Pi와 Pj에 대한 &lt;code&gt;Peterson&#x27;s Solution&lt;&#x2F;code&gt;을 적용한 예시이다.
&lt;ul&gt;
&lt;li&gt;Pi의 관점에서는 Pj가 실행중일 때는 while문을 이용해 Pj의 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;접근 권한이 유효한 동안 무한 대기한다. Pj의 경우 반대로 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Exit Section&lt;&#x2F;code&gt;에서는 접근 권한을 반환하여 while문에서 대기중이던 상대 프로세스가 &lt;code&gt;Critical Section&lt;&#x2F;code&gt;으로 진입할 수 있도록 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Procedure &lt;code&gt;i&lt;&#x2F;code&gt;&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Procedure : Pi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Entry Section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	flag[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	turn = j;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(flag[j] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; turn == j);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; critical section
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Exit Section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	flag[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; remainder section
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Procedure &lt;code&gt;j&lt;&#x2F;code&gt;&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Procedure : Pj
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Entry Section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	flag[j] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	turn = i;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(flag[i] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; turn == i);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; critical section
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Exit Section *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	flag[j] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; remainder section
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;proof-of-peterson-s-solution&quot;&gt;Proof of Peterson&#x27;s Solution&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Peterson&#x27;s Solution&lt;&#x2F;code&gt;은 아래의 세 가지 조건을 만족하므로 유효한 &lt;code&gt;Critical Section Solution&lt;&#x2F;code&gt;이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;조건을 만족하는가?
&lt;ul&gt;
&lt;li&gt;두 개의 프로세스가 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 접근하려 한다고 하자.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;가 &lt;code&gt;critical section&lt;&#x2F;code&gt;으로 진입하기 위한 조건은 아래와 같다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flag[i] == TRUE &amp;amp;&amp;amp; flag[j] == FALSE &amp;amp;&amp;amp; turn == i&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;가 &lt;code&gt;critical section&lt;&#x2F;code&gt;으로 진입하기 위한 조건은 아래와 같다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flag[j] == TRUE &amp;amp;&amp;amp; flag[i] == FALSE &amp;amp;&amp;amp; turn == j&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 두 조건의 경우에만 프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;, &lt;code&gt;j&lt;&#x2F;code&gt;가 각각 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 진입 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;두 조건을 제외하고는 프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;, &lt;code&gt;j&lt;&#x2F;code&gt;모두 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 진입할 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;두 조건은 서로 일치하는 조건이 아니므로 두 프로세스가 동시에 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 진입할 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 &lt;code&gt;Peterson&#x27;s Solution&lt;&#x2F;code&gt;은 &lt;code&gt;Mutual Exclusion&lt;&#x2F;code&gt;조건을 만족한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Progress&lt;&#x2F;code&gt;조건을 만족하는가?
&lt;ul&gt;
&lt;li&gt;프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;가 준비되지 않은 경우 프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;는 즉시 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 진입할 수 있다.
&lt;ul&gt;
&lt;li&gt;프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;가 준비되지 않은 경우란 &lt;code&gt;flag[j] == fasle&lt;&#x2F;code&gt;인 경우를 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;동일한 이유로 프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;가 준비되지 않은 경우에도 프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;가 즉시 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 진입할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;가 준비된 상태이고, 프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;의 while루프를 순회하면서 대기 중이라고 하자.
&lt;ul&gt;
&lt;li&gt;이 경우 &lt;code&gt;turn == i&lt;&#x2F;code&gt;라면 프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;는 지연 없이 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 진입할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;마찬가지로 &lt;code&gt;turn == j&lt;&#x2F;code&gt;라면 프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;는 지연 없이 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 진입할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 두 상황에 대해 대기 중인 프로세스가 없을 경우, 지연 없이 프로세스가 &lt;code&gt;critical section&lt;&#x2F;code&gt;에 진입 가능함을 확인 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;대기 중인 프로세스는 &lt;code&gt;critical section&lt;&#x2F;code&gt;에서 실행중인 프로세스가 &lt;code&gt;Exit Section&lt;&#x2F;code&gt;에서 플래그 값을 변경하면 그 즉시 &lt;code&gt;critical section&lt;&#x2F;code&gt;으로 진입할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 &lt;code&gt;Peterson&#x27;s Solution&lt;&#x2F;code&gt;은 &lt;code&gt;Progress&lt;&#x2F;code&gt;조건을 만족한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Bounded Waiting&lt;&#x2F;code&gt;조건을 만족하는가?
&lt;ul&gt;
&lt;li&gt;프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;의 플래그가 true로 설정된 후, trun값을 i로 갱신한다.&lt;&#x2F;li&gt;
&lt;li&gt;while문의 조건에 의해 프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;의 &lt;code&gt;critical section&lt;&#x2F;code&gt;접근이 종료된 후에 프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;가 대기중인 상황이라면, 그 즉시 &lt;code&gt;critical section&lt;&#x2F;code&gt;으로 진입할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 &lt;code&gt;i&lt;&#x2F;code&gt;는 최악의 경우에도 프로세스 &lt;code&gt;j&lt;&#x2F;code&gt;가 한 번 실행된 이후에 실행이 보장된다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 &lt;code&gt;Peterson&#x27;s Solution&lt;&#x2F;code&gt;은 &lt;code&gt;Bounded Waiting&lt;&#x2F;code&gt;을 보장한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;사실 대부분의 critical section solution은 Mutual Exclusion 조건은 만족시킨다. Progress조건과 Bounded Waiting조건을 만족시키는지 자세히 살펴보는 것이 중요하다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-04-10 수업정리</title>
		<published>2023-04-10T00:00:00+00:00</published>
		<updated>2023-04-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-4-10-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-4-10-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;CPU scheduling Exercise&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cpu-scheduling-exercise&quot;&gt;CPU scheduling Exercise&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;1&quot;&gt;#1&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;example_01.png&quot; alt=&quot;Example #1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-answer&quot;&gt;#1 answer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;ans1.png&quot; alt=&quot;Example #1 answer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2&quot;&gt;#2&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;example_02.png&quot; alt=&quot;Example #2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-answer&quot;&gt;#2 answer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;ans2.png&quot; alt=&quot;Example #2 answer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3&quot;&gt;#3&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;example_03.png&quot; alt=&quot;Example #3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-answer&quot;&gt;#3 answer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;ans3.png&quot; alt=&quot;Example #3 answer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-04-09 수업정리</title>
		<published>2023-04-09T00:00:00+00:00</published>
		<updated>2023-04-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-4-9-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-4-9-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Sequence Alignment&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Programming - Needleman-Wunsch algorithm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;sequence-alignment&quot;&gt;Sequence Alignment&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;An alignment is an assignment of gaps to positions 0, ..., M in x, and 0, ..., N in y, so as to line up each letter in one sequence with either a letter or a gap in the other sequence&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Sequence Alignment란 결국 두 개 이상의 시퀸스(문자열)을 정렬하여 유사한 부분을 찾아내는 것이다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;아래는 서로 다른 두 사람의 DNA염기 서열에 대해 sequence alignment를 진행하는 예시이다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Befrore Sequence Alignment&lt;&#x2F;p&gt;
&lt;p&gt;person A : AGGCTATCACCTGACCTCCAGGCCGATGCCC&lt;&#x2F;p&gt;
&lt;p&gt;person B : TAGCTATCACGACCGCGGTCGATTTGCCCGAC&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After Sequence Alignment&lt;&#x2F;p&gt;
&lt;p&gt;person A : -&lt;strong&gt;AG&lt;&#x2F;strong&gt;G&lt;strong&gt;CTATCAC&lt;&#x2F;strong&gt;CT&lt;strong&gt;GACC&lt;&#x2F;strong&gt;T&lt;strong&gt;C&lt;&#x2F;strong&gt;CA&lt;strong&gt;GG&lt;&#x2F;strong&gt;C&lt;strong&gt;CGA&lt;&#x2F;strong&gt;--&lt;strong&gt;TGCCC&lt;&#x2F;strong&gt;---&lt;&#x2F;p&gt;
&lt;p&gt;person B : T&lt;strong&gt;AG&lt;&#x2F;strong&gt;-&lt;strong&gt;CTATCAC&lt;&#x2F;strong&gt;--&lt;strong&gt;GACC&lt;&#x2F;strong&gt;G&lt;strong&gt;C&lt;&#x2F;strong&gt;--&lt;strong&gt;GG&lt;&#x2F;strong&gt;T&lt;strong&gt;CGA&lt;&#x2F;strong&gt;TT&lt;strong&gt;TGCCC&lt;&#x2F;strong&gt;GAC&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-is-a-good-alignment&quot;&gt;What is a good alignment?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;match, mismatch, gap으로 구분하여 alignment를 비교한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;match, mismatch, gap에 대해서 가중치를 설정하여 우선순위에 맞게 alignment를 진행한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래는 matches(5point), mismatches(-3point), gap(-4point)에 따라 alignment를 비교하는 예시이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;6 matches, 3 mismatches, 1 gap : 17point&lt;&#x2F;p&gt;
&lt;p&gt;AGGCTAGTT-&lt;&#x2F;p&gt;
&lt;p&gt;AGCGAAGTTT&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;7 matches, 1 mismatch, 3 gaps : 20point&lt;&#x2F;p&gt;
&lt;p&gt;AGGCTA-GTT-&lt;&#x2F;p&gt;
&lt;p&gt;AG-CGAAGTTT&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;7 matches, 0 mismatches, 5 gaps : 15point&lt;&#x2F;p&gt;
&lt;p&gt;AGGC-TA-GTT-&lt;&#x2F;p&gt;
&lt;p&gt;AG-CG-AAGTTT&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dynamic-programming-needleman-wunsch-algorithm&quot;&gt;Dynamic Programming - Needleman-Wunsch algorithm&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;두 염기서열의 공통 부분이 가장 많아지도록 정렬할 때 사용되는 알고리즘&lt;&#x2F;li&gt;
&lt;li&gt;The score of the alignment = &lt;strong&gt;(# of matches) * m - (# of mismatches) * s - (# of gaps) * d&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;두 서열에서 문자쌍이 일치할 경우 : +m점&lt;&#x2F;li&gt;
&lt;li&gt;두 서열에서 문자쌍이 서로 다를 경우 : -s점&lt;&#x2F;li&gt;
&lt;li&gt;Sequence Alignmnet 중 gap이 발생할 경우 : -d점&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;F(i, j)가 주어진 sequence x, y의 subsequence x[1..i], y[1..j]의 정렬에 대한 optimal 점수라고 하자. subsequence x[1..i], y[1..j] 에 대해 다음과 같은 세 가지 경우가 존재한다.
$$x_1 ..... x_i $$$$y_1.....y_j$$
&lt;ol&gt;
&lt;li&gt;x(i)가 y(i)에 align되는 경우 : F(i, j) = F(i-1, j-1) + { (x(i) == y(i)) ? m : -s }&lt;&#x2F;li&gt;
&lt;li&gt;x(i)가 gap과 align되는 경우 : F(i, j) = F(i-1, j) - d&lt;&#x2F;li&gt;
&lt;li&gt;y(i)가 gap과 align되는 경우 : F(i, j) = F(i, j-1) - d&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;따라서 F(i-1, j-1)이 optimal하다고 했을 떄 아래와 같은 recursive equation이 도출된다.$$F(i, j)=max\begin{cases}F(i-1,j-1)+s(x_i,y_i)\F(i-1,j)-d\F(i,j-1)-d\end{cases}$$$$s(x_i, y_i) = \begin{cases}m,\ (if\ x_i = y_i)\-s,\ (otherwise)\end{cases}$$&lt;&#x2F;li&gt;
&lt;li&gt;이와 같은 recursice equation과 F(i, j)의 score를 저장하는 matrix를 통해 Dynamic Programming을 통한 Sequence Alignmnet를 수행할 수 있다.(Needleman-Wunsch Algorithm)&lt;&#x2F;li&gt;
&lt;li&gt;아래는 두 염기서열에 대한 Needleman-Wunsch Algorithm)을 step by step으로 적용한 것이다.
&lt;ol&gt;
&lt;li&gt;Score 행렬 초기화&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;Needleman-Wunsch_01.png&quot; alt=&quot;Step1&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Score 계산&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;Needleman-Wunsch_02.png&quot; alt=&quot;Step 2&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Score를 계산하면서 해당 칸이 위, 왼쪽, 왼쪽 대각선 위 세 방향 중 어디에서 유래했는지를 별도의 matrix를 통해 저장해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;그림에서는 정답에 대해서만 빨간색 실선 화살표로 나타냈다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;트레이싱
&lt;ul&gt;
&lt;li&gt;가장 점수가 높은 칸은 8이다.&lt;&#x2F;li&gt;
&lt;li&gt;이 지점에서부터 해당 칸의 이전 단계로 step 2에서 작성한 matrix를 참고하여 돌아간다(tracing)&lt;&#x2F;li&gt;
&lt;li&gt;모든 경로가 파악되면 s1, s2에 대한 optimal solution을 알 수 있다.
&lt;ul&gt;
&lt;li&gt;위에서 내려오는 칸은 s2가 gap을 가지고, 좌에서 우로 이동하는 칸은 s1이 gap을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;s1 : C A T - - A C&lt;&#x2F;li&gt;
&lt;li&gt;s2 : - A T C G A C&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;만약 최댓값이 같아 어느 방향에서 오는 지 특정할 수 없는 경우 임의의 칸을 선택하면 된다.
&lt;ul&gt;
&lt;li&gt;위 그림에서 빨간 점선 테두리의 칸은 두 가지 이상의 기원을 가질 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아무 값이나 임의로 선택하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TODO (`2023-04-15)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blast.ncbi.nlm.nih.gov&#x2F;Blast.cgi&quot;&gt;BLAST : Basic Local Alilgnment Search Tool - NCBI&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tomoyo.ivyro.net&#x2F;123&#x2F;wiki.php&#x2F;TeX_%EB%B0%8F_LaTeX_%EC%88%98%EC%8B%9D_%EB%AC%B8%EB%B2%95&quot;&gt;마크다운 수식 위키&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-04-05 수업정리</title>
		<published>2023-04-09T00:00:00+00:00</published>
		<updated>2023-04-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-4-5-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-4-5-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;FCFS Scheduling&lt;&#x2F;li&gt;
&lt;li&gt;SJF Scheduling&lt;&#x2F;li&gt;
&lt;li&gt;Priority Scheduling&lt;&#x2F;li&gt;
&lt;li&gt;Round-Robin Scheduling&lt;&#x2F;li&gt;
&lt;li&gt;Multilevel Queue Scheduling&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fcfs-scheduling&quot;&gt;FCFS Scheduling&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;먼저 도착한 프로세스를 먼저 처리하는 Scheduling Algorithm&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;non-preemptive&lt;&#x2F;strong&gt; scheduling algorithm이다.&lt;&#x2F;li&gt;
&lt;li&gt;장점(?)
&lt;ul&gt;
&lt;li&gt;구조가 단순하여 구형하기가 매우 쉽다.&lt;&#x2F;li&gt;
&lt;li&gt;Straving이 발생하지 않는 구조이다. 따라서 모든 프로세스의 실행이 보장된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;단점
&lt;ul&gt;
&lt;li&gt;도착 순서에 따라 waiting time이 크게 달라진다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;convey effect&lt;&#x2F;code&gt; 에 따른 문제로 인해 miminum waiting time을 제공하지 못한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;convey effect&lt;&#x2F;code&gt; : burst time이 짧은 프로세스가 긴 프로세스 뒤에 위치하는 상황&lt;&#x2F;li&gt;
&lt;li&gt;현실에서는 CPU process, I&#x2F;O process의 속도 차이가 심하기 때문에 매우 큰 단점으로 다가온다. 이는 burst time이 긴 프로세스가 CPU자원을 내려놓을 때까지 다른 프로세스가 대기해야 하기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example-with-gantt-chart&quot;&gt;Example with Gantt Chart&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;FCFS.png&quot; alt=&quot;FCFS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Waiting time$$P_1=0,\ P_2=24,\ P_3=27$$&lt;&#x2F;li&gt;
&lt;li&gt;Average Waiting time$$(0+24+27)&#x2F;3=17$$&lt;&#x2F;li&gt;
&lt;li&gt;앞서 살펴본 것처럼 P1이 먼저 수행될 경우 &lt;code&gt;convey effect&lt;&#x2F;code&gt;에 의해 Average Time이 늘어나는 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 , P2, P3, P1순으로 도착하였다면 평군 waiting time 은 아래와 같다.$$(0+3+6)&#x2F;3=3$$
&lt;ul&gt;
&lt;li&gt;앞서 단점으로 언급한 것처럼 도착 순서에 따라 Average waiting time의 편차가  심한 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;sjf-scheduling&quot;&gt;SJF Scheduling&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Shortest Job First Scheduling&lt;&#x2F;li&gt;
&lt;li&gt;optimal scheduling solution이다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스의 도착 순서와 관계없이, burst time이 짧은 것부터 실행하는 scheduling algorithm이다.&lt;&#x2F;li&gt;
&lt;li&gt;Priority가 burst time이 작은 순으로 정렬했을 때의 순서와 같은 Priority Scheduling이다.&lt;&#x2F;li&gt;
&lt;li&gt;두 프로세스의 CPU burst time이 같다면, FCFS scheduling을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;SJF는 &lt;strong&gt;preemptive, non-preemptive모두 구현 가능&lt;&#x2F;strong&gt;하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;prediction-of-burst-time&quot;&gt;Prediction of Burst Time&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;SJF는 이론상으로 모든 job들이 최소 waiting time을 가지게 되므로 optimal 하다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 실제 job의 burst time은 실행 전에 알 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 이전 실행시간에 따른 예측값을 burst time으로 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 위해 Local linear regression을 사용한다.$$t_n\ :\ actual\ length\ of \ n^{th}\ CPU\ burst$$$$\tau_{n+1}\ :\ predicted\ value\ for\ next\ CPU\ burst$$$$\alpha,\ (0\leq\alpha\leq 1)$$$$\tau_{n+1} = \alpha t_n+(1-\alpha)\tau_n$$
&lt;ul&gt;
&lt;li&gt;보통 알파 값은 1&#x2F;2로 설정된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이 공식을 이용해서 실행 시간을 예측해 보면 아래와 같다. 파란색 선은 예측된 burst time, 검은색 선은 실제 burst time이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;burst_prediction.png&quot; alt=&quot;prediction&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example-with-gantt-chart-1&quot;&gt;Example with Gantt Chart&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;SJF.png&quot; alt=&quot;SJF&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Average Waiting Time$$P_1=3,\ P_2=16,\ P_3=9,\ P_4=0\ \ Avg = (3+16+9+0)&#x2F;4=7$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shortest-time-to-completion-first-stcf&quot;&gt;Shortest-Time-to-Completion First(STCF)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;SJF가 Preemptive로 동작하는 경우이다.&lt;&#x2F;li&gt;
&lt;li&gt;Preemptive Shortest Job First(PSJF)라고 부르기도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;완료까지 남은 시간이 가장 적은 job을 우선적으로 실행한다.&lt;&#x2F;li&gt;
&lt;li&gt;response time 관련 issue가 있다.(Starving 등)
&lt;ul&gt;
&lt;li&gt;실행시간이 긴 프로세스가 waiting 중일 떄, 계속해서 실행시간이 짧은 프로세스가 ready하게 되면, 실행시간이 긴 프로세스는 영원히 실행되지 않을 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;priority-scheduling&quot;&gt;Priority Scheduling&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;각 프로세스는 priority값을 가지게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;CPU는 priority가 높은 프로세스를 먼저 처리한다.&lt;&#x2F;li&gt;
&lt;li&gt;priority가 같은 프로세스에 대해서는 FCFS로 처리한다.&lt;&#x2F;li&gt;
&lt;li&gt;priority는 internally, externally로 모두 설정 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;SJF scheduling은 priority scheduling의 한 종류이다.&lt;&#x2F;li&gt;
&lt;li&gt;Priority Scheduling은 &lt;strong&gt;preemptive, non-preemptive모두 구현 가능&lt;&#x2F;strong&gt;하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;SJF에서도 다루었듯이, 어떤 프로세스가 낮은 우선순의를 가지고 있을 경우, 해당 프로세스는 영원히 실행되지 않을 수도 있다.
&lt;ul&gt;
&lt;li&gt;이를 &lt;code&gt;indefinite blocking&lt;&#x2F;code&gt; 또는 &lt;code&gt;Starvation&lt;&#x2F;code&gt; 이라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Starvation&lt;&#x2F;code&gt;은 &lt;code&gt;aging&lt;&#x2F;code&gt;기법으로 해결 가능하다.
&lt;ul&gt;
&lt;li&gt;시스템에서 오랬동안 waiting하는 job의 priority를 점진적으로 증가시키는 것&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example-with-gantt-chart-2&quot;&gt;Example with Gantt Chart&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;priority.png&quot; alt=&quot;Priority&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;round-robin-rr-scheduling&quot;&gt;Round Robin(RR) Scheduling&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;각각의 프로세스는 time quantum(usually 10~100 ns, also known as schedular quantum)동안 실행된다. time quantum이 끝나면 ready queue로 돌아가고 다음 프로세스가 실행된다.&lt;&#x2F;li&gt;
&lt;li&gt;run queue에 있는 job들을 순차적으로 처리한다. run queue는 circular FIFO형태로 구성된다.&lt;&#x2F;li&gt;
&lt;li&gt;run queue의 모든 job들이 끝날 때까지 이를 반복한다.&lt;&#x2F;li&gt;
&lt;li&gt;timer-interrupt에 의해 일어난다. 따라서 time quantum은 timer-interrupt period의 배수여야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Preemptive Scheduling Algorithm with no Starvation&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Starvation문제가 없기 때문에 fair하다. 하지만 Turnaround time 등의 metric 지표에 의하면 좋지 않은 성능을 보인다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;biggy&quot;&gt;비교&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Round Robin Scheduling은 Preemptive Scheduling이지만 Starvation문제로부터 자유롭다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aging&lt;&#x2F;code&gt;등의 솔루션이 필요없다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 N개의 job이 있을 때, 어떠한 job이 최소한 n-1개의 job이 실행된 이후에는 실행이 보장되는 특성이 있기 때문에 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로Round Robin은 SJF와 비교하여 response time은 좋은 지표를 보이지만, turnaround에서는 다소 떨어지는 결과를 보여 준다.&lt;&#x2F;li&gt;
&lt;li&gt;time quantum이 큰 값을 가질수록 FCFS와 같은 성능으로 수렴하고, 작은 값을 가질수록 사실상 process sharing(1&#x2F;n의 속도로 동작)이 된다.
&lt;ul&gt;
&lt;li&gt;context switching time에 의한 성능 오버헤드가 커진다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 고려하여 time quantum은 통상적으로 context switching time이 10us보다 작을 때, 10~100ns정도로 설정하는 것이 적당하다.&lt;&#x2F;li&gt;
&lt;li&gt;또한, time quantum이 너무 작은 값을 가지게 되면 대부분의 프로세스가 여러 번 자신의 차례를 맞이하고 나서 종료되게 된다. 이는 turnaround time을 증가시키는 원인이다.&lt;&#x2F;li&gt;
&lt;li&gt;물론, time quantum이 짧다면 response time을 중요시하는 metric에서는 좋은 지표를 얻을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;경험적으로 CPU burst의 80%가량이 time quantum보다 작을 경우 가장 높은 성능을 보인다고 알려져 있다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;maximize.png&quot; alt=&quot;maximize utilization&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example-with-gantt-chart-3&quot;&gt;Example with Gantt Chart&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;roundrobin.png&quot; alt=&quot;Round Robin&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Average Waiting Time$$P_1=(0+6),\ P_2=4,\ P_3=7\  Avg = (6+4+7)&#x2F;3=5.66$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;multilevel-queue-scheduling&quot;&gt;Multilevel Queue Scheduling&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Ready Queue를 memory size, process type, process priority등 여러 기준으로 나누어 여러 개를 가진다.
&lt;ul&gt;
&lt;li&gt;response time이 작아야 하는 경우는 RR을 사용&lt;&#x2F;li&gt;
&lt;li&gt;turnaround time을 줄여야 하는 령우 SJF, STCF 사용&lt;&#x2F;li&gt;
&lt;li&gt;foreground process 는 RR scheduling을 사용하고, background process 는 FCFS를 사용하는 것을 예시로 들 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;각 ready queue들은 fixed priority를 가지거나 Time slice를 바탕으로 동작한다.
&lt;ul&gt;
&lt;li&gt;fixed priority : 각 ready queue마다 priority가 존재하며, 특정 queue의 동작이 모두 처리된 후 다음 priority queue의 동작이 처리된다.
&lt;ul&gt;
&lt;li&gt;Starvation이 발생할 가능성이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Time Slice : 각 ready queue에 대해 단위 시간 당 일정 비율의 CPU점유를 주는 방식
&lt;ul&gt;
&lt;li&gt;Starvation문제에서 자유롭다.&lt;&#x2F;li&gt;
&lt;li&gt;foreground process에 대해서 time slice가 80%, background process에 대해서 time slice가 20%로 설정하여 scheduling하는 것을 예시로 들 수 있다.(당연하지만 각각의 queue는 별도로 존재하는 상황이다.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Fixed priority방식으로 MLQ(Multilevel Queue)를 구현했을 경우 Starvation문제를 해결하기 위해 &lt;code&gt;aging&lt;&#x2F;code&gt;을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 fixed priority방식으로 구현한 MLQ의 예시이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;multilevel.png&quot; alt=&quot;Multilevel Queue&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;ststem process queue에 있는 process가 가장 먼저 실행되고 나면, 그 다음 priority의 interactive process queue에 있는 process가 실행되는 방식이다.&lt;&#x2F;li&gt;
&lt;li&gt;앞서 설명한 것처럼 starvation의 가능성이 있으므로 &lt;code&gt;aging&lt;&#x2F;code&gt;을 사용해야 한다.(MLFQ)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;multilevel-feedback-queue-mlfq&quot;&gt;Multilevel Feedback Queue(MLFQ)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;MLQ에서 각각의 queue에 있던 process들이 다른 level의 queue로 옮겨갈 수 있는 구조이다.
&lt;ul&gt;
&lt;li&gt;따라서 MLFQ는 아래와 같은 method를 추가적으로 제공해야 한다.
&lt;ul&gt;
&lt;li&gt;Method used to when to upgrade a process&lt;&#x2F;li&gt;
&lt;li&gt;Method used to when to demote a process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Example
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;MLFQ.png&quot; alt=&quot;MLFQ&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-04-06 수업정리</title>
		<published>2023-04-06T00:00:00+00:00</published>
		<updated>2023-04-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-4-6-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-4-6-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Scheme(2)&lt;&#x2F;li&gt;
&lt;li&gt;Lab - Tail Recursive Factorial&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;scheme-2&quot;&gt;Scheme(2)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;3.30 Scheme에서 이어짐&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Scheme은 LISP를 모태로 하는 함수형 프로그래밍 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;LISP과 마찬가지로 Eval - Apply model을 따른다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;eval-apply&quot;&gt;Eval - Apply&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Scheme은 리스트로 함수 적용을 나타낸다.&lt;&#x2F;li&gt;
&lt;li&gt;수식은 상수이거나 함수 적용 형태, 둘 중 하나이다.&lt;&#x2F;li&gt;
&lt;li&gt;함수와 인수를 모두 계산하고(Eval), 함수를 적용한다(Apply).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x27;&lt;&#x2F;code&gt; 기호를 사용하여 Eval의 예외 처리가 가능하다.(cont.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;defining-values&quot;&gt;Defining Values&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;나중에 사용할 값을 정의하기 위해 define문법을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;define문법은 타 언어의 assignment와 유사하게 동작한다. 하지만 이는 틀린 표현이다.
&lt;ul&gt;
&lt;li&gt;Scheme에서 define은 Storage에 값을 저장하는 방식으로 동작하는 것이 아닌, binding을 만드는 방식으로 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;binding을 통해 name과 value간의 1:1대응이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;input-and-output&quot;&gt;Input and Output&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;입력 함수 사용 예시&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(define num(read)) &#x2F;&#x2F; 입력 받은 후 출력
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;출력 함수 사용 예시
&lt;ul&gt;
&lt;li&gt;write는 있는 그대로 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;display는 개행문자 등 표준 출력을 반영하여 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(write (+ num 1)) &#x2F;&#x2F; num+1 출력 
&lt;&#x2F;span&gt;&lt;span&gt;(display (+ num 1)) &#x2F;&#x2F; num+1 출력
&lt;&#x2F;span&gt;&lt;span&gt;(wirte &amp;quot;Hello \n World!&amp;quot;) &#x2F;&#x2F; &amp;quot;Hello \n World!&amp;quot; 출력
&lt;&#x2F;span&gt;&lt;span&gt;(display &amp;quot;Hello \n World!&amp;quot;) &#x2F;&#x2F; 표준 출력으로 따음표 없이 Hello -&amp;gt; 개행 -&amp;gt; World 출력
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list&quot;&gt;List&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cons&lt;&#x2F;code&gt;(construct) 를 이용하여 List의 생성이 가능하다.
&lt;ul&gt;
&lt;li&gt;첫 번째 인자로 받은 원소를 두 번째 인자로 받은 리스트의 앞에 붙인 리스트를 반환)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(cons 1 &amp;#39;(2 3)) &#x2F;&#x2F; (1 2 3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&lt;&#x2F;code&gt;를 이용하여 cons를 사용하지 않고 한번에 리스트 생성이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(list 1 2 3) &#x2F;&#x2F; (1 2 3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;car&lt;&#x2F;code&gt;를 사용하여 리스트의 맨 앞 원소를 반환할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(car (list 1 2 3)) &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cdr&lt;&#x2F;code&gt;을 이용하여 리스트의 맨 앞을 제외한 나머지 리스트를 반환할 수 있다. 이때 리스트에는 1개 이상의 원소가 있어야 한다.(null에서는 맨 앞을 제외할 수 없으니까)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(cdr &amp;#39;(a b c)) &#x2F;&#x2F; (b c)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;car&lt;&#x2F;code&gt;, &lt;code&gt;cdr&lt;&#x2F;code&gt; 명령어의 다소 특이한 이름은 초기 IBM 704의 레지스터 이름에서 유래했다.&lt;&#x2F;li&gt;
&lt;li&gt;List는 빈 리스트와 원소가 있는 리스트의 두 가지 형태로 나눌 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;pair는 리스트를 구현하는 기본적인 방법이다.
&lt;ul&gt;
&lt;li&gt;(x y)는 (x.y)로 표현한다.&lt;&#x2F;li&gt;
&lt;li&gt;(a b c)는 (a .(b.(c.())))로 구현된다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 표기를 트리 구조로 나타내면 아래와 같다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;pair.png&quot; alt=&quot;pair&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pair?&lt;&#x2F;code&gt; 술어를 사용하여 어떤 S-expression이 pair인지 아닌지 검사 가능하다.
&lt;ul&gt;
&lt;li&gt;리스트 중 원소가 하나라도 있는 경우 &lt;code&gt;pair?&lt;&#x2F;code&gt; 의 결과가 &lt;code&gt;#t&lt;&#x2F;code&gt; 이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(pair? (list 1 2 3)) &#x2F;&#x2F; #t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;어떤 리스트가 빈 리스트라면 null이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;null?&lt;&#x2F;code&gt; 술어를 사용하여 null인지 아닌지 판단 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(null? &amp;#39;()) &#x2F;&#x2F; #t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;List가 아니면서 null도 아니고 pair도 아니라면 atom이다. 아래는 atom인지 아닌지 판별하는 함수이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(define atom?
&lt;&#x2F;span&gt;&lt;span&gt;  (lambda (x)
&lt;&#x2F;span&gt;&lt;span&gt;	  (and (not (pair? x)) (not (null? x)))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;실행하면 아래와 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(atom? 3) &#x2F;&#x2F; #t
&lt;&#x2F;span&gt;&lt;span&gt;(atom? &amp;#39;()) &#x2F;&#x2F; #f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;quote&quot;&gt;quote&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;quote&lt;&#x2F;code&gt; 함수는 인자로 받은 값을 계산하지 말고 심볼로 보라는 뜻이다.
&lt;ul&gt;
&lt;li&gt;eval-apply의 예외 처리이다.&lt;&#x2F;li&gt;
&lt;li&gt;앞서 설명한 &lt;code&gt;&#x27;&lt;&#x2F;code&gt;와 같은 의미이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;상수 값에 대해서는 quote가 의미 없다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 &lt;code&gt;quote&lt;&#x2F;code&gt;, &lt;code&gt;&#x27;&lt;&#x2F;code&gt; 의 사용 예시이다.
&lt;ul&gt;
&lt;li&gt;가장 마지막 예시 결과는 quote에 의해 &#x27;1이  &#x27;1이라는 심볼 그 자체로 출력된 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(1 2 3) &#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;(quote (1 2 3)) &#x2F;&#x2F; (1 2 3)
&lt;&#x2F;span&gt;&lt;span&gt;(atom? (quote (1 2 3))) &#x2F;&#x2F; #f
&lt;&#x2F;span&gt;&lt;span&gt;(atom? (quote ())) &#x2F;&#x2F; #f
&lt;&#x2F;span&gt;&lt;span&gt;(atom? &amp;#39;(1 2 3)) &#x2F;&#x2F; #f
&lt;&#x2F;span&gt;&lt;span&gt;(atom? &amp;#39;Scheme) &#x2F;&#x2F; #t
&lt;&#x2F;span&gt;&lt;span&gt;(quote 1) &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;1 &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;(quote &amp;#39;1) &#x2F;&#x2F; &amp;#39;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;predicates&quot;&gt;Predicates&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;술어(predictate)란 참&#x2F;거짓을 반환하는 함수이다.(boolean functions)&lt;&#x2F;li&gt;
&lt;li&gt;Scheme에서 술어는 물음표로 끝내는 것이 관례이다.&lt;&#x2F;li&gt;
&lt;li&gt;앞서 살펴본 술어 이외에 대표적인 술어는 아래와 같다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;number?&lt;&#x2F;code&gt; : 인수가 수인지 검사한다.
&lt;ul&gt;
&lt;li&gt;수 : 1, 2, 3, 10, 100, 123 ...&lt;&#x2F;li&gt;
&lt;li&gt;숫자 : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;eq?&lt;&#x2F;code&gt; : 인수로 주어진 두 개의 atom이 같은지 검사(list도 되긴 한다.)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;complex?&lt;&#x2F;code&gt; : 복소수인지 검사&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;real?&lt;&#x2F;code&gt; : 실수인지 검사&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rational?&lt;&#x2F;code&gt; : 유리수인지 검사&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;integer?&lt;&#x2F;code&gt; : 정수인지 검사&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zero?&lt;&#x2F;code&gt; : 0인지 검사&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;exact?&lt;&#x2F;code&gt; : 주어진 인수가 정확한 숫자인지 검사(정수, 유리수)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inexact?&lt;&#x2F;code&gt; : 주어진 인수가 부동 소수점 수인지 판단.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;odd?&lt;&#x2F;code&gt;, &lt;code&gt;even?&lt;&#x2F;code&gt; : 주어진 홀수 또는 짝수인지 판단.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(exact? 3.0) &#x2F;&#x2F; #f
&lt;&#x2F;span&gt;&lt;span&gt;(exact? 1&#x2F;2) &#x2F;&#x2F; #t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Scheme에서는 위의 술어들의 인자들에 대해서 C언어 등에서와 같이 그 자체만으로 형이 결정되는 것이 아닌 수의 포함관계를 모두 반영한다는 특징이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(integer? 1.0) &#x2F;&#x2F; #t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;comparison-operators-and-others&quot;&gt;Comparison Operators and Others&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;숫자값이 같은지 비교하는 연산자는 &lt;code&gt;=&lt;&#x2F;code&gt;하나 뿐이다.
&lt;ul&gt;
&lt;li&gt;!=는 (not (= a b)) 형태로 사용해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;그 이외의 대소 비교 연산자는 C연산자와 동일하다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;max&lt;&#x2F;code&gt; &lt;code&gt;min&lt;&#x2F;code&gt;등의 프로시저는 알아두면 유용하게 사용할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;multiple-selection-using-cond&quot;&gt;Multiple Selection Using cond&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;개별 조건을 검사하기 위해서 &lt;code&gt;cond&lt;&#x2F;code&gt;를 사용할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 코드는 atom?을 &lt;code&gt;cond&lt;&#x2F;code&gt;를 사용하여 다시 구현한 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(define atom?
&lt;&#x2F;span&gt;&lt;span&gt;  (lambda (x)
&lt;&#x2F;span&gt;&lt;span&gt;	  (cond
&lt;&#x2F;span&gt;&lt;span&gt;		  ((null? x) #f)
&lt;&#x2F;span&gt;&lt;span&gt;		  ((pair? x) #f)
&lt;&#x2F;span&gt;&lt;span&gt;		  (else #t))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위의 구문 중 else부분은 아래와 같이 처리해도 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(define atom?
&lt;&#x2F;span&gt;&lt;span&gt;  (lambda (x)
&lt;&#x2F;span&gt;&lt;span&gt;	  (cond
&lt;&#x2F;span&gt;&lt;span&gt;		  ((null? x) #f)
&lt;&#x2F;span&gt;&lt;span&gt;		  ((pair? x) #f)
&lt;&#x2F;span&gt;&lt;span&gt;		  (#t #t))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;lab-tail-recursive-factorial&quot;&gt;Lab - Tail Recursive Factorial&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;tail-recursion-ggori-jjaggw&quot;&gt;Tail Recursion(꼬리 재귀)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;재귀함수에서 재귀가 일어나는 부분에서 온전히 재귀 함수의 호출만을 반환하는 경우&lt;&#x2F;li&gt;
&lt;li&gt;아래와 같은 코드는 꼬리 재귀 코드가 아니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fact&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(n == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else return&lt;&#x2F;span&gt;&lt;span&gt; n*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fact&lt;&#x2F;span&gt;&lt;span&gt;(n-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;이를 꼬리 재귀 코드로 고치면 아래와 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ifact&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(n == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifact&lt;&#x2F;span&gt;&lt;span&gt;(n-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, n*x);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;schemeheu-sahyonhan-factorial-tail-recursive-implementation&quot;&gt;Scheme을 사용한 factorial Tail recursive implementation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 Scheme으로 구현한 tail-recursion factorial calculating function이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(define ifact
&lt;&#x2F;span&gt;&lt;span&gt;  (lambda (n x)
&lt;&#x2F;span&gt;&lt;span&gt;	  (if (= n 0) x
&lt;&#x2F;span&gt;&lt;span&gt;	  (ifact (- n 1) (* n x)))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ssihaeng-ggyeogwa&quot;&gt;실행 결과&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;ifact.png&quot; alt=&quot;ifact&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-04-05 수업정리</title>
		<published>2023-04-05T00:00:00+00:00</published>
		<updated>2023-04-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-4-5-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-4-5-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Programming - Optimal Binary Search Trees(2)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dynamic-programming-optimal-binary-search-trees-2&quot;&gt;Dynamic Programming - Optimal Binary Search Trees(2)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;컴퓨터 알고리즘 4.3 수업정리에서 이어짐&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;how-to-find-optimal-bst&quot;&gt;How to find Optimal BST?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;앞서 살펴본 알고리즘에 의하면, Optimal BST의 Average Search Time은 구할 수 있지만 Optimal BST가 무엇인지는 알 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;Optimal BST를 구하기 위해서는 Optimal BST의 Average Search Time을 구하는 알고리즘에서 가장 작은 평균 탐색 시간을 갖도록 하는 루트 노드 k를 찾을 때, 이 노드(노드 k)를 따로 저장하여 Optimal BST를 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 Dynamic Programming을 사용하여 N개의 노드를 가지는 Binary Search Tree 중 Optimal BST의 root node 및 해당 노드의 subtree들이 optimal BST가 되도록 하는 root node들을 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Optimal BST의 Average Search Time을 구하는 코드를 수정하여 작성한 Optimal BST를 구하는 C++코드이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 구현하여 채워 넣을 것 2023-04-09
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;optimal-binary-search-treereul-guhaneun-algorijjeuyi-siggabbojjado&quot;&gt;Optimal Binary Search Tree를 구하는 알고리즘의 시간복잡도&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;코드에서 확인 가능하듯이 3중 for문이 사용된다. 따라서 아래와 같은 시간복잡도를 가지게 된다.
&lt;ul&gt;
&lt;li&gt;i번째 노드부터 j번째 노드로 이루어지는 subtree에 대한 탐색$$T(n^2)$$&lt;&#x2F;li&gt;
&lt;li&gt;i이상 j이하의 값을 가지는 모든 k에 대해,  Average Search Time이 가장 작은 경우에 대한 조사.$$T(n)$$&lt;&#x2F;li&gt;
&lt;li&gt;따라서 본 알고리즘의 시간복잡도는 다음과 같다.$$T(n^2)\times T(n) = T(n^3) = \Theta(n^3)$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gsmesie692.tistory.com&#x2F;116&quot;&gt;최적 이진 탐색 트리 (Optimal Binary Search Tree)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-04-05 수업정리</title>
		<published>2023-04-05T00:00:00+00:00</published>
		<updated>2023-04-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-4-5-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-4-5-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Observer Pattern Review&lt;&#x2F;li&gt;
&lt;li&gt;Template Method Pattern&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;observer-pattern-review&quot;&gt;Observer Pattern Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;fan-in&quot;&gt;Fan-in?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Fan-in : 외부로부터의 해당 메소드나 클래스로의 association개수&lt;&#x2F;li&gt;
&lt;li&gt;Observer Pattern의 적용을 통해 fan-in을 줄일 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;fan-in이 크다면 코드의 재사용상이 좋다고 볼 수 있다.
&lt;ul&gt;
&lt;li&gt;대표적으로 Scanner Class(java)등 fan-in이 무한대인 클래스들이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;하지만 fan-in이 크다는 것은 수정사항이 발생했을때 미치는 영향이 엄청나다는 것을 의미한다.
&lt;ul&gt;
&lt;li&gt;수정, 변경사항 발생 시 Shotgun Surgery를 유발한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;따라서 fan-in이 큰 것 자체는 좋지만, 변경에 의한 영향을 줄이기 위해 DIP를 준수해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;결과적으로 Observer Pattern의 적용은 DIP준수에 기여한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;about-example-uml&quot;&gt;About Example UML&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;이전 정리에서 다룬 Observer Pattern UML이다.&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;observer_pattern.png&quot; alt=&quot;Observer Pattern&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Concrete Entity를 associate하는 Control 클래스들에 대해서는 별다른 패턴을 적용하지 않았었다.&lt;&#x2F;li&gt;
&lt;li&gt;예제에서는 따로 고민하지 않았지만 위의 Fan-in관점에서 생각해 봤을 때, 이 역시 Shotgun Surgery를 유발할 가능성이 높다.&lt;&#x2F;li&gt;
&lt;li&gt;이 역시 interface로 구현하여 DIP를 준수하도록 설계하는 것에 대해 고려해 볼 필요가 있다.
&lt;ul&gt;
&lt;li&gt;모든 설계가 그렇듯 정답은 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;template-method-pattern&quot;&gt;Template Method Pattern&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;따로 패턴으로 정리하기는 하지만 결국 앞서 공부했던 OCP 준수를 위해 고려해야 할 사항에서 다뤘던 내용이다.&lt;&#x2F;li&gt;
&lt;li&gt;Template Method Pattern이란, 중복 코드를 template method로 추출하고, 서로 다른 코드에 대해서만 abstract method로 superclass에서 선언한 후, subclass에서 override하는 방식을 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 UML을 예시로 보자.&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;template_method_original.png&quot; alt=&quot;template_method_original&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;본 설계에서 LG모터가 추가되는 등, 확장성에 대해 고려해야 한다.(OCP)
&lt;ul&gt;
&lt;li&gt;이를 위해 &lt;em&gt;Motor&lt;&#x2F;em&gt; 라는 superclass를 부모 클래스로 둔다.&lt;&#x2F;li&gt;
&lt;li&gt;추가되는 모터들은 &lt;em&gt;Motor&lt;&#x2F;em&gt; 를 상속하는 subclass로 구현한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이때 move(direction : Direction) : void함수는 Hyundai Motor, LG Motor가 서로 크게 다르지 않다고 한다면 아래와 같이 Template Method를 적용할 수 있다.&lt;img src=&quot;https:&#x2F;&#x2F;js970.github.io&#x2F;sopeuteuweeosissetotsseoggy-4-5-suheojjeonri&#x2F;template_method_applied.png&quot; alt=&quot;template method applied&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위와 같이 Template Method Pattern을 이용하여 설계하면 OCP를 더 철저하게 준수할 수 있다. 추가되는 사항(open for extension)에 융통성을 가지며, &lt;em&gt;Motor&lt;&#x2F;em&gt; 의 Concrete Class를 참조하는 객체들의 코드를 수정하지 않도록 수정은 불가능하다(closed for modification).&lt;&#x2F;li&gt;
&lt;li&gt;이 설계를 Java로 구현한다고 했을 때, &lt;em&gt;Motor&lt;&#x2F;em&gt; 의 move() 메소드는 final로 선언하여 원천적으로 subclass에서의 override를 막는 것도 고려해 볼 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-04-04 수업정리</title>
		<published>2023-04-04T00:00:00+00:00</published>
		<updated>2023-04-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-4-4-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-4-4-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Language - Syntax Review&lt;&#x2F;li&gt;
&lt;li&gt;Language - Semantics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;language-syntax-review&quot;&gt;Language - Syntax Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍 언어의 설계는 Syntax와 Semantics로 나눌 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;munbbeoyi-pyogi&quot;&gt;문법의 표기&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Syntax는 CFG또는 BNF표기를 통해 나타낼 수 있으며 둘은 동치이다.&lt;&#x2F;li&gt;
&lt;li&gt;어떤 문법 G는 {N, T, P, S}인데 이때 P(Production Rule)을 CFG, BNF로 표기한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;gumun-teuri&quot;&gt;구문 트리&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Production Rule에 따라 derivation 과정을 tree형태로 나타낸 것이 구문 트리이다.&lt;&#x2F;li&gt;
&lt;li&gt;구문 트리는 추상 구문 트리와 파스 트리가 있다.
&lt;ul&gt;
&lt;li&gt;추상 구문 트리 : 터미널 심볼만을 트리 형태로 나타낸 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;파스 트리 : 유도 과정을 모두 트리 형태로 나타낸 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;munbbeoyi-mohosseon&quot;&gt;문법의 모호성&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;문법 G의 Production Rule에 따라 생성되는 파스 트리가 2개 이상일 경우 이 문법은 모호한(Ambiguous) 문법이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;모호성은 문법의 속성이며, 모호성을 제거하기 위해서는 아래와 같은 두 가지 방법을 사용하면 된다.
&lt;ul&gt;
&lt;li&gt;결합 방향 명시 : 새로운 N을 생성하여, CFG에서 N에 대해 좌결합, 우결합을 명시하여 N이 특정 위치에 일관적으로 위치하도록 명시한다.&lt;&#x2F;li&gt;
&lt;li&gt;우선순위 명시 : 새로운 N을 생성하여, 유도 과정에서 우선순위를 명시한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lambda-expression&quot;&gt;lambda expression&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span&gt;q = x!=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;? (y&#x2F;x) : y;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위의 C++ statement를 추상 구문 트리로 나타내면 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;ast.png&quot; alt=&quot;Abstract Syntax Tree&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이는 아래와 같이 generalized list로 표현할 수 있다.&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(= q
&lt;&#x2F;span&gt;&lt;span&gt;	(?: (!= x 0)
&lt;&#x2F;span&gt;&lt;span&gt;		(&#x2F; y x)
&lt;&#x2F;span&gt;&lt;span&gt;		(y))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Scheme Code에서는 labmda expression을 사용하여 아래와 같이 표현한다.&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(define f
&lt;&#x2F;span&gt;&lt;span&gt;	(lambda (x y)
&lt;&#x2F;span&gt;&lt;span&gt;		(if (not (= x 0)) (&#x2F; y x)
&lt;&#x2F;span&gt;&lt;span&gt;		y)))
&lt;&#x2F;span&gt;&lt;span&gt;(define q (f x y))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;language-semantics&quot;&gt;Language - Semantics&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Semantics는 Syntax에 비해 매우 복잡하고, 표현에 있어 여러 가지 방법이 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;Semantics는 크게 Static Semantics와 Dynamic Semantics로 구분할 수 있다.
&lt;ul&gt;
&lt;li&gt;Static Semantics : 컴파일 시간에 검사 가능함
&lt;ul&gt;
&lt;li&gt;Attribute Grammar&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Semantics : runtime에 검사 가능함
&lt;ul&gt;
&lt;li&gt;Operational Semantics&lt;&#x2F;li&gt;
&lt;li&gt;Denotational Semantics&lt;&#x2F;li&gt;
&lt;li&gt;Axiomatic Semantics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;다음 C++언어 구문을 살펴보자&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span&gt;q = (x==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) ? (y&#x2F;x) : y;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 구문에서 (y&#x2F;x) 와 y의 type이 같아야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;또한, x와 0은 서로 비교 가능해야 한다.(compatiable)&lt;&#x2F;li&gt;
&lt;li&gt;마지막으로, (x!=0)이 bool 타입이어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 조건들은 컴파일 이전에 확인 가능하다. -&amp;gt; Attribute Grammar를 이용하여 compile time에 검사가 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 x가 0일 경우 (y&#x2F;x)를 수행해야 하는데, 이렇게 되면 zero division에러가 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 컴파일 타임에 검사가 불가능하다. -&amp;gt; Dynamic Semantics를 통해 확인해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;static-semantics&quot;&gt;Static Semantics&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;CFG의 한계를 넘어서는 특성을 검사해야 하는 경우 정적 의미론 또는 동적 의미론을 이용하여야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;정적 의미론은 Attribute Grammar를 통해 검사 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;영역 규칙, 타입 검사 규칙 등이 정적 의미론을 통해 검사 가능한 규칙이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;attribute-grammar&quot;&gt;Attribute Grammar&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Attribute Grammar(속성 문법)은 Production Rule과 Attribute Evaluation Rule로 표기한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Attribute Grammar의 예시이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;EBNF&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-EBNF &quot;&gt;&lt;code class=&quot;language-EBNF&quot; data-lang=&quot;EBNF&quot;&gt;&lt;span&gt;	S -&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;		| (S)S
&lt;&#x2F;span&gt;&lt;span&gt;		;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위의 EBNF로 표기된 생성 규칙에 속성 계산 규칙을 아래의 표와 같이 추가할 수 있다.&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;attribute_grammar.png&quot; alt=&quot;Attribute Grammar for Evaluatiing the Maximum Depth&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이러한 속성 문법을 이용하여 S1 = &amp;quot;()()&amp;quot;, S2 = &amp;quot;()(())&amp;quot;라고 했을 때, S1, S2의 depth는 각각 1, 2임을 계산할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-semantics&quot;&gt;Dynamic Semantics&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 수행 의미를 기술한다.&lt;&#x2F;li&gt;
&lt;li&gt;수행 의미론이라고 부르기도 하며, 실질적인 의미론이라고 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;동적 의미론은 표준 방법이 여럿 존재한다.
&lt;ul&gt;
&lt;li&gt;Operational Semantics&lt;&#x2F;li&gt;
&lt;li&gt;Axiomatic Semantics&lt;&#x2F;li&gt;
&lt;li&gt;Denotational Semantics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 프로그램의 의미를 파악하는 방법은 테스트이다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 테스트만으로 의미(Semantics)를 완벽하게 기술할 수는 없다. 테스트를 통해서 behavior는 알 수 있어도 Semantics는 알 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;Semantics는 굉장히 모호한 개념이다. 이를 우리가 잘 아는 분야로 가져와서 프로그램의 의미를 기술하는 접근법을 택한다.
&lt;ul&gt;
&lt;li&gt;추상 기계 코드 - Operational Semantics&lt;&#x2F;li&gt;
&lt;li&gt;논리식 - Axiomatic Semantics&lt;&#x2F;li&gt;
&lt;li&gt;람다식(함수식) - Denotational Semantics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;operational-model-imperative-model&quot;&gt;Operational Model(Imperative Model)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;단순화된 가상 기계(abstract machine)상에서 해당 프로그램의 수행 의미를 파악한다.
&lt;ul&gt;
&lt;li&gt;실제 컴퓨터와 유사한 가상기계(추상기계)의 동작을 통해 프로그램 의미를 표현한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;작은 단위 의미론(small-step semantics)과 큰 단위 의미론(big-step semantics)로 나뉜다.&lt;&#x2F;li&gt;
&lt;li&gt;가상 기계
&lt;ul&gt;
&lt;li&gt;State : memory, registers, I&#x2F;O devices에 대한 추상화&lt;&#x2F;li&gt;
&lt;li&gt;State Transition Mechanism : Processor에 대한 추상화&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Operational Model을 이용하여 상태변환 Semantics를 표현한 예시이다.&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;z:=x; x:=y, y:=z, [x-&amp;gt;5, y-&amp;gt;7, z-&amp;gt;0]&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &amp;lt;x:=y; y:=z, [x-&amp;gt;5, y-&amp;gt;7, z-&amp;gt;5]&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &amp;lt;y:=z, [x-&amp;gt;7, y-&amp;gt;7, z-&amp;gt;5]&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &amp;lt;, [x-&amp;gt;7, y-&amp;gt;5, z-&amp;gt;5]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;x와 y에 저장된 값을 서로 swap하는 동작을 표현했음을 알 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이런 Operational Model을 이용한 방법은 프로그램의 의도와 정확히 일치할 수 없다는 비판점이 있다.
&lt;ul&gt;
&lt;li&gt;실제로 위의 예시에서 x와 y의 값만 교체되는 것이 아니라 z의 값 역시 바뀐다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;denotational-semantics-applicative-model&quot;&gt;Denotational Semantics(Applicative Model)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그램의 의미를 함수로 파악한다.
&lt;ul&gt;
&lt;li&gt;이를 위해 lambda expression(A.Church, 엘런 튜링의 스승)을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;Syntax domain P를 의미 함수에 대입시켜 Semantic domain의 .&lt;&#x2F;li&gt;
&lt;li&gt;의미 함수는 대괄호 안에 구현을 삽입한 형태(denotation)로 표현한다.&lt;&#x2F;li&gt;
&lt;li&gt;의미 함수(semantic functions)는 의미영역의 값을 다루는 함수이다.&lt;&#x2F;li&gt;
&lt;li&gt;denotational semantics는 의미 함수들로 구성된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 의미 함수의 예시이다.&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Bin : B -&amp;gt; N
&lt;&#x2F;span&gt;&lt;span&gt;	Bin[[0]] = 0
&lt;&#x2F;span&gt;&lt;span&gt;	Bin[[1]] = 1
&lt;&#x2F;span&gt;&lt;span&gt;	Bin[[B0]] = 2 * Bin[[B]]
&lt;&#x2F;span&gt;&lt;span&gt;	Bin[[B1]] = 2 * Bin[[B]] + 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Non-Terminal statement &amp;quot;1011&amp;quot;을 위의 의미 함수에 대입한 결과는 아래와 같다.&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Bin[[1 0 1 1]] 
&lt;&#x2F;span&gt;&lt;span&gt;	= 2 * Bin[[1 0 1]] + 1
&lt;&#x2F;span&gt;&lt;span&gt;	= 2 * (2 * Bin[[1 0]] + 1) + 1
&lt;&#x2F;span&gt;&lt;span&gt;	= 2 * (2 * (2 * Bin[[1]]) + 1) + 1
&lt;&#x2F;span&gt;&lt;span&gt;	= 2 * (2 * (2 * 1) + 1) + 1
&lt;&#x2F;span&gt;&lt;span&gt;	= 11
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;제시된 의미 함수를 통해 &amp;quot;1011&amp;quot;이 &amp;quot;11&amp;quot;로 변환되는 것을 확인할 수 있다.
&lt;ul&gt;
&lt;li&gt;위 프로그램의 Semantics는 1011 -&amp;gt; 11 즉, 2진수 statement의 10진수로의 변환이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;axiomatic-semantics&quot;&gt;Axiomatic Semantics&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 요소에 대한 사전조건(Preconditions) P와 사후조건(postconditions) Q를 통해 프로그램의 의미를 파악한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 수행 측면 중 일부는 무시된다.&lt;&#x2F;li&gt;
&lt;li&gt;Preconditions는 프로그램 수행 전의 조건이며 C언어의 assert library를 통핸 수행 조건 검사를 생각하면 이해하기 편하다.&lt;&#x2F;li&gt;
&lt;li&gt;간단히 요약해 Axiomatic Semantics에 의하면, 프로그램의 Semantics란 사전 조건으로부터 사후 조건을 도출해 내는 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>11399 - ATM</title>
		<published>2023-04-03T00:00:00+00:00</published>
		<updated>2023-04-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/11399-atm/" type="text/html"/>
		<id>https://js970.github.io/11399-atm/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023월 4월 3일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : sort&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;문제의 조건에 맞게 구현하기만 하면 되는 매우 간단한 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;정렬 알고리즘을 필요로 한다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 경우의 수에 대해 고려해야 하므로 그리디 알고리즘의 범주에 속한다고 할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;CPU 스케줄링 알고리즘 중 SJF알고리즘이다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arr[i];
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arr, arr + N);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* wait = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    wait[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sum = wait[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        wait[i] = wait[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] + arr[i];
&lt;&#x2F;span&gt;&lt;span&gt;        sum += wait[i];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;11399&quot;&gt;11399번: ATM&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-04-03 수업정리</title>
		<published>2023-04-03T00:00:00+00:00</published>
		<updated>2023-04-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-4-3-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-4-3-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Programming - Optimal Binary Search Trees(1)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dynamic-programming-optimal-binary-search-trees-1&quot;&gt;Dynamic Programming - Optimal Binary Search Trees(1)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;binary-search-tree&quot;&gt;Binary Search Tree&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Binary tree의 각 노드는 하나의 key값을 포함하며, 왼쪽 subtree에 위치한 key값은 오른쪽 subtree에 위치한 key값과 비교해 같거나 작은 key값을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;Binary Tree의 Attribute로 Depth, Balanced, Search time이 있다.
&lt;ul&gt;
&lt;li&gt;Depth : level이라고도 불리며 루트에서 해당 노드 까지의 경로에 위치한 노드의 수를 depth라고 한다. tree의 depth는 해당 tree에서 가장 큰 depth값을 가지는 노드의 depth이다.&lt;&#x2F;li&gt;
&lt;li&gt;Balanced : 모든 노드에서 두 개의 subtree의 노드 수가 1이상 차이나지 않는다면 Balanced이다.
&lt;ul&gt;
&lt;li&gt;BST는 Balanced일 필요는 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Search Time : 주어진 key값을 찾을 때, 해당 key값까지 도달하기 위해 수행해야 하는 비교 연산의 횟수이다.
&lt;ul&gt;
&lt;li&gt;Average Search Time은 아래와 같이 나타낼 수 있다. 이때 c는 비교 연산의 횟수, p는 해당 노드가 선택될 확률(frequency)이다.$$Average\ Search\ Time\ =\ \sum_{i=1}^n c_ip_i$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;한 집합에 대해 Binary Search Tree는 여러 개가 존재할 수 있다. 이 중에서 Average Search Time이 가장 적은 BST를 Optimal Binary Search Tree라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Optimal Binary Search Tree를 찾기 위해 모든 BST에 대한 경우의 수를 따지게 된다면 이는 exponential time을 요구한다. root node를 제외한 나머지 노드의 BST 구성에 대한 경우의 수는 아래와 같다.$$O(2^{n-1})$$&lt;&#x2F;li&gt;
&lt;li&gt;하지만, Binary Search Tree의 특성상, 어떠한 노드에 대해 왼쪽 subtree와 오른쪽 subtree가 Optimal Binary Search Tree라면, 해당 노드를 root node로 가지는 Binary Search Tree역시 Optimal Binary Search Tree가 된다. 이러한 특성을 반영한 Recursive Equation과 Matrix를 이용하면 Dynamic Programming을 통해 Optimal Binary Search Tree를 찾을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;optimal-binary-search-tree&quot;&gt;Optimal Binary Search Tree&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Programming을 적용하기 위해서는 Recursive Equation과 matrix가 필요하다. 앞서 살펴본 BST의 임의의 노드에 대한 왼쪽 서브트리와 오른쪽 서브트리가 optimal일때, 해당 노드를 루트로 가지는 BST역시 optimal이라는 특성을 반영한 Recursive Equation은 아래와 같다.
&lt;ul&gt;
&lt;li&gt;Recursive Equation$$A[i][j] = min_{i\le k\le j}(A[i][k-1] + A[k+1][j] + \sum_{m=i}^j p_m)\ \ (*\ A[i][i] = p_i)$$
&lt;ul&gt;
&lt;li&gt;위 점화식을 풀어서 설명하면, i보다 크거나 같고, j보다 작거나 같은 수 k에 대해서 k를 루트 노드로 가지는 모든 BST에 대해서 최소 Average Search Time을 가지는 BST를 찾아 내는 과정이다.&lt;&#x2F;li&gt;
&lt;li&gt;k를 루트 노드로 가지는 각각의 경우에 대해, 왼쪽 서브트리의 탐색시간, 오른쪽 서브트리의 탐색시간, 루트 노드의 탐색시간을 더한 값이 해당 BST의 Average Search Time이다.&lt;&#x2F;li&gt;
&lt;li&gt;A[i][i]의 경우 탐색에 필요한 비교 연산 횟수가 1이다. 따라서, 해당 노드가 선택될 확률인 p에 대해서만 고려하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 recursive equation을 tree의 모든 노드로 확장하면 아래와 같다.$$A[1][n] = min_k(A[1][k-1] + A[k+1][n] + \sum_{m=1}^n p_m)$$&lt;&#x2F;li&gt;
&lt;li&gt;결국 root가 되는 key값(k값)을 찾는 것이 optimal BST를 찾는 것과 귀결된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;어떤 Data set에 대한 Optimal BST Average Search Time을 찾는 C++코드는 아래와 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 코드 구현해서 채워 넣을 것, 현재 구현한 코드에 오류 있어서 추후 업로드(2023-04-09)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;다음 수업에 이어서 진행...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-04-03 수업정리</title>
		<published>2023-04-03T00:00:00+00:00</published>
		<updated>2023-04-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-4-3-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-4-3-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Interface vs Abstract Class&lt;&#x2F;li&gt;
&lt;li&gt;RobotStrategy Review&lt;&#x2F;li&gt;
&lt;li&gt;Observer Pattern&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;interfacs-vs-abstract-class&quot;&gt;Interfacs vs Abstract Class&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;java에서는 C++과 달리 abstract method가 없어도 Abstract Class로 선언이 가능하다.
&lt;ul&gt;
&lt;li&gt;이렇게 선언할 결우 인스턴스 추상 메소드는 없지만 인스턴스 생성은 불가능한 추상 클래스가 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Concrete Class에서 조금이라도 중복되는 동작이 있다면 Abstract Class를 사용해서 코드 중복을 피할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 유지보수 관점에서 보수적으로 접근했을 경우, 새로운 클래스의 선언이 이루어졌을 때, 이전의 클래스들과 공통되는 부분이 없다면 올바른 상속이 불가능하다는 문제가 발생할 수 있다. 따라서 Strategy Pattern의 적용에 있어서는 Abstract Class보다는 Interface가 더 적합하다고 볼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 당연히 Abstract Class로 구현했을 때의 장점 또한 존재하므로(code duplication이 없음) 따로 정답이 정해져 있다기 보다는 상황에 따라 적절하게 선택하는 것이 바람직하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;robotstrategy-review&quot;&gt;RobotStrategy Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;RobotStrategy.png&quot; alt=&quot;RobotStrategy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;위 UML에서 MoveOptionList, AttackOptionList는 굳이 필요 없는 class이다.
&lt;ul&gt;
&lt;li&gt;requirement수준에서 비슷한 레벨의 사항들을 class로 구현하는데, 위 UML에서 해당 클래스들은 &lt;em&gt;Robot&lt;&#x2F;em&gt;, &lt;em&gt;Attack&lt;&#x2F;em&gt;, &lt;em&gt;Move&lt;&#x2F;em&gt; 와 같은 레벨이라고 볼 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;또한, List를 별개의 클래스로 만들어서 관리를 한다고 하더라도 private멤버로 벡터를 가지며 &lt;em&gt;Move&lt;&#x2F;em&gt;, &lt;em&gt;Attack&lt;&#x2F;em&gt; 에 화살표만으로 association을 표시하는 것은 문제가 있다.
&lt;ul&gt;
&lt;li&gt;association의 표시에서 *를 사용하여 여러 개의 &lt;em&gt;Move&lt;&#x2F;em&gt;, &lt;em&gt;Attack&lt;&#x2F;em&gt; 을 참조한다는 것을 표시하는 것으로 충분하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;어찌 됬든 TaeKwonV, Atom, Sunguard등 Concrete Class에서 직접 &lt;em&gt;Move&lt;&#x2F;em&gt;, &lt;em&gt;Attack&lt;&#x2F;em&gt; 의 Concrete Class로 구현하지 않는 것이 주 목적이었다. 이를 인터페이스나 추상 클래스를 통해서가 아니라 직접 association하게 되면 명백한 OCP위반이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;observer-pattern&quot;&gt;Observer Pattern&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;어떤 데이터가 실시간으로 업데이트 되어야 할 경우 클래스 간 서로 물리게 되는 문제가 발생한다.
&lt;ul&gt;
&lt;li&gt;데이터를 참조하는 클래스에서는 데이터를 참조하기 위해 엔티티 클래스에 association 한다.&lt;&#x2F;li&gt;
&lt;li&gt;엔티티 클래스에서는 데이터를 사용하는 클래스에 실시간 업데이트를 위해 association 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;데이터를 참조하는 클래스에서 엔티티 클래스로의 association은 문제가 되지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 엔티티 클래스에서 데이터를 사용하는 클래스로의 association은 OCP를 위반한다.
&lt;ul&gt;
&lt;li&gt;새롭게 데이터를 사용하는 클래스가 생성되었을 경우 엔티티 클래스에서 해당 클래스를 가리키는 인스턴스를 필요로 한다. 결국 이는 코드 수정을 요구하기 때문에 OCP위반이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;직접 Control Class에 association하지 않으면서 데이터를 실시간으로 갱신하기 위해서는 Behavioral Pattern의 Observer Pattern을 적용하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Observer Pattern을 적용하는 UML이다.
&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;observer_pattern.png&quot; alt=&quot;Observer Pattern&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;ConcreteEntity가 &lt;em&gt;AbstractEntity&lt;&#x2F;em&gt; 를 구현하도록 설계하여 SRP를 준수한다.
&lt;ul&gt;
&lt;li&gt;SRP : ConcreteEntity의 구현에 있어 단일 목적만을 가지고 구현해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;AbstractEntity&lt;&#x2F;em&gt; 는 Obserber 인터페이스에 association한다. 이를 통해 데이터의 변경이 일어났을 경우 update()를 호출하여 데이터를 참조하는 클래스들의 인터페이스에 알릴 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;데이터의 변경이 발생하였을 때, 데이터를 참조하는 클래스들은 Observer Interface를 구현하였으므로 &lt;em&gt;AbstractEntity&lt;&#x2F;em&gt; 의 update()호출에 의해 데이터를 실시간 변경을 업데이트 할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;또한 각 Control클래스가 Observer인터페이스를 구현하면서 DIP, ISP를 준수한다.
&lt;ul&gt;
&lt;li&gt;ISP : Interface Segregation Principle : 인터페이스를 쪼개서 필요한 기능만 구현&lt;&#x2F;li&gt;
&lt;li&gt;DIP : Dependency Inversion Principle : 상위 모듈은 하위 모듈에 의존하면 안되고, 추상화는 실제 구현에 의존해서는 안된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-04-03 수업정리</title>
		<published>2023-04-03T00:00:00+00:00</published>
		<updated>2023-04-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-4-3-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-4-3-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Review&lt;&#x2F;li&gt;
&lt;li&gt;Terminologies&lt;&#x2F;li&gt;
&lt;li&gt;Basic Concepts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;process&quot;&gt;Process&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;process_state.png&quot; alt=&quot;process states&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;실행 중인 프로그램&lt;&#x2F;li&gt;
&lt;li&gt;실행 중인 프로그램의 상태 정보(PC, pid 등)는 PCB라는 자료구조에 저장한다.
&lt;ul&gt;
&lt;li&gt;PCB : Process Control Block, TCB라고도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Process의 실행 정보를 Context라고 하고, 이를 교체하는 것이 Context-Switching이다.
&lt;ul&gt;
&lt;li&gt;ready -&amp;gt; running&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Context Switching이 일어나면 Idle time에 의한 오버헤드가 발생한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scheduling&quot;&gt;Scheduling&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Job Queue(모든 프로세스), Ready Queue(ready 프로세스), Device queue(I&#x2F;O 프로세스)&lt;&#x2F;li&gt;
&lt;li&gt;각 Queue종류에 따라 Short-term, Long-term, Medium-term scheduler가 존재&lt;&#x2F;li&gt;
&lt;li&gt;I&#x2F;O bound process : 실행시간이 긴 편&lt;&#x2F;li&gt;
&lt;li&gt;CPU boun process : I&#x2F;O process에 비해 실행시간이 짧은 편&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;terminologies&quot;&gt;Terminologies&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;workload&quot;&gt;Workload&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 작업량, 아래와 같은 가정에서 시작한다.(문제 풀이에 있어서)
&lt;ol&gt;
&lt;li&gt;각각의 작업들은 동일한 시간동안 실행된다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 job들은 동시에 도착한다.&lt;&#x2F;li&gt;
&lt;li&gt;한번 job을 실행하면, job을 완료할 때까지 실행된다.&lt;&#x2F;li&gt;
&lt;li&gt;CPU bound process에 대해서만 생각한다(I&#x2F;O는 일단 무시한다.)&lt;&#x2F;li&gt;
&lt;li&gt;각각의 job의 수행 시간은 알려져 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scheduler&quot;&gt;Scheduler&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;수행되어야 할 job의 동작시점을 정하는 역할을 한다.
&lt;ul&gt;
&lt;li&gt;discrete time으로 끊어서 logic을 수행한다.(이는 scheduler에 따라 다르다.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;metric&quot;&gt;Metric&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;scheduling의 quality를 바교하는 기준이다.&lt;&#x2F;li&gt;
&lt;li&gt;turnaround time관점, respond time관점, fairness관점 등 여러 가지가 존재한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;burst&quot;&gt;Burst&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;실행 시간&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;observations&quot;&gt;Observations&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU Burst에 대한 측정을 해보면 고르게 분포되어 있지 않고, 대부분의 작업들이 특정 frequency구간에 모여 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Scheduling에 있어서는 이러한 특징에 대해 고려해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;그렇다고 특정 Scheduling방법이 옳은 것은 아니다. 이는 Metric에 따라 다르다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cpu-scheduler&quot;&gt;CPU Scheduler&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 CPU scheduling은 아래와 같은 4가지 경우 발생한다.
&lt;ol&gt;
&lt;li&gt;running to waiting 상태로의 천이&lt;&#x2F;li&gt;
&lt;li&gt;running to ready 상태로의 천이&lt;&#x2F;li&gt;
&lt;li&gt;waiting to ready 상태로의 천이&lt;&#x2F;li&gt;
&lt;li&gt;terminate로의 천이&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;1, 4는 scheduler가 nonpreemptive 방식으로 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;2, 3은 scheduler가 preemptive 방식으로 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;기본적으로 scheduler는 nonpreemptive, preemptive 모두 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;preemptive-vs-nnpreemptive&quot;&gt;Preemptive vs Nnpreemptive&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;nonpreemptive scheduling방식에서는 어떤 프로세스가 CPU를 점유하면, 해당 프로세스가 CPU제어를 내려놓기 전까지 다른 프로세스는 대기 상태에 머무르게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;preemptive scheduling은 대기 상태의 프로세스가 실행 중인 프로세스를 밀어내고 &amp;quot;치고 들어가는&amp;quot; 방식이다. 일반적으로 아래와 같은 경우 preemptive scheduling 을 사용한다.
&lt;ul&gt;
&lt;li&gt;특정 하드웨어(타이머 등)&lt;&#x2F;li&gt;
&lt;li&gt;공유 데이터로의 접근 시도&lt;&#x2F;li&gt;
&lt;li&gt;커널 모드의 preemption&lt;&#x2F;li&gt;
&lt;li&gt;curtial OS activity의 interrupt&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;preemtive scheduling은 데이터의 read&#x2F;write에 대해 issue가 발생할 수 있다.
&lt;ul&gt;
&lt;li&gt;여러 프로세스가 공유 자원을 사용하고 있을 때, read&#x2F;write동작이 섞여 들어올 때 발생하는 문제이다.
&lt;ul&gt;
&lt;li&gt;이러한 문제는 critical section등의 해법을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;scheduling algorithm에서는 고려하지 않는다.(continue at Atomic operation)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dispatcher&quot;&gt;Dispatcher&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;dispatcher는 scheduler에 의해 선택된 프로세스로 CPU제어를 부여한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 실행을 위해 아래와 같은 동작을 수행한다.
&lt;ul&gt;
&lt;li&gt;switching context&lt;&#x2F;li&gt;
&lt;li&gt;switching to user mode&lt;&#x2F;li&gt;
&lt;li&gt;jumping to the proper location in the user program to restart that program&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;한 프로세스의 실행을 중지하고 다른 프로세스를 실행하는 과정에서 latency가 발생한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scheduling-criteria-gijju&quot;&gt;Scheduling Criteria(기준)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU Utilization
&lt;ul&gt;
&lt;li&gt;최대한 CPU 사용률을 높여서 성능을 향상시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Throughput
&lt;ul&gt;
&lt;li&gt;단위시간당 실행을 마치는 프로세스의 개수를 증가시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Turnaround time
&lt;ul&gt;
&lt;li&gt;특정 프로세스 실행에 걸리는 시간을 의미한다. 아래와 같이 계산 가능하다.$$T_{turnaround} = T_{completion} - T_{arrival}$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Waiting time
&lt;ul&gt;
&lt;li&gt;프로세스가 ready queue에서 대기하는 시간을 의미한다. 아래와 같이 계산 가능하다.$$T_{waiting} = T_{turnaround} - T_{burst}$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Response time
&lt;ul&gt;
&lt;li&gt;process request이후 첫 response까지 걸리는 시간이다. 아래와 같이 계산 가능하다.$$T_{response} = T_{firstrun} - T_{arrival}$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Scheduling의 목적은 CPU utilization을 극대화하기 위해서, 즉 cpu busy time을 극대화하기 위해 프로세스 당 실행 시간은 줄이고 대기 시간 역시 줄이는 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;평균보다는 minimum time, maximum time에 대한 optimization을 수행한다.
&lt;ul&gt;
&lt;li&gt;실제로 사용자의 체감은 평균값이 아닌 최댓값, 최솟값에 영향을 받기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;response time에 대한 variance를 줄이는 것이 목적이다. 이는 preemptive scheduling에서의 starvation과 연관이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Nachos(1)</title>
		<published>2023-03-30T00:00:00+00:00</published>
		<updated>2023-03-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/nachos-ssisseu-1/" type="text/html"/>
		<id>https://js970.github.io/nachos-ssisseu-1/</id>
		<content type="html">&lt;h1 id=&quot;1&quot;&gt;#1&lt;&#x2F;h1&gt;
&lt;p&gt;KThread.java의 389행의 run함수를 고쳐서 각 Thread가 10번 실행되도록 할 수 있다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*** thread &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + which + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; looped &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		+ i + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; times&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ssihaeng-ggyeogwa&quot;&gt;실행 결과&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;nachos_practice1_1.png&quot; alt=&quot;nachos practice execution1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2&quot;&gt;#2&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;kthread-fork&quot;&gt;KThread.fork()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(status == statusNew);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(target != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(dbgThread,
&lt;&#x2F;span&gt;&lt;span&gt;			  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Forking thread: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;() + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; Runnable: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + target);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; intStatus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;		tcb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Runnable&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		    }&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restore&lt;&#x2F;span&gt;&lt;span&gt;(intStatus);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;fork()메소드는 두 개의 thread가 병렬적으로 실행되도록 동작한다. TCB에 Runnable객체를 추가하여 ready queue에 삽입하고, ready상태로 만든다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;joggeo-hwagin&quot;&gt;조건 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.assertTrue() method를 사용하여 조건의 상황을 만족시키지 않는다면 assert를 발생시킨다.
&lt;ul&gt;
&lt;li&gt;status가 statusNew가 아닌 상황이라면 assert&lt;&#x2F;li&gt;
&lt;li&gt;target 이 null인 상황이라면 assert&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dibbehugg-mesiji-culryeog&quot;&gt;디버깅 메시지 출력&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.debug() method를 사용하여 디버깅 메시지를 출력한다. 이때 파라미터로 전달되는 dbgThread의 값은 KThread.java파일에서 static final로 선언된 &lt;code&gt;t&lt;&#x2F;code&gt;값을 가진다.
&lt;ul&gt;
&lt;li&gt;debug메소드에서 파라미터로 사용되는 toString()메소드는 KThread클래스의  이름 및 id값을 string으로 반환하는 역할을 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jihyeo-bbyeosu-sseoheo&quot;&gt;지역 변수 선언&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;intStatus 지역 변수를 선언한다.
&lt;ul&gt;
&lt;li&gt;이 과정에서 Machine.interrupt().disable()메소드를 호출하고 그 반환값으로 insStatus를 초기화한다.&lt;&#x2F;li&gt;
&lt;li&gt;Machine.interrupt().disable()메소드는 현재 상태를 interrupt = false로 설정하고, 이전 상태를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;thread-ready&quot;&gt;Thread ready&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;tcb.start() 메소드를 통해 본 객체가 가리키는 thread의 실행을 준비한다. 이때 파라미터로 전달되는 Runnable 객체는 abstract method인 run()메소드에서 runThread()메소드를 수행하도록 구현된다.&lt;&#x2F;li&gt;
&lt;li&gt;ready() 메소드를 통해 객체가 가리키는 thread를 ready상태로 전이시키고 readyQueue에 추가한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ijjeo-ssantae-bbohweo&quot;&gt;이전 상태 복원&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;지역 변수 선언 단계에서 Machine.interrupt().disable()메소드를 호출했다. 이때 intStatus 지역 변수를 통해 이전 상태를 저장해 두었는데, fork()메소드를 종료하기 전 Machine.interrupt().restore() 메소드를 사용하여 다시 intStatus상태(이전 상태)로 되돌린다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kthread-runthread&quot;&gt;KThread.runThread()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde-1&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runThread&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		target.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;finish&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo-1&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;KThread클래스 내부에서 사용되는 private method이다. 바로 직전에 다룬 Kthread.fork()메소드에서 호출하는 것을 확인한 바 있다. 현재 thread의 실행 준비, 실행, 실행 종료 과정을 순서대로 수행하도록 동작한다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;begin-hocul-ssihaeng-jjubi&quot;&gt;begin() 호출(실행 준비)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;begin()메소드에서는 Lib.debug(), Lib.assertTrue()메소드를 호출하여 디버깅 메시지 출력 및 조건 검사를 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 KThread가 currentThread가 아니라면 assert한다.&lt;&#x2F;li&gt;
&lt;li&gt;조건 검사가 끝난 후 현재 thread가 실행되도록 restoreState() 메소드를 사용하여 준비한다.&lt;&#x2F;li&gt;
&lt;li&gt;restoreState()가 끝나면 Machine.interrupt().enable()메소드를 호출하여 Machine이 interrupt enable 상태가 되도록 변경한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;thread-ssihaeng&quot;&gt;thread 실행&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;KThread클래스에서 선언한 run메소드를 실행시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;본 과제의 1번 문항에서 5회 실행되었던 thread를 10회 실행시키도록 바꾸었던 그 부분이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;finish-hocul-ssihaeng-jjonryo&quot;&gt;finish() 호출(실행 종료)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;finish()메소드에서는 Lib.debug() 메소드를 호출하여 디버깅 메시지를 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;begin()메소드에서 설정한 Machine의 interrupt enable상태를 Machine.interrupt().disable()메소드를 사용하여 interrupt disable상태로 변경한다.&lt;&#x2F;li&gt;
&lt;li&gt;Machine.autoGrader().finishingCurrentThread()메소드를 호출하여 현재 thread를 종료한다.
&lt;ul&gt;
&lt;li&gt;이때 autoGrader객체의 finishingCurrentThread()메소드는 privilege.tcb.authorizeDestroy()메소드를 이용하여 현재 thread가 종료되었다는 것을 autograder에게 명시한다.&lt;&#x2F;li&gt;
&lt;li&gt;이로써 현재 thread는 적절한 시기에 delete된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Lib.assertTrue() 메소드를 사용하여 수행 조건을 확인한다.
&lt;ul&gt;
&lt;li&gt;toBeDestroyed != null이라면 assert한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;toBeDestroyed = currentThread로 값을 초기화한다.
&lt;ul&gt;
&lt;li&gt;이를 통해 현재 thread가 적절한 때에 Destroy될 수 있도록 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;현재 thread의 status를 Finished로 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;sleep()을 호출하여 현재 thread가 다음 scheduled thread에 의해 destroy되도록 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kthread-yield&quot;&gt;KThread.yield()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde-2&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(dbgThread, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Yielding thread: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(currentThread.status == statusRunning);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; intStatus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runNextThread&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restore&lt;&#x2F;span&gt;&lt;span&gt;(intStatus);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo-2&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;현재 thread가 ready 상태인 다른 thread가 있을 경우 cpu점유권을 양보하도록 한다. 이때 현재 thread는 destroy되는 것이 아닌 ready상태로 전이하며, readyQueue에 삽입되어 다시 스케줄링 될 수 있도록 한다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dibbehugg-mesiji-culryeog-mic-joggeo-hwagin&quot;&gt;디버깅 메시지 출력 및 조건 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.debug()메소드를 호출하여 디버깅 메시지를 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;Lib.assertTrue()메소드를 호출하여 currentThread의 상태가 running상태가 아니라면 assert를 발생시킨다.
&lt;ul&gt;
&lt;li&gt;yeild()메소드 자체가 동작 개요에서 설명했듯이 현재 thread의 cpu사용권을 양보하는 개념으로 구현되었기 때문에 현재 thread가 running이 아니라면 assert&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jihyeo-bbyeosu-sseoheo-1&quot;&gt;지역 변수 선언&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;fork()메소드에서와 마찬가지로 지역 변수 intStatus에 Machine.interrupt().disable()메소드를 사용하여 이전 상태를 저장하고, interrupt disable상태로 설정한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hyeonjja-thread-ssantae-jjeoi-running-ready&quot;&gt;현재 thread 상태 전이(running -&amp;gt; ready)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ready()메소드를 사용하여 현재 thread를 ready상태로 전이시키고 readyQueue에 삽입한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;daheu-thread-ssihaeng&quot;&gt;다음 thread 실행&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;runNextThread()메소드를 호출하여 readyQueue의 다음 thread를 실행시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ijjeo-ssantae-bbohweo-1&quot;&gt;이전 상태 복원&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;yeild()메소드를 종료하기 전에 Machine.interrupt().restore()메소드를 사용하여 다시 intStatus상태로 복원시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kthread-sleep&quot;&gt;KThread.sleep()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde-3&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(dbgThread, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sleeping thread: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(currentThread.status != statusFinished)
&lt;&#x2F;span&gt;&lt;span&gt;		currentThread.status = statusBlocked;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runNextThread&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo-3&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;이전에 알아본 runThread()메소드 내부에서 호출한 finish()메소드에서 사용한 적 있는 메소드이다.
sleep()메소드는 현재 thread가 finish 또는 block되었을 경우 현재 thread를 sleep시켜 readyQueue에 삽입되도록 하거나 destroy되도록 하는 역할을 한다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dibbehugg-mesiji-culryeog-mic-joggeo-hwagin-1&quot;&gt;디버깅 메시지 출력 및 조건 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.debug(), Lib.assertTrue()메소드를 사용하여 디버깅 메시지를 출력하고, 실행 조건을 확인한다.
&lt;ul&gt;
&lt;li&gt;interrupt disabled상태가 아니라면 assert를 발생시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ssanhwang-pandda&quot;&gt;상황 판단&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;동작 개요의 설명과 같이, sleep()메소드는 현재 메소드가 finished thread라면 destroy하고, block된 thread라면 readyQueue로 삽입한다.&lt;&#x2F;li&gt;
&lt;li&gt;조건문을 통해 현재 thread가 finised 상태인지 아닌지를 판단한다.&lt;&#x2F;li&gt;
&lt;li&gt;현재 thread가 finished상태가 아니라면 blocked 상태로 판단하고 currentThread의 status를 Blocked로 설정한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;daheu-threadssihaeng&quot;&gt;다음 thread실행&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;runNextThread()메소드를 수행하여 readyQueue의 다음 thread을 실행시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kthread-join&quot;&gt;KThread.join()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde-4&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;p&gt;본 실습에서 제공된 join()메소드의 코드는 조건 검사를 제외한 아무런 동작도 하지 않아 이상함을 느끼고 직접 nachos프로젝트의 저장소를 찾아가 join()구현부를 따로 찾아보았다. join()메소드의 동작 과정과 소스 코드 분석은 github의 코드를 바탕으로 수행하였다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;과제 제시 코드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(dbgThread, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Joining to thread: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span&gt;!= currentThread);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;nachos github 코드(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kanrourou&#x2F;nachos&#x2F;blob&#x2F;master&#x2F;threads&#x2F;KThread.java&quot;&gt;nachos - KThread.java&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(dbgThread, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Joining to thread: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span&gt;!= currentThread);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.status==statusFinished){
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; inStatus=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt;.currentThread.isJoined);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		joinQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waitForAccess&lt;&#x2F;span&gt;&lt;span&gt;(currentThread);
&lt;&#x2F;span&gt;&lt;span&gt;		isJoined=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restore&lt;&#x2F;span&gt;&lt;span&gt;(inStatus);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo-4&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;join()메소드는 현재 객체의 thread를 다른 thread에서 기다리도록 하는 method이다. 당연하지만 현재 객체의 thread는 현재 실행 중인 thread일 수 없다. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;dibbehugg-mesiji-culryeog-mic-joggeo-hwagin-2&quot;&gt;디버깅 메시지 출력 및 조건 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.debug()메소드를 이용하여 디버깅 메시지를 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;동작 개요에서 설명한 것처럼 현재 실행중인 thread에서는 join()메소드를 호출할 수 없으므로 이에 대해 Lib.assertTrue()메소드를 확인하여 실행 조건을 확인한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bbo-ggaeceyi-threadga-imi-finished-ssantaein-ggyeonue-ddahan-ceori&quot;&gt;본 객체의 thread가 이미 finished 상태인 경우에 대한 처리&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;본 객체의 thread가 이미 finished상태인 경우 join을 위해 대기할 필요가 없으므로 바로 return 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;jihyeo-bbyeosu-sseoheo-2&quot;&gt;지역 변수 선언&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;지역 변수 inStatus를 이용하여 이전 상태를 저장한다. 이때 호출하는 Machine.interrupt().disable()메소드에 의해 interrupt disable된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;joinhyebu-hwagin&quot;&gt;join여부 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;조건문을 사용하여 join여부를 확인한다.&lt;&#x2F;li&gt;
&lt;li&gt;isJoined == false인 경우 joinQueue의 waitForAccess() 메소드를 호출한다.
&lt;ul&gt;
&lt;li&gt;이때 waitForAccess()메소드의 파라미터로는 currentThread가 들어간다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;isJoined를 true로 초기화한다.&lt;&#x2F;li&gt;
&lt;li&gt;sleep()을 호출하여 대기한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ijjeo-ssantae-bbohweo-2&quot;&gt;이전 상태 복원&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;inStatus를 이용하여 이전 state로 복원한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kthread-runnextthread&quot;&gt;KThread.runNextThread()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde-5&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runNextThread&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt; nextThread = readyQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextThread&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(nextThread == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		nextThread = idleThread;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	nextThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo-5&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;readyQueue의 다음 thread를 실행시킨다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;daheu-thread-load&quot;&gt;다음 thread load&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;local variable nextThread를 선언한다. nextThread에는 readyQueue의 다음 thread가 할당된다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 loadThread가 null이라면(queue가 비어 있는 상황 등) nextThread로 idleThread를 할당한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;loadddoe-nextthreadssihaeng&quot;&gt;load된 nextThread실행&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;load된 다음 실행될 thread인 nextThread를 run()메소드를 사용하여 실행시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kthread-run&quot;&gt;KThread.run()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde-6&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;saveState&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(dbgThread, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Switching from: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		  + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	currentThread = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	tcb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contextSwitch&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restoreState&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo-6&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;현재 실행중인 thread를 yeild하고 새로운 thread를 실행시킨다. currentThread를 run()메소드를 호출한 객체의 thread로 갱신한다. 이후 context switching을 수행하고 새로운 thread를 실행시킨다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ssihaeng-joggeo-hwagin&quot;&gt;실행 조건 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.assertTrue()메소드를 통해 interrupt disabled상태가 아니라면 assert시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;run-suhaeng-jjubi&quot;&gt;run() 수행 준비&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;현재 실행되고 있는 thread에 대해서 yield를 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;saveState()메소드를 호출하여 currentTHread가 프로세스 점유를 포기하도록 한다.
&lt;ul&gt;
&lt;li&gt;바로 직전 라인에서 yield()를 수행하였지만, currentThread에 대한 갱신은 아직 이루어지지 않았으므로, 이전에 실행되고 있던 thread에 대해 수행되는 구문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dibbehugg-mesiji-culryeog-1&quot;&gt;디버깅 메시지 출력&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.debug()메소드를 호출하여 디버깅 메시지를 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;context-switching&quot;&gt;context switching&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;currentThread를 yiled()의 호출로 실행되고 있는 thread로 갱신한다.&lt;&#x2F;li&gt;
&lt;li&gt;tcb.contextSwitch()메소드를 호출하여 context switching 이 일어나도록 한다.
&lt;ul&gt;
&lt;li&gt;current TCB를 이전 thread의 tcb에서 새롭게 갱신된 thread의 tcb로 갱신한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;threadssihaeng-jjubi&quot;&gt;thread실행 준비&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;context switching까지 끝났으므로 cureentThread에 대해 restoreState() 메소드를 호출하여 thread를 실행시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kthread-restorestate&quot;&gt;KThread.restoreState()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde-7&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restoreState&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(dbgThread, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Running thread: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + currentThread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span&gt;== currentThread);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(tcb == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TCB&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentTCB&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;autoGrader&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runningThread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	status = statusRunning;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(toBeDestroyed != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		toBeDestroyed.tcb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;destroy&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;		toBeDestroyed.tcb = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		toBeDestroyed = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo-7&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;현재 thread가 실행될 준비를 하고, 상태를 running으로 전이시킨다. 이전 thread의 종료로 인한 tcb의 destroy리스트가 남아 있다면 destroy를 수행한다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dibbehugg-mesiji-culryeog-2&quot;&gt;디버깅 메시지 출력&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.debug()메소드를 호출하여 디버깅 메시지를 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ssihaeng-joggeo-hwagin-1&quot;&gt;실행 조건 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lib.assertTrue()메소드를 호출하여 실행 조건을 검사한다.
&lt;ul&gt;
&lt;li&gt;interrupt disabled 상태가 아니라면 assert한다.&lt;&#x2F;li&gt;
&lt;li&gt;현재 thread가 실행 중인(currentThread)thread가 아니라면 assert한다.&lt;&#x2F;li&gt;
&lt;li&gt;현재 tcb가 실행 중인(TCB.currentTCB()메소드를 이용해 확인)TCB가 아니라면 assert 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 실행 조건들은 run()메소드에서 restoreState()메소드를 호출하기 전에 했던 일련의 과정들과 일치함을 알 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hyeonjja-threadssihaeng&quot;&gt;현재 thread실행&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Machine.autoGrader().runningThread()메소드에 this(현재 thread)를 파라미터로 입력하여 autoGrader에 현재 thread 정보를 명시한다.
&lt;ul&gt;
&lt;li&gt;runningThread()메소드에서는 파라미터로 전달받은 thread객체에 대해 tcb를 매칭하고, currentThread를 갱신한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;status를 running상태로 갱신한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tobedestroyed-hwagin&quot;&gt;toBeDestroyed 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;thread를 가리키는 지역 변수인 toBeDestroyed를 검사하여 null인 경우에는 destroy할 thread가 없음을 의미하므로 별도의 동작 없이 restoreState()를 마친다.&lt;&#x2F;li&gt;
&lt;li&gt;toBeDestroyed가 null이 아닌 경우 toBeDestroyed thread에 대해 destroy를 수행한다.
&lt;ul&gt;
&lt;li&gt;toBeDestroyed.tcb.destroy()를 수행하여 destroy한다.&lt;&#x2F;li&gt;
&lt;li&gt;destroy가 끝나면 toBeDestroyed.tcb, toBedestroyed는 null로 초기화한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kthread-savestate&quot;&gt;KThread.saveState()&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;kodde-8&quot;&gt;코드&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* Prepare this thread to give up the processor. Kernel threads do not
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* need to do anything here.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;saveState&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Machine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interrupt&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assertTrue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span&gt;== currentThread);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ddonjja-ggayo-8&quot;&gt;동작 개요&lt;&#x2F;h3&gt;
&lt;p&gt;현재 thread가 프로세스 점유를 넘기는 것을 준비하는 메소드이다. 주석의 내용에 따르면, 커널 메소드는 이 부분에서 아무 것도 구현할 필요가 없다고 되어 있어 메소드의 구현부에는 조건 검사밖에 없는 상황이다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ssihaeng-joggeo-hwagin-2&quot;&gt;실행 조건 확인&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;interrupt disabled 되어 있지 않은 상태라면 Lib.assertTrue()메소드를 이용하여 assert한다.&lt;&#x2F;li&gt;
&lt;li&gt;동작 개요에서 설명한 대로, 본 메소드는 프로세스 점유를 넘길 준비를 하는 메소드이다. 따라서 currentThread가 현재 thread라면 말이 되지 않는다. -&amp;gt; assert&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cuceug&quot;&gt;추측&lt;&#x2F;h3&gt;
&lt;p&gt;커널 메소드가 아닌 경우에서 svaeState()메소드를 호출한 경우를 가정해 보자. saveState라는 메소드 명에 맞게, 본 메소드는 현재 thread의 context정보를 다시 불러올 수 있도록 저장하는 역할을 할 것이다. 저장된 context는 TCB 자료 구조로 메모리에 저장될 것이다.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;3&quot;&gt;#3&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;KThread는 new, ready, running, blocked, finished의 5가지 상태 중 하나의 값을 가진다. (null인 경우는 생각하지 않는다.)&lt;&#x2F;li&gt;
&lt;li&gt;PingTest클래스에서 구현된 run()메소드는 반복문을 10번 순회하면서 각 순회마다 yield()를 호출하는 구조이다.&lt;&#x2F;li&gt;
&lt;li&gt;PingTest클래스를 추가하고 이를 실행시키기 위해 ThreadedKernal.java의 selfTest()메소드에 추가한 new KThread(new PingTest(1)).setName(&amp;quot;forked thread&amp;quot;).fork()는 이 자체만으로는 아무런 결과도 출력할 수 없다. 해당 객체의 run()을 수행하는 child process를 ready queue에 올리기만 하고 running상태로 만들지는 못하기 때문이다. 즉 ready상태이지 running상태가 아니므로 이 자체만으로는 실행될 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;new KThread(new PingTest(1)).setName(&amp;quot;forked thread&amp;quot;).fork(); 코드를 통해 ready queue에 올라간 thread를 실행시키기 위해서는 KThread의 private method인 runNextThread()를 호출해야 한다. private method 이므로 직접 호출이 불가능하기 때문에 runNextThread()를 호출하는 public method를 찾아보았고, 그 결과 yeild(), sleep()에서 runNextThread()를 호출하는 것을 확인했다.&lt;&#x2F;li&gt;
&lt;li&gt;mainThread라는 Runnable 구현체를 하나 만들어서, PingTest와 비슷한 구조를 갖지만 출력은 하지 않도록 run()을 작성하였다. 아래는 mainThread 클래스의 코드이다. forked thread의 run()메소드의 반복문과 구별하기 위해 반복문의 반복자로 j를 사용하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;mainThread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Runnable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mainThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; j &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;; j &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;; j&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;그리고 ThreadedKernel.java의 selfTest()메소드에 아래와 같이 코드를 추가했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selfTest&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	mainThread mt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mainThread&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;KThread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PingTest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;forked thread&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fork&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	mt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;이때 selfTest()메소드에서 mt.run()이 fork()를 호출한 이후에 와야 한다. fork()메소드 호출 이전에 mt.run()이 위치하면 mt thread 중간에 yeild()를 호출하더라도 ready queue는 빈 상황이고, mainThread는 곧바로 다시 실행된다. 결국 mainThread가 종료된 후에 fork()가 일어나게 되므로 #3의 초기 상황과 마찬가지로 ready상태에서 running상태로 전이하지 못해 출력 코드가 실행되지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;#3 초기 코드 도식&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;nachos_practice01_1.png&quot; alt=&quot;original code abstraction&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;#3 코드 추가 이후 도식 &lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;nachos_practice01_2.png&quot; alt=&quot;original code abstraction&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;다음은 nachos를 실행하여 확인한 결과이다.
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;nachos_practice1_3.png&quot; alt=&quot;실행결과&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;mainThread의 반복 횟수를 10회로 설정한 이유는 PingTest의 run() 메소드에서 10번 yield()를 호출하기 때문이다. mainThread의 반복 횟수가 10회 이상이라면 ready queue에서 PingTest가 10번 yield를 실행해도 10번 모두 실행된다. 하지만 10회 미만이라면 mainThread가 모두 실행된 이후 yeild()가 호출되지 않고 thread가 종료되어 forked thread가 실행되지 못해 10번 모두 실행하지 않고 끝나는 결과로 출력된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-30 수업정리</title>
		<published>2023-03-30T00:00:00+00:00</published>
		<updated>2023-03-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-3-30-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-3-30-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Review&lt;&#x2F;li&gt;
&lt;li&gt;Scheme&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;3.28 수업정리에서 이어짐&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Grammar : (N, T, P, S)
&lt;ul&gt;
&lt;li&gt;N : non-terminal set&lt;&#x2F;li&gt;
&lt;li&gt;T : terminal set&lt;&#x2F;li&gt;
&lt;li&gt;P : production rules&lt;&#x2F;li&gt;
&lt;li&gt;S : start symbols&lt;&#x2F;li&gt;
&lt;li&gt;다음 수식에서 N과 (N, T)의 합집합에 대한 kleene closure가 times되었다. -&amp;gt; CFG$$P \subseteq N \times (N \cup T)^* $$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;문법을 표현하는 방법으로는 CFG로 표기하는 방법과 BNF로 표기하는 방법이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래에서 CFG와 BNF로 표기된 문법은 동치이다.
&lt;ul&gt;
&lt;li&gt;CFG$$P = {A-&amp;gt;a,\ A-&amp;gt;aAa},\ N = {A},\ T = {a},\ S = A$$&lt;&#x2F;li&gt;
&lt;li&gt;BNF&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&amp;lt;A&amp;gt; ::= a &amp;lt;A&amp;gt; a
&lt;&#x2F;span&gt;&lt;span&gt;	| a
&lt;&#x2F;span&gt;&lt;span&gt;	;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 예시에서 확인할 수 있둣이, BNF는 ::=(assignment), &amp;lt;변수&amp;gt;, &#x27;상수&#x27; 와 같은 meta-symbol을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;문법에 따라 derivation하는 것을 tree형태로 나타낸 것이 parse tree이다.&lt;&#x2F;li&gt;
&lt;li&gt;parse tree는 아래와 같이 분류할 수 있다.
&lt;ul&gt;
&lt;li&gt;AST : Abstract Statement Tree, 추상구문트리&lt;&#x2F;li&gt;
&lt;li&gt;CST : Concrete Statement Tree&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;scheme&quot;&gt;Scheme&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;LISP이 Scheme, Common LISP으로 발전했다. Common LISP은 CLOS로 발전했고, Scheme과 CLOS의 variant라고 할 수 있는 Clojure가 탄생했다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lisp&quot;&gt;LISP&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;LISt Processing, John McCarthy, 1958&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scheme-1&quot;&gt;Scheme&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;교육용 LISP 변종이다.&lt;&#x2F;li&gt;
&lt;li&gt;LISP도 간단한 언어이지만, Scheme은 LISP의 여러 기능을 생략한 매우 작은 크기의 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;본 강의에서는 R5RS Scheme표준을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scheme-teugjjin&quot;&gt;Scheme 특징&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;LISP과 마찬가지로 계산보다는 기호처리가 중심이다 -&amp;gt; 인공지능 분야에서 활약&lt;&#x2F;li&gt;
&lt;li&gt;전통적인 함수형 언어이며, 재귀적 함수호출이 중심이 되는 언어이다.
&lt;ul&gt;
&lt;li&gt;function call 이 recursive하게 일어난다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;LISP과는 다른 특징으로는 아래와 같은 특징이 있다.
&lt;ul&gt;
&lt;li&gt;배치 영역 규칙, lexical scoping(static scpoing과 유사하다.)&lt;&#x2F;li&gt;
&lt;li&gt;꼬리 호출 최적화(tail-call optimization)&lt;&#x2F;li&gt;
&lt;li&gt;일등급 컨틴뉴에이션(first-class continuation) - 꼬리함수?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;장점 : 간단한 구문&lt;&#x2F;li&gt;
&lt;li&gt;단점 : 너무 간단한 구문&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scheme-gumun&quot;&gt;Scheme 구문&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;S-Expression : 리스트와 아톰으로 구성된다.
&lt;ul&gt;
&lt;li&gt;아톰 : symbols, literals&lt;&#x2F;li&gt;
&lt;li&gt;리스트 : Scheme의 유일한 자료 구조이다. 아톰을 원소로 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;S-Expression : (f a1 a2)의 의미는 a1, a2의 값을 구한 후 여기에 함수 f를 적용하겠다는 의미이다.
&lt;ul&gt;
&lt;li&gt;이를 Eval-Apply Model이라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;특수 구문
&lt;ul&gt;
&lt;li&gt;(quote ...) : ...을 있는 그대로 취급하라&lt;&#x2F;li&gt;
&lt;li&gt;(cond ...) : 조건에 따라 값을 계산하라&lt;&#x2F;li&gt;
&lt;li&gt;(let ... expr) : 바인딩이 있는 상태에서 expr을 계산하라&lt;&#x2F;li&gt;
&lt;li&gt;(define name expr) : name을 expr로 정의하라&lt;&#x2F;li&gt;
&lt;li&gt;(lambda (x y ...) expr) : x y ... 을 인수로 받아서 expr을 반환하는 함수&lt;&#x2F;li&gt;
&lt;li&gt;(if c x y) : c가 참이면 x, 거짓이면 y를 실행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scheme-reference&quot;&gt;Scheme Reference&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scheme 구현&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;racket-lang.org&#x2F;&quot;&gt;Racket&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;위 링크를 통해 .sh파일로 설치할 경우 실행을 위해 환경 변수를 추가해야 하는 번거로움이 있다. 아래의 커멘드를 통해 설치하는 것을 권장한다.(Ubuntu)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; add-apt-repository ppa:plt&#x2F;racket	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install racket
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;swiss.csail.mit.edu&#x2F;projects&#x2F;scheme&#x2F;&quot;&gt;MIT&#x2F;GNU Scheme&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Standards
&lt;a href=&quot;http:&#x2F;&#x2F;swiss.csail.mit.edu&#x2F;ftpdir&#x2F;scheme-reports&#x2F;r5rs.ps&quot;&gt;R5RS, 1998&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.r6rs.org&#x2F;final&#x2F;r6rs.pdf&quot;&gt;R6RS, 2007&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;small.r7rs.org&#x2F;attachment&#x2F;r7rs.pdf&quot;&gt;R7RS, 2013&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scheme-ssisseu&quot;&gt;Scheme 실습&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;입력된 정수의 factorial을 출력하는 Scheme프로그램&lt;&#x2F;li&gt;
&lt;li&gt;코드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Scheme&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Scheme &quot;&gt;&lt;code class=&quot;language-Scheme&quot; data-lang=&quot;Scheme&quot;&gt;&lt;span&gt;(define factorial
&lt;&#x2F;span&gt;&lt;span&gt;	(lambda (x)
&lt;&#x2F;span&gt;&lt;span&gt;	  (if (= x 0) (+ x 1) (* x (factorial (- x 1))))))
&lt;&#x2F;span&gt;&lt;span&gt;(write (factorial (read)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;실행
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;racket_factorial.png&quot; alt=&quot;racket_factorial&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;구현 설명
&lt;ul&gt;
&lt;li&gt;x가 0값을 가질 때는 x+1 즉, 1을 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;이외의 경우에는 factorial(x-1)에 x를 곱한 값을 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;write을 통해 입력을 받는다.&lt;&#x2F;li&gt;
&lt;li&gt;입력 받은 값(read)를 factorial함수의 연산을 거쳐 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-03-29 수업정리</title>
		<published>2023-03-29T00:00:00+00:00</published>
		<updated>2023-03-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-3-29-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-3-29-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Programming - Binomial Coefficient&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Programming - Floyd&#x27;s Algorithm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dynamic-programming-binomial-coefficient&quot;&gt;Dynamic Programming - Binomial Coefficient&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Programming을 통해 이항 계수를 구하는 알고리즘에 대해 알아보자&lt;&#x2F;li&gt;
&lt;li&gt;Combination 연산의 성질 중 다음과 같은 성질이 있다.$$_nC_k = &lt;em&gt;{n-1}C&lt;&#x2F;em&gt;{k-1} + _{n-1}C_k$$&lt;&#x2F;li&gt;
&lt;li&gt;이를 이용하여 Combination의 계산이 가능하다. 하지만 이 자체를 recursive하게 구현 할 경우, 이전에 계산한 항에 대해 다시 연산하게 되어 성능이 떨어지는 문제점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;만약 이전 항이 미리 계산되었고, 배열을 통해 저장되어 이후에 별도의 연산 없이 그 값을 사용할 수 있다면 이러한 문제를 해결할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-programming-jjeohyon&quot;&gt;Dynamic Programming 적용&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Programming의 적용을 위해서는 Recursive Equation과 Matrix가 필요하다.&lt;&#x2F;li&gt;
&lt;li&gt;Recursive Equation으로는 앞서 살펴본 Combination연산의 성질을 이용할 수 있다.$$B[i][j] = B[i-1][j-1] + B[i-1][j]\ \ (if\ j=0\ or\ i=1,\ B[i][j] = 1)$$&lt;&#x2F;li&gt;
&lt;li&gt;n개 중 k개를 선택하는 조합 연산을 위해서는 n*k 크기의 배열을 사용하여 기존 연산값을 저장할 수 있다.
&lt;ul&gt;
&lt;li&gt;실제 이차원 배열에서 사용하는 공간은 n*k 배열의 왼쪽 아래 삼각형 부분만 사용하므로 동적 할당을 이용한다면 메모리 절약이 가능하긴 하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 Dynamic Programming 방법을 통해 이항 계수를 구하는 프로그램을 구현한 코드는 아래와 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initialize_binomial_coefficient_matrix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++) 
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		arr[i][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt;= i; j++)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i == j) arr[i][j] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; arr[i][j] = arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;][j-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] + arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;][j];
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ROW, COL;
&lt;&#x2F;span&gt;&lt;span&gt;	cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type ROW and COL size of total space&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;	cin &amp;gt;&amp;gt; ROW &amp;gt;&amp;gt; COL;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** binomial_coefficient_matrix = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[ROW+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; ROW+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		binomial_coefficient_matrix[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[COL+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; COL+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j++) 
&lt;&#x2F;span&gt;&lt;span&gt;			binomial_coefficient_matrix[i][j] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialize_binomial_coefficient_matrix&lt;&#x2F;span&gt;&lt;span&gt;(binomial_coefficient_matrix, ROW+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, COL+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type n and r for calculate nCr&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, r; cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; r;
&lt;&#x2F;span&gt;&lt;span&gt;	cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; r &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; binomial_coefficient_matrix[n][r] &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;dynamic-programming-floyd-s-algorithm&quot;&gt;Dynamic Programming - Floyd&#x27;s Algorithm&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;플로이드 알고리즘은 그래프 상에서 최단 경로를 구하는 알고리즘이다.&lt;&#x2F;li&gt;
&lt;li&gt;그래프는 노드와 간선, 간선의 가중치(비용)로 이뤄진다.&lt;&#x2F;li&gt;
&lt;li&gt;노드 간 이동에 있어 (i -&amp;gt; j) 보다 (i -&amp;gt; k -&amp;gt; j)의 비용이 더 적을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-programming-jjeohyon-1&quot;&gt;Dynamic Programming 적용&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;인접하지 않은 노드의 비용은 무한대, 인접한 노드의 비용은 간선의 가중치로 설정한 2차원 배열 G를 생성한다.&lt;&#x2F;li&gt;
&lt;li&gt;G[i][j]는 노드 i에서 j로 이동하는 데 소모되는 최소 비용을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;Recursive Equation은 다음과 같이 설정할 수 있다.$$G^{(k)}[i][j] = minimum(length[v_i, v_j],\ length[v_i,\ v_k\ v_j])$$&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 Dynamic Programming방법으로 Floyd&#x27;s Algorithm의 구현을 통해 그래프 상의 최단 경로에 대한 가중치를 구하는 알고리즘을 구현한 코드는 아래와 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;climits&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type the number of nodes : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N; cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Floyd&amp;#39;s Algorithm - Initialization of adjacent matrix *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** graph = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        graph[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i == j) graph[i][j] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; graph[i][j] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type the number of edges : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; E; cin &amp;gt;&amp;gt; E;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type Start Node, Destination Node and their weights of each edges&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; E; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start, end, weight; cin &amp;gt;&amp;gt; start &amp;gt;&amp;gt; end &amp;gt;&amp;gt; weight;
&lt;&#x2F;span&gt;&lt;span&gt;        graph[start][end] = weight;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Floyd&amp;#39;s Algorithm - Initialization of adjacent matrix *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Floyd&amp;#39;s Algorithm - Finding lowest cost from start to destination *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; transfer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; transfer &amp;lt; N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; transfer++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; start &amp;lt; N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; start++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; end = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; end &amp;lt; N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; end++)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                graph[start][end] = 
&lt;&#x2F;span&gt;&lt;span&gt;                (graph[start][end] &amp;lt;= graph[start][transfer] + graph[transfer][end])
&lt;&#x2F;span&gt;&lt;span&gt;                 ? graph[start][end] : graph[start][transfer] + graph[transfer][end];
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Floyd&amp;#39;s Algorithm - Finding lowest cost from start to destination *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(graph[i][j] &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;) cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INF&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; graph[i][j] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;총 고려해야 할 비교 연산의 수는 시작 노드(n) * 도착 노드(n) * 경유 노드(n)으로 cubic의 시간복잡도를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;Floyd&#x27;s Algorithm은 표본의 개수가 적을 때 모든 정점의 최단 거리를 쉽게 구현 가능하다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-03-29 수업정리</title>
		<published>2023-03-29T00:00:00+00:00</published>
		<updated>2023-03-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-3-29-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-3-29-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Review&lt;&#x2F;li&gt;
&lt;li&gt;Design Pattern Overview&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;사실 &lt;a href=&quot;https:&#x2F;&#x2F;refactoring.guru&#x2F;ko&#x2F;refactoring&#x2F;smells&quot;&gt;Code Smell&lt;&#x2F;a&gt; 은 성능 측면에서는 별 영향을 주지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 code smell을 없에면 유지보수성을 강화할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;현실적으로는 유지보수성 이외에도 &lt;a href=&quot;http:&#x2F;&#x2F;www.splex.co.kr&#x2F;isoiec-9126-25010&quot;&gt;ISO 25010&lt;&#x2F;a&gt;의 여러 요소를 중요하게 판단해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;본 강의에서는 유지보수성에 중점을 두고 설명한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;design-pattern-overview&quot;&gt;Design Pattern Overview&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;일반적으로 디자인 과정은 아래와 같은 세 개의 sub-process로 나눌 수 있다.
&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;design_process.png&quot; alt=&quot;design process&quot; &#x2F;&gt;
개발 과정에서 비슷한 코드를 재사용하듯이, 설계 과정에서도 이러한 설계사항을 재사용 할 수 있다. 이를 설계의 재사용이라고 하고 Design Pattern으로 정리되었다. Design Pattern의 사용을 통해 검증된 설계를 상황에 맞게 적용할 수 있다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-data-views-consistency-problem&quot;&gt;Example : Data - Views Consistency Problem&lt;&#x2F;h3&gt;
&lt;p&gt;다음 상황의 문제점에 대해 살펴보자
&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;scorerecord.png&quot; alt=&quot;ScoreRecord&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;점수 정보를 저장하는 ScoreRecord클래스는 데이터를 가공하여 출력하는 DataSheet, PieGraph, BarGraph 클래스에 정보 갱신 사실을 알리기 위해 association 하고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;DataSheet, PieGraph, BarGraph클래스는 ScoreRecord로 부터 점수 정보를 받아오기 위해 ScoreRecord에 association하고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 설계는 새로운 그래프의 추가, 점수 정보 이외의 정보 추가 등 새로운 요구사항을 반영해야 할 때 OCP를 위반하는 문제점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;OCP위반을 막기 위해서는 ScoreRecord가 나머지 클래스를 association하지 않아야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이 경우 점수 정보가 변경되었을 때 나머지 클래스에서 실시간 갱신이 힘들다는 문제가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 해결하기 위해 나머지 클래스에서 ScoreRecord클래스를 주기적으로 Polling하면 되지만, 이 경우 불필요한 recource를 낭비하게 되어 성능이 떨어지는 문제가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이런 총체적인 문제점을 해결하기 위해서는 &lt;strong&gt;Observer Pattern&lt;&#x2F;strong&gt;을 적용하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 UML은 Observer Pattern을 적용한 UML이다.
&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;observer_scorerecord.png&quot; alt=&quot;ScoreRecord with Observer Pattern&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;구현은 항상 바뀔 수 있으니 인터페이스에 의존해야 한다.(DIP)
&lt;ul&gt;
&lt;li&gt;DIP : Dependency Inversion Principle&lt;&#x2F;li&gt;
&lt;li&gt;ConcreteSubject가 Observer를 직접 참조하면 ConcreteSubject가 여러 개일 경우 결국 duplicated code smell이 발생한다. &lt;em&gt;Subject&lt;&#x2F;em&gt; 클래스 생성을 통한 인터페이스 의존을 통해 이런 문제를 해결할 수 있다.
&lt;ul&gt;
&lt;li&gt;기존 코드에서는 list, array, vector로 객체 리스트를 관리했지만, 인터페이스 의존을 할 경우 set등의 non-ordered 자료구조를 사용하여 관리가 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이런 식의 인터페이스 의존을 통해 Shotgun Surgery smell을 없엘 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ConcreteSubject가 ConcreteObserver를 직접 association하여 OCP를 위반하는 것이 문제였던 초기 상황과 달리, Subject가 Observer를 association하고 있는 상황이므로 OCP를 위반하지 않으면서 성능 문제도 없다.
&lt;ul&gt;
&lt;li&gt;ScoreRecord(ConcreteSubject)에서 Notify()호출 -&amp;gt; Observer의 Update()호출 -&amp;gt; 그래프 및 데이터시트 갱신&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-03-29 수업정리</title>
		<published>2023-03-29T00:00:00+00:00</published>
		<updated>2023-03-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-3-29-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-3-29-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Thread &amp;amp; Multithreaded Process&lt;&#x2F;li&gt;
&lt;li&gt;Multicore Programming&lt;&#x2F;li&gt;
&lt;li&gt;Process vs Thread&lt;&#x2F;li&gt;
&lt;li&gt;Multithreading Models&lt;&#x2F;li&gt;
&lt;li&gt;Virtualization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thread&quot;&gt;Thread&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;thread-1&quot;&gt;Thread&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Software적으로 병렬화를 제공하는 방법이다.&lt;&#x2F;li&gt;
&lt;li&gt;CPU Utilization의 기본 단위이다.
&lt;ul&gt;
&lt;li&gt;Single Processer환경에서도 Thread를 이용하면 Concurrency를 보장하여 한 번에 여러 동작을 하는 것처럼 보이게 할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Thread ID, Program Counter, Register set, Stack으로 구성된다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스와 비슷하지만, 동일 프로세스의 thread간에는 일부 자원의 공유가 가능하다.
&lt;ul&gt;
&lt;li&gt;Code section, data section, other operating system resources&lt;&#x2F;li&gt;
&lt;li&gt;메모리 절약(운영체제의 역할) 등 이점이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;threadreul-sahyonhahye-heoneun-ijjeo&quot;&gt;Thread를 사용하여 얻는 이점&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Responsiveness - 반응이 빠르다.
&lt;ul&gt;
&lt;li&gt;프로세스의 일부가 blocking되는 경우, thread가 없다면 프로세스 전체가 멈춰야 한다. 하지만  thread를 활용한다면 하나의 프로세스 내에서 동시성을 제공할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Resource Sharing
&lt;ul&gt;
&lt;li&gt;자원을 공유함으로써 메모리 관점에서도 이득을 볼 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Economy
&lt;ul&gt;
&lt;li&gt;Thread를 사용함으로써 context switching time을 최소화할 수 있다.
&lt;ul&gt;
&lt;li&gt;context switching과정에서 thread간 공유하고 있는 자원이 있기 때문에 context switching에 소모되는 시간을 줄일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Scalability
&lt;ul&gt;
&lt;li&gt;병렬화를 통해 확장성을 증가시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;multiprocess architecture에서 hardward적인 병렬화 뿐만 아니라 Thread를 통한 소프트웨어적인 병렬화 까지 더해 병렬화의 효과를 극대화할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;multithreaded-process&quot;&gt;Multithreaded Process&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 그림은 single thread process를 나타낸 것이다. CPU는 한 번에 하나의 동작만 수행한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;single_threaded_process.png&quot; alt=&quot;Single Thread Process&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 multithreaded process를 나타낸 것이다. &lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;multithreaded_process.png&quot; alt=&quot;Multithreaded Process&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Multithreaded Process는 같은 프로세스 내에서 code, data, files를 공유한다.&lt;&#x2F;li&gt;
&lt;li&gt;register set, stack은 각 thread가 독립적으로 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 multithreaded process로 구성함으로써, single processor내에서도 concurrency를 보장할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;또한 code, data, files에 대한 공유를 통해 메모리 자원을 아낄 수 있으며, context switching에 소모되는 시간을 줄일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;multicore-programming&quot;&gt;Multicore Programming&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;한 번에 여러 개의 동작(task)를 동시에 수행하는 것을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;multithreaded구성을 통해 Single Processor에서도 concurrency가 보장된다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 single core환경에서는 아래와 같이 겉보기에는 동시에 task를 수행하는 것처럼 보여질 수 있으나, 물리적으로는 순서는 뒤바뀌더라도 한 번에 하나의 thread만 실행 가능하다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;single_core.png&quot; alt=&quot;Single Core&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;parallelism&quot;&gt;Parallelism&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;parallelism(병렬화)는 system이 한 개 이상의 task를 동시에 처리하는 것을 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;multicore system에서 parallel execution은 아래와 같이 이루어진다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;multicore.png&quot; alt=&quot;Multi Process&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이런 식의 multiprocessor system에서는 아래의 issue에 대해 생각해 봐야 한다.
&lt;ul&gt;
&lt;li&gt;Dividing activities - 역할 분담&lt;&#x2F;li&gt;
&lt;li&gt;Balance - 어떻게 thread를 분배할지 고려&lt;&#x2F;li&gt;
&lt;li&gt;Data splitting - 데이터 관점에서의 활용&lt;&#x2F;li&gt;
&lt;li&gt;Data dependency - 데이터 의존성 고려&lt;&#x2F;li&gt;
&lt;li&gt;Testing &amp;amp; Debugging을 통한 실제 검증&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Parallelism은 아래와 같이 두개의 범주로 나눌 수 있다.
&lt;ul&gt;
&lt;li&gt;Data parallelism(같은 동작을 수행할 경우)
&lt;ul&gt;
&lt;li&gt;멀티코어 상에서 data dependency를 고려해서 각 프로세스에서 같은 operation을 수행하지만 서로 다른 데이터를 처리하도록 병렬화를 구성할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Task parallelism(다른 동작을 수행할 경우)
&lt;ul&gt;
&lt;li&gt;각 thread가 unique operation을 수행하도록 서로 다른 task를 각 processor에서 실행하도록 병렬화를 구성할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;amdahl-s-law&quot;&gt;Amdahl&#x27;s Law&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 상에서 병렬화가 불가능한 부분의 비율을 S라고 했을 때 성능 향상을 가늠할 수 있다.
$$speedup \leq \frac{1}{S+\frac{(1-S)}{N}}$$&lt;&#x2F;li&gt;
&lt;li&gt;암달의 법칙에 의하면, 멀티코어 환경에서 실행하는 어떤 프로그램의 75%가 병렬화 가능할 경우 최대 성능 향상치는 아래와 같다.$$speedup \leq \frac{1}{0.25+\frac{0.75}{2}} = 1.6$$
&lt;ul&gt;
&lt;li&gt;즉, 다른 변수가 없을 떄, single core -&amp;gt; dual core가 되면 성능 향상치는 1.6배이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;process-vs-thread&quot;&gt;Process vs Thread&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Process 는 기본적으로 independent하여 서로 자원을 공유하지 않는다. 반면 Thread는 code, data영역을 공유하고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Process switching은 OS와의 상호작용을 필요로 한다. 반면 ,Thread switching은 OS와의 상호작용 없이 일어날 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;같은 코드를 실행하는 프로세스일 경우에도 각각의 프로세스는 독립적인 메모리 공간과 파일 자원을 가진다. 반면, thread는 open files 및 자식 프로세스에 관해 공통 자원을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;thread를 사용하지 않는 multi process 실행은 thread를 사용하는 경우보다 더 많은 자원을 소모한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;multithreading-models&quot;&gt;Multithreading Models&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;user-thread-vs-kernel-thread&quot;&gt;User Thread vs Kernel Thread&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;thread는 User Thread와 Kernel Thread가 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;User Thread는 user level의 thread library에서 관리되는 thread이다.
&lt;ul&gt;
&lt;li&gt;POSIX Pthread(POSIX), WIN32 thread(Windows), Java Thread(JVM)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Kernel Thread는 operating system에서 직접 관리되고 지원하는 thread이다.
&lt;ul&gt;
&lt;li&gt;Windows XP&#x2F;2000, Solaris, Linux, Mac OS X&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;User level thread만 가지고는 Concurrency를 보장할 수 없다. 자원에 대한 접근을 위해서는 Kernel영역에서 자원을 해야 한다. Kernel level에서 thread를 지원하지 않는다면, User level thread에서 요청을 하더라도 실제 자원에 대한 접근은 한번에 하나밖에 처리하지 못한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;biggy&quot;&gt;비교&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;User Level Thread는 생성 및 관리가 Kernel Level Thread에 비해 상대적으로 빠르다.&lt;&#x2F;li&gt;
&lt;li&gt;User Level Thread는 Thread Library에 의해 구현 및 지원되지만, Kernel Level Thread는 Operating System에서 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;User Level Thread Operating System위에서 동작하기 때문에 어떤 운영 체제 위에서도 동작한다. 반면 Kernel Level Thread는 각 Operating System에서 지원해 줘야 동작 가능하다.(OS 종속적이다.)&lt;&#x2F;li&gt;
&lt;li&gt;User Level Thread만으로는 Multithreaded application은 multiprocessing의 효과를 누릴 수 없다. 이를 위해서는 결국 Kernel Level Thread를 지원해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;many-to-one-model&quot;&gt;Many-to-One Model&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;many_to_one.png&quot; alt=&quot;Many-to-One Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User Tread는 여러 개가 존재하지만, Kernel Thread는 하나만 존재하는 모델&lt;&#x2F;li&gt;
&lt;li&gt;User Level에서의 병렬화는 가능하지만, Kernel 요청을 처리할 수 있는 Thread가 하나밖에 없어서 병목 현상이 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;blocking system call발생 시 모든 프로세스가 block되는 구조이므로 병렬화 자체가 불가능하다.
&lt;ul&gt;
&lt;li&gt;multiprocessing의 장점을 전혀 살릴 수 없다. 효율성이 굉장히 떨어진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;성능은 떨어지지만, Kernel 생성 과정에서의 오버헤드가 낮다는 특징이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Solaris Green Threads, GNU Portable Threads가 이 모델을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;one-to-one-model&quot;&gt;One-to-One Model&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;one_to_one.png&quot; alt=&quot;One-to-One Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User Thread와 Kernel Thread가 1:1로 매핑되는 모델&lt;&#x2F;li&gt;
&lt;li&gt;Kernel 자원을 과도하게 많이 사용한다는 단점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Kernel자체의 자원은 제한적일 수 밖에 없으므로, thread생성에 개수 상한이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Windows, Linux, Solaris 9~ 에서 이러한 모델을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;그렇게 바람직한 모델은 아니다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;many-to-many-model&quot;&gt;Many-to-Many Model&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;many_to_many.png&quot; alt=&quot;Many-to-Many Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User Thread의 수에 대헤 충분한 Kernel Thread가 존재하는 형태
&lt;ul&gt;
&lt;li&gt;User Thread : n, Kernel Thread : m 일때, n &amp;gt; m이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Solaris 9이전 버전, Windows의 ThreadFiber package가 이런 모델이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;two-level-model&quot;&gt;Two-Level Model&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;two-level.png&quot; alt=&quot;Two-level Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Many-to-Many Model의 일종이다.&lt;&#x2F;li&gt;
&lt;li&gt;independent하게 동작해야 할 경우에 1:1model구조로 동작하고, many-to-many model구조 역시 채택했다. many-to-many의 문제점이기도 한 오버헤드 문제 때문에, 생성 가능한 Kernel Thread의 개수는 제한된다.&lt;&#x2F;li&gt;
&lt;li&gt;보통 서버 급의 컴퓨터에 사용되는 모델이다.&lt;&#x2F;li&gt;
&lt;li&gt;IRIX, HP-UX, Tru64 UNIX, Solaris 8이전 모델에 적용된 모델이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;thread-ssaensseon-bbanssi&quot;&gt;Thread 생성 방식&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Thread Pools : 여러 개의 thread를 생성해 놓고 pool에 저장하는 방법
&lt;ul&gt;
&lt;li&gt;필요할 때마다 생성하면 오버헤드가 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;여러 개의 thread를 미리 생성해 놓고 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;OpenMP : Shared Memory 환경에서 병렬 프로그램을 제공하기 위해 사용하는 thread 생성 방법&lt;&#x2F;li&gt;
&lt;li&gt;Grand Central Dispatch : Mac OS X, iOS등에서 사용하는 thread 생성 방법&lt;&#x2F;li&gt;
&lt;li&gt;앞서 설명한 3가지 생성 방식 이외에도 수많은 thread 생성 방법이 존재한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;virtualization&quot;&gt;Virtualization&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;User Level에서는 웹 브라우저, 게임, 음악 등 수많은 process가 동작한다. 이 모든 process는 system call을 통해 OS에 CPU, Memory, I&#x2F;O등 hardware resources를 요구한다.&lt;&#x2F;li&gt;
&lt;li&gt;하드웨어 자원은 제한되어 있다. 하지만 Virtualization(병렬화)를 통해 소프트웨어 관점에서는 마치 동시에 모든 동작을 처리하는 것처럼 보이게 할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The Crux of Problem : &lt;strong&gt;How&lt;&#x2F;strong&gt; to Provide the Illusion of Many CPU&#x27;s?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;interleaving-multiple-process&quot;&gt;Interleaving Multiple Process&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;interleaving_multiple_process.png&quot; alt=&quot;Interleaving Multiple Process&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CPU가 각 thread를 순서대로 실행하는 방법이다.&lt;&#x2F;li&gt;
&lt;li&gt;성능이 떨어질 수밖에 없으며, 사용자 역시 프로그램이 동시에 실행되고 있다는 느낌을 받을 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;CPU에서 Time sharing 이 일어나고 있다고 말할 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;virtualizing-the-cpu&quot;&gt;Virtualizing the CPU&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;virtualizing_cpu.png&quot; alt=&quot;Virtualizing the CPU&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;OS를 통해 각각의 Process가 각자의 CPU를 가지고 있는 것처럼 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;실제 물리적인 자원은 하나지만, 마치 각 프로세스가 동시에 실행되는 것처럼 보이게 한다.&lt;&#x2F;li&gt;
&lt;li&gt;제어 권한은 OS에서 할당하기 때문에 A, B가 순서대로 실행되지 않는다.
&lt;ul&gt;
&lt;li&gt;A, A, B, A, B, B, B, B, A, B, A, B, A, A ... 이런 식으로 두서 없이(?) 동작하는 것처럼 보인다.&lt;&#x2F;li&gt;
&lt;li&gt;당시의 프로세스 상황, 메모리 상황 등 여러 요인에 의해 결정된다.&lt;&#x2F;li&gt;
&lt;li&gt;실행 시마다 실행 순서가 달라진다.(상황이 변하기 때문)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;OS creates the &lt;strong&gt;illusion&lt;&#x2F;strong&gt; that each process has its own CPU(and memory)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;memory-virtualization&quot;&gt;Memory Virtualization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU Virtualization과 마찬가지로, 실제 하드웨어 상의 메모리 공간은 같지만, OS가 virtualization을 통해 각 프로세스가 각각의 메모리 주소 공간을 가지는 것처럼 보이게 한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 프로그램을 여러 개 동시에 실행시켜 보면(.&#x2F;mem &amp;amp;; .&#x2F;mem &amp;amp;) 서로 다른 프로세스에서 같은 물리적 메모리 공간을 사용하는 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 logical address 가 physical address로 대응되기 때문에 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;common.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[]) 
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;*p = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span&gt;(sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt;(p != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) address of p : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%08x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getpid&lt;&#x2F;span&gt;&lt;span&gt;(), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt;)p);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	*p = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Spin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		*p = *p + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) p: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getpid&lt;&#x2F;span&gt;&lt;span&gt;(), *p);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-28 수업정리</title>
		<published>2023-03-28T00:00:00+00:00</published>
		<updated>2023-03-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-3-28-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-3-28-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;review&lt;&#x2F;li&gt;
&lt;li&gt;Syntax &amp;amp; Grammar&lt;&#x2F;li&gt;
&lt;li&gt;Grammar Example&lt;&#x2F;li&gt;
&lt;li&gt;Ambiguity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review&quot;&gt;review&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;프로그래밍언어론 3.28 수업정리에서 이어진다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Basic은 1980년대의 Micro PC, GUI 등의 환경 및 GW Basic, Apple Basic을 거쳐 Visual Basic이 되었다.&lt;&#x2F;li&gt;
&lt;li&gt;SNOBOL(문자열 처리 언어) 는 Perl에 영향을 주었다.&lt;&#x2F;li&gt;
&lt;li&gt;LISP(심볼 처리), APL(행렬, 벡터 연산)은 이후 Haskell, ML, Scala, clojure등 함수형 언어에 영향을 주었다.&lt;&#x2F;li&gt;
&lt;li&gt;IAL(ALGOL)은 다른 언어들과는 달리(앞서 설명한 프로그래밍 언어들은 프로그래머와 컴퓨터 간의 의사소통 목적으로 설계되었다.) 프로그래머 간의 소통을 위한 언어로 설계되었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;syntax-grammar&quot;&gt;Syntax &amp;amp; Grammar&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍 언어는 언어의 명세서(설계도)를 필요로 한다.&lt;&#x2F;li&gt;
&lt;li&gt;언어의 명세는 Syntax와 Semantics로 나타낸다.
&lt;ul&gt;
&lt;li&gt;Syntax는 Grammar(거의 표준)를 통해 표현한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Syntax는 언어의 외적인 형태를 뜻한다.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Semantics는 따로 표준이 정해져 있지 않으며, 자연어를 사용하여 표현한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Semantics는 프로그램의 의미를 뜻한다.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Language : 문장의 집합&lt;&#x2F;li&gt;
&lt;li&gt;Sentence : 문장&lt;&#x2F;li&gt;
&lt;li&gt;Token : 토큰(단어의 부류)&lt;&#x2F;li&gt;
&lt;li&gt;Lexeme : 단어, 의미의 최소 단위&lt;&#x2F;li&gt;
&lt;li&gt;아래 C언어 코드에서 lexeme은 16개, token은 12개, 문장 1개를 확인할 수 있다.
&lt;ul&gt;
&lt;li&gt;lexeme : int, main, (, ), {, return, printf, (, &amp;quot;Hello?\n&amp;quot;, ), ?, 0, -1, ;, }&lt;&#x2F;li&gt;
&lt;li&gt;token : [int], [main, printf], [(], [)], [{], [return], [&amp;quot;Hello?\n&amp;quot;], [?], [0, -1], [:], [;], [}] &lt;&#x2F;li&gt;
&lt;li&gt;sentence : 전체 코드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;syntax-pyogibbeo&quot;&gt;Syntax 표기법&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Context-Free Grammar(CFG)
&lt;ul&gt;
&lt;li&gt;춈스키에 의해 고안된 문법 표기법&lt;&#x2F;li&gt;
&lt;li&gt;(V, T, S, P)로 표기한다. (또는 (N, T, P, S))
&lt;ul&gt;
&lt;li&gt;V : a set of variables(nonterminals)&lt;&#x2F;li&gt;
&lt;li&gt;T : a set of Terminals&lt;&#x2F;li&gt;
&lt;li&gt;S : a designated variable
&lt;ul&gt;
&lt;li&gt;S $\in$ V 이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;P : a set of rules&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Backus-Naur Form(BNF)
&lt;ul&gt;
&lt;li&gt;ALGOL58, 60의 개발에 참여한 John Backus, Peter Naur가 동시에 고안했다.&lt;&#x2F;li&gt;
&lt;li&gt;nonterminals에 대해 괄호를 사용하고, terminal기호에 대해 인용 기호를 사용했다.&lt;&#x2F;li&gt;
&lt;li&gt;이 외에도 몇몇 기호를 추가하였다.&lt;&#x2F;li&gt;
&lt;li&gt;CFG와 동치이다.&lt;&#x2F;li&gt;
&lt;li&gt;텍스트 표기가 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cfg&quot;&gt;CFG&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;CFG는 rules의 집합으로 표현 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;rule의 좌항은 nonterminal, 우항은 terminal 또는 nonterminal이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Pascal while문의 CFG 표기이다.
&lt;ul&gt;
&lt;li&gt;&amp;lt;while_stmt&amp;gt; -&amp;gt; while &amp;lt;bool_expr&amp;gt; do &amp;lt;stmt&amp;gt;
&lt;ul&gt;
&lt;li&gt;좌항은 우항으로 대체 가능하다는 rule이다.&lt;&#x2F;li&gt;
&lt;li&gt;좌항의 &amp;lt;while_stmt&amp;gt; 은 변수(V)이다.&lt;&#x2F;li&gt;
&lt;li&gt;우항의 while, do는 상수(T) 이다.&lt;&#x2F;li&gt;
&lt;li&gt;우항의 &amp;lt;bool_expr&amp;gt;, &amp;lt;stmt&amp;gt;는 변수이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;C의 while의 경우 아래와 같다.
&lt;ul&gt;
&lt;li&gt;&amp;lt;while&amp;gt; -&amp;gt; while (&amp;lt;조건식&amp;gt;) &amp;lt;문장&amp;gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Python의 while의 경우 아래와 같다.
&lt;ul&gt;
&lt;li&gt;&amp;lt;while&amp;gt; -&amp;gt; while &amp;lt;조건식&amp;gt; : &amp;lt;문장&amp;gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;grammar-example&quot;&gt;Grammar Example&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;아래 CFG와 BNF는 문법 표기의 예시이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;두 표현법은 서로 같은 문법을 나타내고 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;총 10개의 rules를 확인할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;CFG&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;prog&amp;gt;        -&amp;gt; begin &amp;lt;stmt_list&amp;gt; end&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;stmt_list&amp;gt;  -&amp;gt; &amp;lt;stmt&amp;gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;  	 |  &amp;lt;stmt&amp;gt;;&amp;lt;stmt_list&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;stmt&amp;gt;        -&amp;gt; &amp;lt;var&amp;gt;:=&amp;lt;expr&amp;gt;&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;var&amp;gt;	        -&amp;gt; A | B | C&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;expr&amp;gt;        -&amp;gt; &amp;lt;var&amp;gt;+&amp;lt;var&amp;gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;  	 | &amp;lt;var&amp;gt;-&amp;lt;var&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  	 | &amp;lt;var&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;BNF&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;prog&amp;gt;       ::= begin &amp;lt;stmt_list&amp;gt; end&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;stmt_list&amp;gt; ::= &amp;lt;stmt&amp;gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;  	  | &amp;lt;stmt&amp;gt;&amp;#39;;&amp;#39;&amp;lt;stmt_list&amp;gt; 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;stmt&amp;gt;        ::= &amp;lt;var&amp;gt;&#x27;::=&#x27;&amp;lt;expr&amp;gt;&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;var&amp;gt;          ::= &#x27;A&#x27; | &#x27;B&#x27; | &#x27;C&#x27;&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;expr&amp;gt;        ::= &amp;lt;var&amp;gt;&#x27;+&#x27;&amp;lt;var&amp;gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;        | &amp;lt;var&amp;gt;&amp;#39;-&amp;#39;&amp;lt;var&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        | &amp;lt;var&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;derivation-yudo&quot;&gt;Derivation(유도)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어떠한 sentence가 well formed인지 확인해 보자.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;위의 Grammar Example에 대해서 Sentence : begin A ::= B end 는 아래와 같이 derivation된다.
&amp;lt;prog&amp;gt;&lt;&#x2F;p&gt;
&lt;p&gt;=&amp;gt; begin &amp;lt;stmt_list&amp;gt; end&lt;&#x2F;p&gt;
&lt;p&gt;=&amp;gt; begin &amp;lt;stmt&amp;gt; end&lt;&#x2F;p&gt;
&lt;p&gt;=&amp;gt; begin &amp;lt;var&amp;gt; end&lt;&#x2F;p&gt;
&lt;p&gt;=&amp;gt; begin A ::= &amp;lt;expr&amp;gt; end&lt;&#x2F;p&gt;
&lt;p&gt;=&amp;gt; begin A ::= &amp;lt;var&amp;gt; end&lt;&#x2F;p&gt;
&lt;p&gt;=&amp;gt; begin A ::= B end&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;따라서 begin A ::= B end 라는 sentence는 유효한 문장이라고 결론지을 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;parse-tree&quot;&gt;Parse Tree&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;parse tree는 derivation을 계층적, 시각적으로 표기한 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;변수들 중 어떤 변수를 먼저 유도했는지에 대한 순서는 무시한다.&lt;&#x2F;li&gt;
&lt;li&gt;바로 위의 derivation에서 확인한 sentence의 parse tree는 아래와 같다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;parsetree01.png&quot; alt=&quot;parse tree1&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ambiguity-mohosseon&quot;&gt;Ambiguity(모호성)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grammar의 속성이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;같은 문법 규칙을 따른다고 하더라도 어떤 Variable에 대해 먼저 derivation을 진행했는지에 따라서 여러 가지 parse tree가 생성될 수 있다. 이 경우 &amp;quot;grammar is ambiguous&amp;quot; 이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래와 같은 문법에서 Sentence : 2 + 3 * 5를 derivation 해 보자.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;expr&amp;gt; -&amp;gt; &amp;lt;expr&amp;gt;+&amp;lt;expr&amp;gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;      |  &amp;lt;expr&amp;gt;*&amp;lt;expr&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      | (&amp;lt;expr&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      | &amp;lt;num&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;num&amp;gt; -&amp;gt; 1 | 2 | 3 | 4 | 5&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;주어진 sentential form은 &amp;lt;expr&amp;gt;+&amp;lt;expr&amp;gt;*&amp;lt;expr&amp;gt; 이다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이러한 sentential form에 대한 parse tree는 아래와 같이 두 가지 경우가 존재한다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;ambiguous_parse_tree.png&quot; alt=&quot;ambiguous parse tree&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;parse tree가 2개 존재하므로 본 grammar는 ambiguous하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;removing-the-ambiguity&quot;&gt;Removing the Ambiguity&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;결합방향을 명시한다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;term&amp;gt; 이라는 nonterminal을 추가하여 연산자가 항상 &amp;lt;term&amp;gt;의 특정 위치에서 생성되도록 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래는 연산자가 항상 &amp;lt;term&amp;gt;에 좌결합하도록 grammar를 수정한 것이다.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;expr&amp;gt; -&amp;gt; &amp;lt;expr&amp;gt;+&amp;lt;term&amp;gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;    | &amp;lt;expr&amp;gt;*&amp;lt;term&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    | &amp;lt;term&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;term&amp;gt; -&amp;gt; (&amp;lt;expr&amp;gt;)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;    | &amp;lt;num&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;num&amp;gt; -&amp;gt; 1 | 2 | 3 | 4 | 5&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래는 문법을 수정한 후의 Statement : 2+3*5에 대한 parse tree 중 하나이다. 
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;left_association.png&quot; alt=&quot;parse tree 02&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;여전히 파스 트리는 여러 개가 나올 수 있으므로 ambiguous 하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;생성 규칙 수정을 통해 선행 연산을 설정한다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;fact&amp;gt;라는 nonterminal 기호를 추가하여 선행 연산을 설정한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;+연산은 &amp;lt;expr&amp;gt;에 의해서만 생성 가능하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;*연산은 &amp;lt;term&amp;gt;에 의해서만 생성 가능하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래는 수정한 grammar이다.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;expr&amp;gt; -&amp;gt; &amp;lt;expr&amp;gt;+&amp;lt;term&amp;gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;    | &amp;lt;term&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;expr&amp;gt; -&amp;gt; &amp;lt;term&amp;gt;*&amp;lt;fact&amp;gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;    | &amp;lt;fact&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;fact&amp;gt; -&amp;gt; (&amp;lt;expr&amp;gt;)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;    | &amp;lt;num&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;lt;num&amp;gt; -&amp;gt; 1 | 2 | 3 | 4 | 5&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래는 문법을 수정한 후의 Statement : 2+3*5에 대한 parse tree이다. 
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;unambiguous_parse_tree.png&quot; alt=&quot;parse tree 3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이제는 단 하나의 parse tree만 생성되므로 본 문법은 unambiguous grammar라고 말할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;참고로 이러한 방법을 통해 ambiguity를 제거하는 것을 &lt;code&gt;precedence cascading&lt;&#x2F;code&gt;이라고 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-03-27 수업정리</title>
		<published>2023-03-27T00:00:00+00:00</published>
		<updated>2023-03-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-3-27-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-3-27-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Divide &amp;amp; Conquer - Matrix multiplication&lt;&#x2F;li&gt;
&lt;li&gt;Strassen&#x27;s trick &amp;amp; algorithm&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Programming&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;divide-conquer-matrix-multiplication&quot;&gt;Divide &amp;amp; Conquer - Matrix multiplication&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;N*N 행렬 A, B의 곱셈에 Divide &amp;amp; Conquer를 적용하면 아래와 같다.$$C = A\times B,\ \begin{bmatrix}C_{11}&amp;amp;C_{12}\C_{21}&amp;amp;C_{22}\ \end{bmatrix} = \begin{bmatrix}A_{11}&amp;amp;A_{12}\A_{21}&amp;amp;A_{22}\ \end{bmatrix} \times \begin{bmatrix}B_{11}&amp;amp;B_{12}\B_{21}&amp;amp;B_{22}\ \end{bmatrix},\ \ \  \begin{matrix}C_{11} = (A_{11} \times B_{11}) + (A_{12} \times B_{21})\ C_{12} = (A_{11} \times B_{12}) + (A_{12} \times B_{22})\ C_{21} = (A_{21} \times B_{11}) + (A_{22} \times B_{21})\ C_{22} = (A_{21} \times B_{12}) + (A_{22} \times B_{22})\ \end{matrix}$$&lt;&#x2F;li&gt;
&lt;li&gt;이 알고리즘에 대한 시간복잡도를 계산하면 아래와 같다.$$T(n) = 8T(n&#x2F;2) + \Theta(n^2) =&amp;gt; T(n) = \Theta(n^3)$$
&lt;ul&gt;
&lt;li&gt;이렇게 되는 이유$$T(n) = 8T(n&#x2F;2) + \Theta(n^2) =&amp;gt; T(n) = \Theta(n^{log_28}) = \Theta(n^3)$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 행렬 곱셈을 구현한 C++코드이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; implement Matrix Multiplication Algorithm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;strassen-s-algorithm&quot;&gt;Strassen&#x27;s Algorithm&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;위의 행렬 곱을 구하는 알고리즘과 Divide 과정은 동일하다.&lt;&#x2F;li&gt;
&lt;li&gt;Conquer 과정에서 중복되는 연산을 따로 저장한 뒤 재사용했다.$$\begin{matrix}P_1 \leftarrow A_{11} \times (B_{12}-B_{22})\ \ \ \ \ \ \ \ \ \ \ \ \ \  \ P_2 \leftarrow (A_{11}+A_{12}) \times B_{22}\ \ \ \ \ \ \ \ \ \ \ \ \ \  \ P_3 \leftarrow (A_{21}+A_{22}) \times B_{11}\ \ \ \ \ \ \ \ \ \ \ \ \ \  \ P_4 \leftarrow A_{22} \times (B_{21}-B_{11})\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ P_5 \leftarrow (A_{11}-A_{22}) \times (B_{11}+B_{22}) \ P_6 \leftarrow (A_{12}-A_{22}) \times (B_{21}+B_{22}) \ P_7 \leftarrow (A_{11}-A_{21}) \times (B_{11}+B_{12}) \ \end{matrix}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \begin{matrix} C_{11} = P_5 + P_4-P_2+P_6 \ C_{12} = P_1 + P_2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ C_{21} = P_3 + P_4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  \ C_{22} = P_1 + P_5 - P_3 - P_7 \end{matrix}$$&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 행렬의 곱셈을 연산했을 경우 시간복잡도를 계산하면 아래와 같다.$$T(n) = 7T(n&#x2F;2) + \Theta(n^2) =&amp;gt; T(n) = \Theta(n^{log_27})$$&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Strassen&#x27;s Algorithm으로 행렬 곱셈을 연산하는 것을 구현한 C++코드이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; implement Matrix Multiplication with Strassen&amp;#39;s Algorithm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;dynamic-programming&quot;&gt;Dynamic programming&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic Programming은 Divide &amp;amp; Conquer과 마찬가지로 main problem &amp;lt;-&amp;gt; Sub Problem의 점화식을 찾아 풀이에 이용한다는 공통점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Divide &amp;amp; Conquer에서는 recursion을 활용하여 Top-Down접근 방식으로 큰 문제를 작은 문제들로 쪼개어 풀 수 있었다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 Dynamic Programming은 Divide &amp;amp; Conquer방법과 달리, 이전 연산 단계의 결과가 다음 단계의 연산에 사용되는 Bottom-Up 방식의 문제 풀이이다.&lt;&#x2F;li&gt;
&lt;li&gt;이전 단계의 연산(쉬운 문제)값을 저장해 두었다가 다음 단계의 연산(어려운 문제)에 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic Programming을 적용하기 위해서는 중간 결과를 저장하기 위한 배열 컨테이너와, 각 단계의 알고리즘을 표현하는 Recursive Equation이 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Computational_complexity_of_matrix_multiplication&quot;&gt;Wikipedia - Matrix Multiplication&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-03-27 수업정리</title>
		<published>2023-03-27T00:00:00+00:00</published>
		<updated>2023-03-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-3-27-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-3-27-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;IPC&lt;&#x2F;li&gt;
&lt;li&gt;IPC - Shared Memory&lt;&#x2F;li&gt;
&lt;li&gt;IPC - Message Passing&lt;&#x2F;li&gt;
&lt;li&gt;Examples of IPC Systems&lt;&#x2F;li&gt;
&lt;li&gt;Communications in Client-Server Systems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ipc&quot;&gt;IPC&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;ipc-inter-process-communication&quot;&gt;IPC(Inter Process communication)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;시스템에 속한 프로세스들은 independent일수도 있고, cooperating일수도 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Reason for Cooperating Process
&lt;ul&gt;
&lt;li&gt;정보의 공유&lt;&#x2F;li&gt;
&lt;li&gt;계산속도 향상&lt;&#x2F;li&gt;
&lt;li&gt;모듈화&lt;&#x2F;li&gt;
&lt;li&gt;편의성&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;cooperating프로세스들은 서로가 서로에게 영향을 끼친다.&lt;&#x2F;li&gt;
&lt;li&gt;IPC를 구현하는 방법으로는 아래와 같은 방법이 있다.
&lt;ul&gt;
&lt;li&gt;Shared Memory를 사용한 IPC구현
&lt;ul&gt;
&lt;li&gt;하나의 시스템을 사용중이므로 이러한 구조가 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;공유 메모리에 Process A, Process B모두 접근 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 Process A, Process B는 모두 User Mode이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Message passing을 통한 IPC구현
&lt;ul&gt;
&lt;li&gt;kernel영역에 속한 message queue를 사용해서 message를 전달하는 방식이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;producer-consumer-problem&quot;&gt;Producer-Consumer Problem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;상호 작용하는 프로세스의 패러다임이다.&lt;&#x2F;li&gt;
&lt;li&gt;정보(데이터)를 생산하는 프로세스, 정보(데이터)를 소비(사용)하는 프로세스로 나누어 생각한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ipc-shared-memory&quot;&gt;IPC - Shared Memory&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;shared_memory.png&quot; alt=&quot;Shared Memory&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Producer Process와 Consumer Process간의 공유 메모리를 사용하여 데이터를 전달한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 공유 메모리 내부에는 Buffer가 존재하는데, 이 버퍼는 unbounded혹은 bounded이다.
&lt;ul&gt;
&lt;li&gt;unbounded-buffer : 버퍼의 크기가 무제한(현실에서는 불가능)&lt;&#x2F;li&gt;
&lt;li&gt;bounded-buffer : 유한한 크기의 버퍼 사용&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Shared Memory방식의 IPC는 User Mode의 두 프로세스 사이에서만 일어난다.(Not the Operating Systems)&lt;&#x2F;li&gt;
&lt;li&gt;이러한 메커니즘의 구현에 있어 동기화 issue가 존재한다.
&lt;ul&gt;
&lt;li&gt;producer process가 데이터 생성을 하지 않았는데 consumer process가 접근하는 경우 등&lt;&#x2F;li&gt;
&lt;li&gt;위 동기화 문제를 해결하더라도 producer와 consumer중 &amp;quot;누가 먼저 시작할 것인가?&amp;quot; 라는 issue가 남아있다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 issue는 instruction 단위 동기화를 필요로 하며, 아래는 Shared data, Producer Process, Consumer process에서 이러한 동기화 문제를 반영한 코드의 예시이다.&lt;&#x2F;li&gt;
&lt;li&gt;Shared data&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;BUFFER_SIZE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;} item;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;item buffer[BUFFER_SIZE];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 데이터 삽입 인덱스
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; in = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 데이터 출력 인덱스
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Producer Process&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;item nextProduced;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 버퍼가 가득 차 있는 상태 -&amp;gt; 대기
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(((in+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) % BUFFER_SIZE) == out) ;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 버퍼가 가득 차 있지 않다면 다음 데이터 버퍼에 적재
&lt;&#x2F;span&gt;&lt;span&gt;	buffer[in] = nextProduced;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 버퍼 삽입 이후 버퍼 삽입 인덱스를 증가시킨다.
&lt;&#x2F;span&gt;&lt;span&gt;	in = (in+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) % BUFFER_SIZE;	
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Consumer Process&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span&gt;item nextConsumed;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 버퍼가 비어 있는 상태 -&amp;gt; 대기
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(in == out) ;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 버퍼가 비어 있지 않다면 출력 버퍼를 읽어온다.
&lt;&#x2F;span&gt;&lt;span&gt;	nextConsumed = buffer[out];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 출력 이후 버퍼 출력 인덱스를 증가시킨다.
&lt;&#x2F;span&gt;&lt;span&gt;	out = (out+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) % BUFFER_SIZE;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ipc-message-passing&quot;&gt;IPC - Message Passing&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;message_passing.png&quot; alt=&quot;Message Passing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Message를 주고 받는 식으로 두 프로세스 간의 공유 자원 없이 이루어진다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 kernel이 중계자 역할을 하여 프로세스 간 메시지를 전달한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;message_passing_2.png&quot; alt=&quot;Message Passing 2&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이렇듯 Message Passing을 위해서는 두 개의 method를 제공해야 한다.
&lt;ul&gt;
&lt;li&gt;send(msg)&lt;&#x2F;li&gt;
&lt;li&gt;receive(msg)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 P, 프로세스 Q간의 Message Passing 방식의 통신을 위해서는
&lt;ol&gt;
&lt;li&gt;P와 Q간의 communication link를 활성화 해야 한다.(논리적 통로)&lt;&#x2F;li&gt;
&lt;li&gt;논리적 통로가 제공하는 send(), receive()를 이용해 논리 통로를 이용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Message Passing의 Implementation Issue로는 아래와 같은 것들이 있다. 전부 구현 단계에서 고민할 문제이다(Implementation Issues).
&lt;ul&gt;
&lt;li&gt;communication link는 어떻게 개설되는가?&lt;&#x2F;li&gt;
&lt;li&gt;두 개 이상의 프로세스에 대해서 link의 활성화가 가능한가?&lt;&#x2F;li&gt;
&lt;li&gt;각 쌍의 communicating processes애 대하여 얼마나 많은 communication link의 개설이 허용되는가?&lt;&#x2F;li&gt;
&lt;li&gt;communication link의 capacity는 어떻게 되는가?&lt;&#x2F;li&gt;
&lt;li&gt;전달되는 message의 크기는 고정 크기인가 가변 크기인가?&lt;&#x2F;li&gt;
&lt;li&gt;communication link를 통한 message passing은 단방향인가 양방향인가?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;direct-communication&quot;&gt;Direct Communication&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Direct Communication에서는 Producer Process와 Consumer Process가 서로를 직접 호출(명시적 호출) 하여 message를 주고받는다.
&lt;ul&gt;
&lt;li&gt;send(P, message) - send a message to process P&lt;&#x2F;li&gt;
&lt;li&gt;receive(Q, message) - receive a message from process Q&lt;&#x2F;li&gt;
&lt;li&gt;위와 같이 send, receive의 호출에 있어 explicit 하게 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;indirect-communication&quot;&gt;Indirect Communication&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Indirect Communication 에서는 mailbox를 이용한다. 이는 Port개념과 유사하다.
&lt;ul&gt;
&lt;li&gt;각각의 mailbox는 unique id를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스들은 오직 서로가 mailbox를 공유할 때만 통신 가능하다.(같은 Port에서 통신 가능하다)&lt;&#x2F;li&gt;
&lt;li&gt;communication link역시 각 프로세스가 공통의 mailbox를 공유할 때만 개설 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;communication link는 여러 프로세스 간에 참조 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;각각의 프로세스 쌍들은 수 개의 communication link를 공유한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때, link는 단&#x2F;양방향 모두 될 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Indirect Communication을 지원하기 위해서는 아래와 같은 operation들을 지원해야 한다.
&lt;ul&gt;
&lt;li&gt;create a new mailbox&lt;&#x2F;li&gt;
&lt;li&gt;send, receive&lt;&#x2F;li&gt;
&lt;li&gt;destroy mailbox&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Indirect Communication방식으로 Message Passing을 구현할 때, 아래와 같은 issue가 발생한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;message_passing_issue.png&quot; alt=&quot;Indirect Communication Issue&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;P1, P2, P3가 mailbox M을 공유한다.&lt;&#x2F;li&gt;
&lt;li&gt;P1은 producer process, P2, P3는 consumer process이다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;이때 P2, P3중 누가 message를 수신해야 하는가?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 issue의 해결 방법으로 아래와 같은 해결책이 있다. 하지만 기본적으로, 이러한 issue는 모두 구현에 따른다(Implementation Issues)
&lt;ul&gt;
&lt;li&gt;최대 두 개의 프로세스 간에만 communication link가 개설되도록 제한한다.&lt;&#x2F;li&gt;
&lt;li&gt;receive operation을 두 프로세스가 동시에 수행할 수 없도록 제한한다.&lt;&#x2F;li&gt;
&lt;li&gt;임의적으로(arbitrarily) 선택되는 것을 허용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;synchronization&quot;&gt;Synchronization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Message Passing 방식은 Blocking방식 또는 Non-Blocking방식으로 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;Blocking - Considered synchronous
&lt;ul&gt;
&lt;li&gt;blocking send는 message가 도착할 때까지 sender block을 가지고 있는다.&lt;&#x2F;li&gt;
&lt;li&gt;blocking receive는 message가 전송 가능할 때까지 receiver block을 가지고 있는다.&lt;&#x2F;li&gt;
&lt;li&gt;기본적으로 non-blocking방식보다 overhead가 클 수밖에 없다. 하지만 message를 주고(sned) 받는(receive)과정에서의 동기화 문제에 대해 자유롭다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Non-Blocking - Considered asynchronous
&lt;ul&gt;
&lt;li&gt;non-blocking send는 그냥 계속해서 message를 send한다.&lt;&#x2F;li&gt;
&lt;li&gt;non-blocking receive는 vaild message와 null을 구분하지 않고 계속해서 receive한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;send, receive모두 blocking방식일 경우 rendezvous(랑데뷰)라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Blocking, Non-Blocking방식 모두 각각의 장점이 있으며, application에 따라 알맞은 방식으로 구현하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;buffering&quot;&gt;Buffering&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Communication Link의 Message Queue는 다음 세 가지 중 하나의 버퍼링 방식으로 message를 처리한다.
&lt;ul&gt;
&lt;li&gt;Zero capacity - 0 messages
&lt;ul&gt;
&lt;li&gt;sender 는 receiver를 항상 기다려야 한다(rendezvous)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Bounded capacity - n개의 유한한 크기의 메시지를 들고 있을 수 있다.(일반적인 경우)
&lt;ul&gt;
&lt;li&gt;message queue가 full이라면 sender는 무조건 대기해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Unbounded capacity - infinite length
&lt;ul&gt;
&lt;li&gt;엄밀하게는 현실에서 불가능하다. 하지만 충분한 양의 메시지를 저장 가능하다면, 이 방식으로 분류한다.&lt;&#x2F;li&gt;
&lt;li&gt;sender는 절대 기다리지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;examples-of-ipc-systems&quot;&gt;Examples of IPC Systems&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Windows의 advanced local procedure call(LPC)의 동작에 관해서 살펴보자&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;LPC_Windows.png&quot; alt=&quot;LPC&quot; &#x2F;&gt;
&lt;ol&gt;
&lt;li&gt;클라이언트가 connection port를 통해 server로 connection 요청을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Server는 두 개의 Private Communication Port를 생성하고, 그 중 하나에 대한 제어권을 client에게 양도한다.&lt;&#x2F;li&gt;
&lt;li&gt;Client와 Server는 각자의 port를 사용하여 Shared Section Object에 접근 가능하다.(공유 버퍼)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;communications-in-client-server-systems&quot;&gt;Communications in Client-Server Systems&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;sockets&quot;&gt;Sockets&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;네트워크 통신에서의 endpoint&lt;&#x2F;li&gt;
&lt;li&gt;host X : 146.855.5.20:1625 &amp;lt;-&amp;gt; web server : 161.25.19.8:80
&lt;ul&gt;
&lt;li&gt;포트(1625, 80)를 이용해 Communication Establishment가 가능하다.
&lt;ul&gt;
&lt;li&gt;여기서 port number는 mailbox의 unique id와 대응된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Communication Establishment되었으므로 socket통신이 일어난다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;remote-procedure-call&quot;&gt;Remote Procedure Call&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;네트워크 시스템에서 떨어져 있는 프로세스를 호출하는 과정은 아래와 같다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;RPC.png&quot; alt=&quot;RPC&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Client에서는 Stub Code를 사용하여 함수 호출에 필요한 값들을(인자 값, 함수 명 등) marshall한다.
&lt;ul&gt;
&lt;li&gt;marshalling이란 표현 방식을 전송에 적합한 방식으로 변환하는 과정이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Server의 Stub Code는 메시지를 전달받고, unmarshall한다. 그리고 server에서 전달받은 값들을 사용하여 프로세스를 호출한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;RPC의 사용을 통해 원격에 존재한 client - server에서 IPC가 가능해 진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pipes&quot;&gt;Pipes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;마치 파이프처럼 두 프로세스 간 통신을 수행한다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;pipe.png&quot; alt=&quot;Pipe&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;P1의 결과를 P2가 (pipe를 통해)전달받아 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Pipe구현 시 고려할 점
&lt;ul&gt;
&lt;li&gt;Unidirectional or Bidirectional?&lt;&#x2F;li&gt;
&lt;li&gt;Half duplex or Full duplex?&lt;&#x2F;li&gt;
&lt;li&gt;Relationship(부모 프로세스 - 자식 프로세스 등)&lt;&#x2F;li&gt;
&lt;li&gt;Environment(네트워크 환경에서의 구현인지, 아니면 같은 시스템 내의 구현인지)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Pipe의 두 종류
&lt;ul&gt;
&lt;li&gt;Ordinary Pipes
&lt;ul&gt;
&lt;li&gt;파이프를 생성한 프로세스 이외에서는 해당 파이프에 접근 불가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;보통은 부모 프로세스가 파이프를 생성해서 자식 프로세스와의 통신에 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;통신에 참여하는 두 프로세스가 producer-consumer관계이다.(unidirectional)&lt;&#x2F;li&gt;
&lt;li&gt;producer는 파이프의 한쪽 구멍을 통해 write한다.&lt;&#x2F;li&gt;
&lt;li&gt;consumer는 파이프의 나머지 한쪽 구멍을 통해 read한다.&lt;&#x2F;li&gt;
&lt;li&gt;파이프를 사용한 통신이 종료되면 ordinary pipe는 사라진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Named Pipes
&lt;ul&gt;
&lt;li&gt;부모-자식 프로세스 관계가 아니더라도 접근 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;양방향 구현이 가능하다(bidirectional).&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 유닉스 또는 윈도우 시스템에서 제공되는 형태이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Pipe와 Message Passing의 차이점
&lt;ul&gt;
&lt;li&gt;Message Passing은 Mailbox를 통해 서로 다른 타입의 값에 대해서도 전달이 가능하다.
&lt;ul&gt;
&lt;li&gt;서로 다른 타입의 message를 linked list형태로 message queue에 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;즉, 서로 다른 자료구조에 대해 처리가 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Pipe는 기본적으로 Bytestream(혹은 bitstream)단위로 전달되기 때문에 타입에 대한 정의 자체가 없다. 따라서 서로 다른 타입에 대해서는 처리할 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>7576 - 토마토</title>
		<published>2023-03-24T00:00:00+00:00</published>
		<updated>2023-03-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/7576-tomato/" type="text/html"/>
		<id>https://js970.github.io/7576-tomato/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 골드 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 3월 24일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Todo Implement with Graph Theory(BFS)&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : Graph(BFS), heuristic(?)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;나중에 BFS를 이용하여 풀이 시도해 볼 것&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;보자마자 그래프 문제인 것은 알았지만 어떻게 풀어야 할지 감이 잡히지 않았다.&lt;&#x2F;li&gt;
&lt;li&gt;그냥 내가 짠 알고리즘대로 풀이에 도전했고, 초기 코드는 시간복잡도로 인한 시간초과 문제가 있었으나 해결했다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 내 접근법이다.
&lt;ol&gt;
&lt;li&gt;오늘 익은 토마토만이 내일 익을 토마토에 영향을 미친다. 이처럼 다음 익을 토마토에 영향을 미칠 토마토들의 배열 인덱스를 저장하는 nextRipeQueue를 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;nextRipeQueue에 인접한 상하좌우 위치의 토마토에 대해(배열 원소값이 -1이거나, 배열 경계를 벗어난 경우는 처리하지 않는다.) 1로 바꾸는 propagate작업을 한다. 이 작업은 문제 조건에 따라 하루에 한 번 일어난다.&lt;&#x2F;li&gt;
&lt;li&gt;propagate작업을 수행했음에도 불구하고 익은 토마토의 개수가 변하지 않는 경우 익을 수 있는 모든 토마토가 다 익은 것이다. 이때, 익을 수 없는 위치에 토마토가 존재하는 예외 상황에 대해서 처리해 주어야 한다.(총 토마토 개수와 익은 토마토 개수의 개수 비교로 구현 가능)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;결과적으로 접근법 자체는 틀리지 않았으나, 익지 않은 토마토의 개수를 세는 함수를 따로 구현하여 정답을 계산하는 함수에서 호출하였더니 불필요한 연산이 증가함에 따라 시간초과를 출력했다.
&lt;ul&gt;
&lt;li&gt;불필요한 연산을 제거하니 문제는 해결되었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;윗 문단에서 소개한 내 접근법으로 구현한 코드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;, queue&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; dc[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; dr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; nextRipe;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(!(q-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; c = q-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; r = q-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; col = c + dc[i]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; row = r + dr[i];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(col &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|| row &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|| col &amp;gt;= N || row &amp;gt;= M) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[col][row] == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[col][row] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                arr[col][row] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                nextRipe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;({col, row});
&lt;&#x2F;span&gt;&lt;span&gt;                result++;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        q-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; nextRipe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++)
&lt;&#x2F;span&gt;&lt;span&gt;        q-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(nextRipe[i]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dayCalc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;, queue&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; curCount = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; M; j++)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i][j] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) curCount++;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(curCount == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; prevCount = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; tomato = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; M; j++)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i][j] != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) tomato++;
&lt;&#x2F;span&gt;&lt;span&gt;    prevCount = curCount;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        curCount -= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;(arr, M, N, &amp;amp;q);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(curCount == prevCount)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ripedTomato = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; M; j++)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i][j] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) ripedTomato++;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(ripedTomato == tomato) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        prevCount = curCount;
&lt;&#x2F;span&gt;&lt;span&gt;        result++;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; M, N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; M &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[N];
&lt;&#x2F;span&gt;&lt;span&gt;    queue&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; nextRipeQueue;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        arr[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[M];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; M; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; arr[i][j];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(arr[i][j] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) nextRipeQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;({i, j});
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dayCalc&lt;&#x2F;span&gt;&lt;span&gt;(arr, M, N, nextRipeQueue) &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;7576&quot;&gt;7576번: 토마토&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-23 수업정리</title>
		<published>2023-03-23T00:00:00+00:00</published>
		<updated>2023-03-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-3-23-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-3-23-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;시대별 정리&lt;&#x2F;li&gt;
&lt;li&gt;BASIC 실습(II)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;late-1950-s-early-1960-s&quot;&gt;Late 1950&#x27;s ~ Early 1960&#x27;s&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Target machine들은 일괄 처리 환경을 가지고 있었다.&lt;&#x2F;li&gt;
&lt;li&gt;작업 제출과 결과 수령 사이의 간격(turnaround time)이 컷다. -&amp;gt; 1~2days &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;languages-big-4&quot;&gt;Languages (Big - 4)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;FORTRAN(1957) - 기본적인 제어 구조 제시&lt;&#x2F;li&gt;
&lt;li&gt;ALGOL(1958) - 블록 구조 제시&lt;&#x2F;li&gt;
&lt;li&gt;LISP(1959) - 기호 계산&lt;&#x2F;li&gt;
&lt;li&gt;COBOL(1960) - record&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;1960-s&quot;&gt;1960&#x27;s&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Target machine들은 Time Sharing(시분할)환경을 가지고 있었다.&lt;&#x2F;li&gt;
&lt;li&gt;PL&#x2F;I(1964~1969) - MULTICS에서 Big-4의 기능들을 통합하는 것을 목표로 했으나 너무 복잡해서 사실상 실패&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;languages&quot;&gt;Languages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;BASIC(1964) - 교육용&lt;&#x2F;li&gt;
&lt;li&gt;APL(1962~1967)&lt;&#x2F;li&gt;
&lt;li&gt;Simula(1962~1967)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;1970-s&quot;&gt;1970&#x27;s&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Target machine들은 Mini Computer, Micro Computer였다.
&lt;ul&gt;
&lt;li&gt;Mini Computer : PDP 11, VAX&lt;&#x2F;li&gt;
&lt;li&gt;Micro Computer : Apple I, Apple II&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Target machine은 Operating System으로 UNIX, Apple DOS를 사용했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;languages-1&quot;&gt;Languages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Pascal(1971)&lt;&#x2F;li&gt;
&lt;li&gt;C(1972)&lt;&#x2F;li&gt;
&lt;li&gt;Prolog(1972)&lt;&#x2F;li&gt;
&lt;li&gt;Modula(1975)&lt;&#x2F;li&gt;
&lt;li&gt;Smalltalk(1976)&lt;&#x2F;li&gt;
&lt;li&gt;FORTRAN 77(1978)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;1980-s&quot;&gt;1980&#x27;s&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Target machine들은 Personal Computer가 대상이다.
&lt;ul&gt;
&lt;li&gt;바야흐로 PC의 도입이 시작되었다.
&lt;ul&gt;
&lt;li&gt;Apple Lisa(1983)&lt;&#x2F;li&gt;
&lt;li&gt;Macintosh(1984)&lt;&#x2F;li&gt;
&lt;li&gt;IBM PC(PC XT, AT, 386, 486, 586)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;languages-2&quot;&gt;Languages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Smalltalk-80(1980)&lt;&#x2F;li&gt;
&lt;li&gt;C with classes(1980)&lt;&#x2F;li&gt;
&lt;li&gt;Ada83(1983)&lt;&#x2F;li&gt;
&lt;li&gt;C++(1985, disign - 1983)&lt;&#x2F;li&gt;
&lt;li&gt;Common LISP(1984)&lt;&#x2F;li&gt;
&lt;li&gt;Miranda(1986)&lt;&#x2F;li&gt;
&lt;li&gt;Perl(1987)&lt;&#x2F;li&gt;
&lt;li&gt;Tcl(1988)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;1990-s&quot;&gt;1990&#x27;s ~&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;인터넷과 웹의 보급이 시작되었다.
&lt;ul&gt;
&lt;li&gt;web : HTTP로 연결된 HTML페이지들&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;languages-3&quot;&gt;Languages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;1990 : Haskell&lt;&#x2F;li&gt;
&lt;li&gt;1991 : FORTRAN 90, Python, Visual Basic&lt;&#x2F;li&gt;
&lt;li&gt;1994 : PHP&lt;&#x2F;li&gt;
&lt;li&gt;1995 : Ada 95, Delphi, Java, JavaScript, Ruby&lt;&#x2F;li&gt;
&lt;li&gt;1996 : FORTRAN 95&lt;&#x2F;li&gt;
&lt;li&gt;1998 : ANSI-C++(C++11, C++14, C++17, C++20)&lt;&#x2F;li&gt;
&lt;li&gt;1999 : ANSI-C(C99, C11)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;2000년대에는 임베디드 시스템 및 가상화에 의해 도메인 특화 언어화 가상화 언어가 활성화되었다.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;2000 : C#&lt;&#x2F;li&gt;
&lt;li&gt;2004 : FORTRAN 2003&lt;&#x2F;li&gt;
&lt;li&gt;2007 : Ada 2005
&amp;gt;2010년대 이전까지는 목적에 따라 언어를 설계했다. 2010년대에는 기업들이 언어를 스폰하고, 해당 언어가 널리 사용되는 경향이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;2009 : Go(Google)&lt;&#x2F;li&gt;
&lt;li&gt;2011 : Kotlin(JetBrains)&lt;&#x2F;li&gt;
&lt;li&gt;2014 : Swift(Apple)&lt;&#x2F;li&gt;
&lt;li&gt;2015 : Rust(Mozilla)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;basic-ssisseu-ii&quot;&gt;BASIC 실습(II)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;goto-haengbbeoho&quot;&gt;GOTO 행번호&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 행번호로 무조건 분기&lt;&#x2F;li&gt;
&lt;li&gt;IF문법을 사용하여 조건 분기 가능&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;gosub-haengbbeoho&quot;&gt;GOSUB 행번호&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;서브루틴에 의한 프로시저 형태로 작동한다.&lt;&#x2F;li&gt;
&lt;li&gt;GOSUB에 의해 실행되는 서브루틴이 RETURN을 만나면 복귀 지점으로 복귀한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;let-bbyeosu-ggab&quot;&gt;LET 변수 = 값&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;LET을 통해 변수를 설정하고 값을 저장할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;변수는 수 혹은 문자열의 타입을 가질 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;문자열 타입의 변수는 변수 다음에 &lt;code&gt;$&lt;&#x2F;code&gt;를 입력하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;input-myeongryeongeo&quot;&gt;INPUT 명령어&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;INPUT을 통해 값을 입력받을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;사실 INPUT을 사용하면 LET은 사용할 필요가 없다. 아래 코드에서 N에 키보드 입력값이 저장된다. LET에서와 마찬가지로 문자열 입력을 받고 싶다면 &lt;code&gt;$&lt;&#x2F;code&gt;를 붙이면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;BASIC&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-BASIC &quot;&gt;&lt;code class=&quot;language-BASIC&quot; data-lang=&quot;BASIC&quot;&gt;&lt;span&gt;10 INPUT &amp;quot;input number : &amp;quot;; N
&lt;&#x2F;span&gt;&lt;span&gt;20 INPUT &amp;quot;input string : &amp;quot;; S$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;for&quot;&gt;FOR&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 BASIC FOR문의 형식이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;BASIC&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-BASIC &quot;&gt;&lt;code class=&quot;language-BASIC&quot; data-lang=&quot;BASIC&quot;&gt;&lt;span&gt;10 FOR VARIABLE = BEGIN TO END
&lt;&#x2F;span&gt;&lt;span&gt;20 STATEMENT
&lt;&#x2F;span&gt;&lt;span&gt;30 NEXT VARIABLE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;biggyhyeossaja&quot;&gt;비교연산자&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;부등식의 표기는 C언어와 동일하다.&lt;&#x2F;li&gt;
&lt;li&gt;동등 비교연산자는 =(같다), &amp;lt;&amp;gt;(다르다)를 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;참은 1, 거짓은 0으로 나타낸다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;nonrihyeossaja&quot;&gt;논리연산자&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;영어로 표기한다.
&lt;ul&gt;
&lt;li&gt;AND, OR, NOT&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ssisseu&quot;&gt;실습&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 행 수와 열 수를 입력받은 후 게임판을 출력하는 프로그램이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;BASIC&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-BASIC &quot;&gt;&lt;code class=&quot;language-BASIC&quot; data-lang=&quot;BASIC&quot;&gt;&lt;span&gt;10 INPUT &amp;quot;ENTER ROW SIZE : &amp;quot;; ROW
&lt;&#x2F;span&gt;&lt;span&gt;20 INPUT &amp;quot;ENTER COLUMN SIZE : &amp;quot;; COL
&lt;&#x2F;span&gt;&lt;span&gt;30 FOR I = 1 TO ROW
&lt;&#x2F;span&gt;&lt;span&gt;40 GOSUB 1000
&lt;&#x2F;span&gt;&lt;span&gt;50 GOSUB 2000
&lt;&#x2F;span&gt;&lt;span&gt;60 NEXT I
&lt;&#x2F;span&gt;&lt;span&gt;70 GOSUB 1000
&lt;&#x2F;span&gt;&lt;span&gt;80 END
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1000 LET S$ = &amp;quot;+--&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;1010 FOR J = 1 TO COL
&lt;&#x2F;span&gt;&lt;span&gt;1020 PRINT S$;
&lt;&#x2F;span&gt;&lt;span&gt;1030 NEXT J
&lt;&#x2F;span&gt;&lt;span&gt;1040 PRINT &amp;quot;+&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;1050 RETURN
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;2000 LET S$ = &amp;quot;|  &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;2010 FOR J = 1 TO COL
&lt;&#x2F;span&gt;&lt;span&gt;2020 PRINT S$;
&lt;&#x2F;span&gt;&lt;span&gt;2030 NEXT J
&lt;&#x2F;span&gt;&lt;span&gt;2040 PRINT &amp;quot;|&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;2050 RETURN
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;아래는 행의 입력으로 2, 열의 입력으로 3을 입력해 Apple II Emulator에서 실행시킨 결과이다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;practice2_code.png&quot; alt=&quot;result_code&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;practice2_result.png&quot; alt=&quot;result_run&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-03-22 수업정리</title>
		<published>2023-03-22T00:00:00+00:00</published>
		<updated>2023-03-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-3-22-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-3-22-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring (end)&lt;&#x2F;li&gt;
&lt;li&gt;More Refactoring Techniques (1)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;refactoring-example&quot;&gt;Refactoring Example&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;refactored-uml&quot;&gt;Refactored UML&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;uml_step3.png&quot; alt=&quot;step3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-1&quot;&gt;Step 1&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;응집도를 고려하여 &lt;code&gt;getCharge()&lt;&#x2F;code&gt;함수와  &lt;code&gt;getFrequentRenterPoint()&lt;&#x2F;code&gt; 함수를 Rental 에서 Movie로 이동시켰다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getCharge()&lt;&#x2F;code&gt; 의 경우 Rental이 아닌 Movie의 attribute를 사용하므로 Move method하여 이동시켰다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;getFrequentRenterPoint()&lt;&#x2F;code&gt; 의 경우 Rental에서는 _daysRented를 사용하고 Movie의 Movie type 을 연산에 필요로 한다. 중요도 면에서 Movie로 옮기는 것이 더 적절하므로 Move method하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이때 &lt;code&gt;getFrequentRenterPoint()&lt;&#x2F;code&gt;의 경우 Rental의 attribute인 _daysRented 의 정보를 method의 연산 과정에 필요로 하여 초기 코드는 this를 인자로 받았다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이는 coupling issue이므로 this를 넘겨주는 대신 int타입 파라미터를 입력받는 식으로 수정했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;step-2&quot;&gt;Step 2&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Movie 의 &lt;code&gt;getCharge()&lt;&#x2F;code&gt;는 각기 다른 타입의 영화에 대해 연산하는 방식이 다르다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 OCP를 충족시키기 위해 ploymorphism 을 사용한다.
&lt;ul&gt;
&lt;li&gt;Abstract class Price를 생성한다.&lt;&#x2F;li&gt;
&lt;li&gt;Price를 superclass로 가지는 ChildrenPrice, RegularPrice, NewReleasePrice를 생성한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;getCharge()&lt;&#x2F;code&gt; 와 &lt;code&gt;getFrequentRenterPoint()&lt;&#x2F;code&gt;를 Price로 Move method한다.
&lt;ul&gt;
&lt;li&gt;Price의 subclass에서 해당 타입의 Movie에 대한 가격 정보를 포함하고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;step1에서와 마찬가지로 Price의 attribute를 사용하기 때문이다.&lt;&#x2F;li&gt;
&lt;li&gt;Price에서는 원래 switch문으로 구현되었던 &lt;code&gt;getCharge()&lt;&#x2F;code&gt; 를  polymorphism을 통해 smell을 없엘 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Movie의 &lt;code&gt;setPriceCode()&lt;&#x2F;code&gt; 함수의 코드이다.
&lt;ul&gt;
&lt;li&gt;아래 코드는 DIP를 위반하고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 해결하기 위해 Price를 통해 각 subclass에 접근해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;객체 생성을 담당하는 새로운 class를 생성한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPriceCode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arg) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt;(arg) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;REGULAR&lt;&#x2F;span&gt;&lt;span&gt;: _price = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RegularPrice&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CHILDREN&lt;&#x2F;span&gt;&lt;span&gt;: _price = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ChildrenPrice&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NEW_RELEASE&lt;&#x2F;span&gt;&lt;span&gt;: _price = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NewReleasePrice&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;illegalArgumentException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Incorrect Price Code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);	
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;step-3&quot;&gt;Step 3&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Customer의 &lt;code&gt;statement()&lt;&#x2F;code&gt;와 &lt;code&gt;htmlStatement()&lt;&#x2F;code&gt;의 common code를 template method pattern을 사용하여 제거한다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 subclass의 서로 다른 code를 연산하는 함수를 superclass에 구현한다.
&lt;ul&gt;
&lt;li&gt;Refactored UML에서는 Statement class 의 &lt;code&gt;value(Customer)&lt;&#x2F;code&gt; 메소드가 이러한 역할을 하는 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;value(Customer)&lt;&#x2F;code&gt;는 template method로 primitive operation에 대한 연산을 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;more-refactoring-techniques&quot;&gt;More Refactoring Techniques&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;본 절에서는 리펙토링 실습에서 학습한 리펙토링 기법 이외에 추가적인 리펙토링 기법에 대해서 다룬다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;introduce-assertion&quot;&gt;Introduce Assertion&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 코드에서는 주석을 통해 코드의 특정 위치에서의 요구사항을 정리했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getExpenseLimit&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; should have either expense limit or a primary project
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;(_expenseLimit != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL_EXPENSE&lt;&#x2F;span&gt;&lt;span&gt;) ?
&lt;&#x2F;span&gt;&lt;span&gt;			_expenseLimit:
&lt;&#x2F;span&gt;&lt;span&gt;			_primaryProject.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetMemberExpenseLimit&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;하지만 java에서 제공하는 assertion 기능을 이용해 주석(smell)을 없엘 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getExpenseLimit&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Assert&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isTrue &lt;&#x2F;span&gt;&lt;span&gt;(_expenseLimit != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL_EXPENSE &lt;&#x2F;span&gt;&lt;span&gt;||
&lt;&#x2F;span&gt;&lt;span&gt;									_primaryProject != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;(_expenseLimit != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL_EXPENSE&lt;&#x2F;span&gt;&lt;span&gt;) ?
&lt;&#x2F;span&gt;&lt;span&gt;			_expenseLimit:
&lt;&#x2F;span&gt;&lt;span&gt;			_primaryProject.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetMemberExpenseLimit&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Assert : 개발자 영역, runtime에는 Assert가 발생하면 안된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;rename-method&quot;&gt;Rename Method&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;메소드의 이름이 해당 메소드의 목적에 맞도록 rename한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;encapsulate-downcast&quot;&gt;Encapsulate Downcast&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;method의 호출자가  method의 return을 typecast해서 사용해야 한다면, 그냥 처음부터 typecast를 해서 return 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;replace-error-code-with-exception&quot;&gt;Replace Error Code with Exception&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;int를 반환하는 함수가, 비정상적인 상황에서 -1등의 에러 코드를 반환하는 경우 이는 결국 flag와 다를 것이 없으므로 smell이다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 경우 java 에서는 throws를 활용한 exception handling을 통해 smell을 없에는 것이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;introduce-explaining-variable&quot;&gt;Introduce Explaining Variable&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;조건문의 조건 등 직관적이지 않은 코드를 변수로 추출하고 해당 변수에 적절한 이름을 부여하면 가독성을 높일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;encapsulate-field&quot;&gt;Encapsulate Field&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;public field를 private로 설정하고 getter, setter를 public으로 만들어 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;self-encapsulate-field&quot;&gt;Self Encapsulate Field&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Encapsulate Filed와 마찬가지로 한 클래스 내에서도 private를 직접 건드리지 않고 getter, setter를 이용하여 값을 수정하거나 참조한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;encapsulate-collection&quot;&gt;Encapsulate Collection&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 코드에서 특정 자료 구조를 사용하여 데이터를 관리하는 구현을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt; kent = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; s = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Course&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Smalltalk Programming&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Course&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Appreciating Single Malts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;kent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initializeCourses&lt;&#x2F;span&gt;&lt;span&gt;(s);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;하지만 위와 같은 코드의 경우 특정 자료 구조를 활용한 코드이다
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Person.initializeCourses(set)&lt;&#x2F;code&gt; 에서 확인할 수 있듯이, set을 파라미터로 입력받고 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이러한 데이터 관리 로직을 Person내부로 이동시키면 fan-out을 줄일 수 있다. 아래는 수정된 코드이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt; kent = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;kent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addCourse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Course&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Smalltalk Programming&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;kent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addCourse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Course&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Appreciating Single Malts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위 코드는 set에서 tree로 자료 구조를 변경하더라도 코드의 수정이 필요없다.
&lt;ul&gt;
&lt;li&gt;Person내부의 데이터 관리 로직만 수정해 주면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;초기 코드에 비해 fan-out이 3에서 2로 줄어든 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;seperate-query-from-modifier&quot;&gt;Seperate Query from Modifier&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;어떤 클래스의 메소드에서
&lt;ul&gt;
&lt;li&gt;Return이 void가 아니라면 Query이다.&lt;&#x2F;li&gt;
&lt;li&gt;attribute를 수정하면 Modifier이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이때 한 메소드에서 Query와 Modifier역할은 분리하여 별개의 메소드로 만들어야 한다.
&lt;ul&gt;
&lt;li&gt;C++에서 return type이 non-void라면 const member로 선언하여 값의 수정을 막을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-03-22 수업정리</title>
		<published>2023-03-22T00:00:00+00:00</published>
		<updated>2023-03-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-3-22-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-3-22-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Process scheduling&lt;&#x2F;li&gt;
&lt;li&gt;Scheduler&lt;&#x2F;li&gt;
&lt;li&gt;Process creation &amp;amp; termination&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;process-scheduling&quot;&gt;Process scheduling&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;주어진 실행 가능한 프로세스 목록 중에서 어떤 프로세스를 실행할 것인지 정하는 규칙&lt;&#x2F;li&gt;
&lt;li&gt;빠르고 빈번하게 일어난다.&lt;&#x2F;li&gt;
&lt;li&gt;이런 규칙은 크게 아래와 같이 분류할 수 있다.
&lt;ul&gt;
&lt;li&gt;non-preemptive scheduling
&lt;ul&gt;
&lt;li&gt;실행 중인 프로세스에서 CPU 자원을 해제할 때까지 기다려야 한다.(yeild())&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 간 조율이 중요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;preemptive scheduling
&lt;ul&gt;
&lt;li&gt;대부분의 현대 scheduler 형태이다.&lt;&#x2F;li&gt;
&lt;li&gt;scheduler가 interrupt를 통해 프로세스를 중지하고 context switching을 실시한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Process scheduling을 하는 이유
&lt;ul&gt;
&lt;li&gt;CPU에서 Time Sharing을 통해 프로세스를 빨리 switching해서 CPU사용률을 높이기 위해&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;scheduler는 다음에 실행이 가능한 프로세스 중에서 선택하여 다른 프로세스를 실행한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스에 대한 scheduling queue를 사용한다. 프로세스는 아래의 여러 큐 사이에서 이동한다.
&lt;ul&gt;
&lt;li&gt;Job Queue
&lt;ul&gt;
&lt;li&gt;시스템 내 모든 프로세스 큐&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Ready Queue
&lt;ul&gt;
&lt;li&gt;main memory에 올라온 프로세스 큐&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Device Queue
&lt;ul&gt;
&lt;li&gt;I&#x2F;O 대기중인 프로세스 큐&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Wait Queue
&lt;ul&gt;
&lt;li&gt;event 대기중인 프로세스 큐&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Queue들은 아래와 같이 PCB의 arrivaled time에 따라 linked list형태로 구현된다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;scheduler_queues.png&quot; alt=&quot;Scheduling Queues&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ready Queue에서 scheduler에 의해 다음 프로세스로 선택되면 CPU자원을 할당받는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;scheduler&quot;&gt;Scheduler&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;short-term-scheduler-cpu-scheduler&quot;&gt;Short-term scheduler(CPU scheduler)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU 점유를 할당할 다음 프로세스를 선택한다.&lt;&#x2F;li&gt;
&lt;li&gt;milisecond단위로 빈번하게 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;medium-term-scheduler&quot;&gt;Medium-term scheduler&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;swapping이 일어날 프로세스에 대해서 관리한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 Medium-term scheduler의 동작 그림이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;mediumterm_scheduler.png&quot; alt=&quot;Medium-term scheduler&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;long-term-scheduler-job-scheduler&quot;&gt;Long-term scheduler(Job Scheduler)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ready queue로 올라갈 프로세스를 관리한다.&lt;&#x2F;li&gt;
&lt;li&gt;수 초~ 수 분의 간격으로 빈번하지 않게 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;multiprogramming의 정도를 관리한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;process-creation-termination&quot;&gt;Process creation &amp;amp; termination&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;process-creation&quot;&gt;Process Creation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;새로운 프로세스의 생성은 부모 프로세스가 자식 프로세스를 생성하는 형태로 이루어진다. 이를 트리 구조로 표현할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 프로세스는 PID라는 고유 번호를 통해 식별된다.&lt;&#x2F;li&gt;
&lt;li&gt;Resource Sharing
&lt;ul&gt;
&lt;li&gt;자식 프로세스는 부모 프로세스의 모든 자원을 공유할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;자식 프로세스가 부모 프로세스의 일부 자원만 공유하는 것도 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;심지어 서로 아무런 자원도 공유하지 않는 것 역시 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Execution Modes
&lt;ul&gt;
&lt;li&gt;부모 프로세스는 wait()등의 system call을 통해 자식 프로세스의 실행이 끝날 때까지 대기할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;부모 프로세스와 자식 프로세스는 동시에 실행될 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Address Space Modes
&lt;ul&gt;
&lt;li&gt;자식 프로세스는 부모 프로세스의 복제본일 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;자식 프로세스와 부모 프로세스는 전혀 다른 프로세스 일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 유닉스 시스템에서 프로세스 생성 과정을 도식으로 나타낸 것이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;process_creation.png&quot; alt=&quot;porcess creation&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;process-termination&quot;&gt;Process Termination&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 마지막 코드에서, 프로세스는 exit()등의 프로세스 종료 system call을 사용하여 프로세스를 삭제할 수 있다.
&lt;ul&gt;
&lt;li&gt;자식 프로세스가 종료될 경우 pid를 부모 프로세스로 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;OS로부터 할당받은 자원을 해제한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;부모 프로세스는 abort()를 사용하여 자식 프로세스를 종료시킬 수 있다.
&lt;ul&gt;
&lt;li&gt;자식 프로세스가 자원을 초과해서 사용하는 경우&lt;&#x2F;li&gt;
&lt;li&gt;Task수행 중 더 이상 자식 프로세스가 필요 없는 경우&lt;&#x2F;li&gt;
&lt;li&gt;일부 운영 체제에서는 부모 프로세스가 종료되면 자식 프로세스가 실행되는 것을 허용하지 않는 경우도 있다.
&lt;ul&gt;
&lt;li&gt;이를 cascaded termination이라고 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;부모 프로세스가 waiting하고 있지 않은 경우 해당 프로세스는 zombie process이다.&lt;&#x2F;li&gt;
&lt;li&gt;부모 프로세스가 wait()없이 terminate하였다면 해당 프로세스는 orphan이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2630 - 색종이 만들기</title>
		<published>2023-03-21T00:00:00+00:00</published>
		<updated>2023-03-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2630-ssaejjoni-manddeugi/" type="text/html"/>
		<id>https://js970.github.io/2630-ssaejjoni-manddeugi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 3월 21일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No &lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : Divide and Conquer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;분할정복을 활용한 recursion을 통해 문제의 요구대로 구현하였다.&lt;&#x2F;li&gt;
&lt;li&gt;2차원 배열을 계속해서 생성할 수 없으므로 원본 배열에서 왼쪽 위의 인덱스를 넘기는 방식으로 subarray에 대한 순회를 구현했다.&lt;&#x2F;li&gt;
&lt;li&gt;pair를 사용하여 흰 종이와 파란색 종이의 개수를 셌다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;2차원 배열 구간 순회의 인덱싱에 있어 숙련도가 부족해 틀린 답이 계속 출력되었다.&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;아래 코드에서 top은 column을, left는 row를 의미했는데, 변수명이 애매해서 계속 했갈렸다.&lt;&#x2F;li&gt;
&lt;li&gt;앞으로는 col, row등의 표현을 사용하는 것이 좋을 것 같다.&lt;&#x2F;li&gt;
&lt;li&gt;아래와 같은 할당에서 배열은 좌표평면의 제 4사분면 방향임을 명심하자&lt;&#x2F;li&gt;
&lt;li&gt;sameColor함수의 for문에서 i, j의 반복문 탈출 조건을 잘못 설정하여 틀렸었다.&lt;&#x2F;li&gt;
&lt;li&gt;count함수의 recursion부분에서  N&#x2F;div라고 표기하지 않고 단순히 N&#x2F;2라고 적어 틀렸었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sameColor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; comp = arr[top][left]; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = top; i &amp;lt; N&#x2F;div + top; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = left; j &amp;lt; N&#x2F;div + left; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i][j] != comp) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sameColor&lt;&#x2F;span&gt;&lt;span&gt;(arr, left, top, div, N) )
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(arr[top][left] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        div *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; lt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(arr, left, top, div, N);
&lt;&#x2F;span&gt;&lt;span&gt;        pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(arr, left + (N&#x2F;div), top, div, N);
&lt;&#x2F;span&gt;&lt;span&gt;        pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; lb = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(arr, left, top + (N&#x2F;div), div, N);
&lt;&#x2F;span&gt;&lt;span&gt;        pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rb = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(arr, left + (N&#x2F;div), top + (N&#x2F;div), div, N);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;((lt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;+ rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;+ lb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;+ rb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;), (lt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ lb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ rb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        arr[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; arr[i][j];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; print = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(arr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, N);
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;기초 C++ array 확인 코드 ^___^&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** array = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[N];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        &amp;lt; 2 - dimentional array, index : [i][j] &amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        --&amp;gt; direction of j (row)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        *---*---*---*---*  | direction of i (column)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        |0,0|0,1|0,2|0,3|  v
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        *---*---*---*---*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        |1,0|1,1|1,2|1,3|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        *---*---*---*---*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        |2,0|2,1|2,2|2,3|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        *---*---*---*---*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        |3,0|3,1|3,2|3,3|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        *---*---*---*---*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dynamic allocation of 2-dimentional array(size N*N)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dynamic allocation of row
&lt;&#x2F;span&gt;&lt;span&gt;        array[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N; j++)
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; array[i][j];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;==================&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; print allocated array
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N; j++)
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; array[i][j] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;==================&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; print each element
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;array[2][2] : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; array[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; == (2*N) + 2 == (i*N) + j&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;array[2][3] : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; array[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; == (2*N) + 3 == (i*N) + j&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;array[3][2] : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; array[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; == (3*N) + 2 == (i*N) + j&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;array[7][7] : &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; array[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; == (7*N) + 7 == (i*N) + j&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;    
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;source&#x2F;57831392&quot;&gt;2630번: 색종이 만들기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-21 수업정리</title>
		<published>2023-03-21T00:00:00+00:00</published>
		<updated>2023-03-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-3-21-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-3-21-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Simula I(1962) and Simula 67&lt;&#x2F;li&gt;
&lt;li&gt;Smalltalk(1972)&lt;&#x2F;li&gt;
&lt;li&gt;Traditional C(K&amp;amp;R C) (1972)&lt;&#x2F;li&gt;
&lt;li&gt;Objective-C(1984)&lt;&#x2F;li&gt;
&lt;li&gt;C++(1985)&lt;&#x2F;li&gt;
&lt;li&gt;Java(1995)&lt;&#x2F;li&gt;
&lt;li&gt;JavaScript(1995) and PHP(1994)&lt;&#x2F;li&gt;
&lt;li&gt;Perl(1987), Python(1991), Ruby(1990)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;simula-i-1962-and-simula-67&quot;&gt;Simula I(1962) and Simula 67&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;SIMUlation Language -&amp;gt; SIMULA&lt;&#x2F;li&gt;
&lt;li&gt;Ole-Johan Dahl에 의해 1962년 개발되었다.(APL과 비슷한 시기에 개발됨)&lt;&#x2F;li&gt;
&lt;li&gt;시스템 시뮬레이션 목적으로 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;data와 functionality를 한 덩어리로 봤다. -&amp;gt; class&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Class, 객체, 상속, 추상화 개념을 도입했다. -&amp;gt; Smalltalk, Objective-C, C++에 많은 영향을 줌&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;smalltalk-1972&quot;&gt;Smalltalk(1972)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Xerox PARC(Xerox Palo Alto Research Center)에서 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;아래와 같은 메시지 전달 매커니즘 등 진보된 객체 지향 개념을 확립했다.
&lt;ul&gt;
&lt;li&gt;a+b =&amp;gt; a.+(b)
&lt;ul&gt;
&lt;li&gt;a : object&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;: method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;b : argumen&lt;&#x2F;li&gt;
&lt;li&gt;전체 식(a+b)은 class에 보내는 메시지로 해석한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Smalltalk-80 이후로 더 이상 개발은 진행되지 않았다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga-1&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;object-oriented 로 완전히 구현된 첫 번쨰 프로그래밍 언어이다.
&lt;ul&gt;
&lt;li&gt;data abstraction&lt;&#x2F;li&gt;
&lt;li&gt;inheritance&lt;&#x2F;li&gt;
&lt;li&gt;dynamic type binding&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;GUI computing환경을 개척했다. 
&lt;ul&gt;
&lt;li&gt;스티브 잡스가 이걸 보고 매킨토시를 개발했다고 한다...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;GUI Windowing system에 많은 기여를 했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;traditional-c-k-r-c-1972&quot;&gt;Traditional C(K&amp;amp;R C)(1972)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;이전 글의 C 문단에서 이어진다.&lt;&#x2F;li&gt;
&lt;li&gt;type checking이 부족하다고 했는데 아래와 같은 코드에서 확실히 확인할 수 있다.
&lt;ul&gt;
&lt;li&gt;return type, argument의 타입을 명시하지 않았다.&lt;&#x2F;li&gt;
&lt;li&gt;default type으로 int를 사용했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(a, b)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a, b;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a + b;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;현대 C언어(ANSI-C)에서 Traditional C언어의 잔해를 찾아볼 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 어떤 argument든 받을 수 있음을 의미
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; argument를 받지 않겠다는 것을 의미
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;objective-c-1984&quot;&gt;Objective-C(1984)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Brad Cox와 Tom Love에 의해 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;소프트웨어의 재사용성을 높이려는 개발 의도가 있었다.&lt;&#x2F;li&gt;
&lt;li&gt;NeXT(NeXTSTEP build, MacOS의 전신)에 의해 유명해졌다.&lt;&#x2F;li&gt;
&lt;li&gt;C의 헤더를 그대로 계승했다.&lt;&#x2F;li&gt;
&lt;li&gt;Smalltalk의 messaging concept을 가져왔다.&lt;&#x2F;li&gt;
&lt;li&gt;type 개념과 객체 지향 개념을 모두 도입했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga-2&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;MacOS, iOS의 어플리케이션 개발에 주로 사용되었다.&lt;&#x2F;li&gt;
&lt;li&gt;Swift(2014)에 많은 영향을 주었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;c-1985&quot;&gt;C++(1985)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Bell Lab의 Bjarne Stroustrup에 의해 개발되었다.
&lt;ul&gt;
&lt;li&gt;이 사람은 원래 Simula를 사용하던 사람인데, Simula의 개념을 C에 도입했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Class, object mechanism을 가지고 있다.&lt;&#x2F;li&gt;
&lt;li&gt;연산자 오버로딩을 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;동적 바인딩, 가상 함수 등의 기능을 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;Template(for functions and classes)개념과 Exception handling개념은 꽤 시간이 지난 후에 도입되었다.&lt;&#x2F;li&gt;
&lt;li&gt;1998년 ANSI C++이 발표되었다. 이후 오랜 기간 새로운 표준이 발표되지 않다가 2011년에 많은 기능을 폭발적으로 도입하였다. 이후로는 3년 단위로 새로운 표준을 발표한다.
&lt;ul&gt;
&lt;li&gt;C++11에서 람다 함수 등 함수형 프로그래밍의 개념도 도입되었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga-3&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;객체 지향 프로그래밍(OOP)의 영향으로 엄청난 사용자 그룹의 성장을 이루어 냈다.(+ C언어의 인기)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;java-1995&quot;&gt;Java(1995)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;회사가 망하는 등 사연이 많았던 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;JVM을 통해 임베디드를 타겟으로 개발했으나... 웹에서 사용했다.
&lt;ul&gt;
&lt;li&gt;이후 JavaScript, PHP가 웹에서의 역할도 대체했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;C++에 기반했지만 아래와 같은 복잡한 기능들을 없에 훨씬 단순하다.
&lt;ul&gt;
&lt;li&gt;struct, union, enum, pointers, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;객체 지향 프로그래밍을 지원한다. -&amp;gt; 모든 것은 class로 정의된다.&lt;&#x2F;li&gt;
&lt;li&gt;Garbage collection 지원&lt;&#x2F;li&gt;
&lt;li&gt;Concurrency지원(thread개념을 도입했다)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga-4&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;C++보다 안전하지만 느리다.&lt;&#x2F;li&gt;
&lt;li&gt;C++을 단순화 했다고는 하지만 여전히 복잡하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;javascript-and-php&quot;&gt;JavaScript and PHP&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;javascript&quot;&gt;JavaScript&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Java와는 아무런 관계도 없다&lt;&#x2F;li&gt;
&lt;li&gt;주로 client-side를 담당했다(현재는 server-side도 담당한다)
&lt;ul&gt;
&lt;li&gt;브라우저를 클라이언트라고 하자. 웹 서버가 요청에 따라 페이지를 제공할 때 굳이 서버가 페이지를 수정하지 않고 브라우저 선에서 수정이 가능한 것들도 있다. 이를 client-side라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;서버가 직접 수정하는 것을 server-side라고 표현했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Node.js를 통해 더욱 널리 퍼졌다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;php&quot;&gt;PHP&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript가 client-side를 담당했다면 PHP는 server-side를 담당한다.&lt;&#x2F;li&gt;
&lt;li&gt;PHP는 보안 관련 이슈가 있었지만 계속해서 표준을 갱신하는 중이다.
&lt;ul&gt;
&lt;li&gt;PHP 5(2004), PHP 6(2006), PHP 7(2015), PHP 8(2020)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;HTML에 embed되어 사용된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;perl-python-ruby&quot;&gt;Perl, Python, Ruby&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;perl-1987&quot;&gt;Perl(1987)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;가독성이 매우 좋지 않다.&lt;&#x2F;li&gt;
&lt;li&gt;Multiparadigm language&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;python-1991&quot;&gt;Python(1991)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Multiparadigm language&lt;&#x2F;li&gt;
&lt;li&gt;너무 느린 속도로 인해 발표 이후에는 별로 관심을 받지 못했지만, 컴퓨터 하드웨어의 발달로 현재는 매우 널리 쓰이고 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ruby-1995&quot;&gt;Ruby(1995)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;객체 지향 스크립트 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;별로 관심을 받지 못했지만 ROR(Ruby on rails, 웹 페이지를 뚝딱 만들 수 있다)에 의해 널리 사용되었다(현재는 다시 사장되는중)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2606 - 바이러스</title>
		<published>2023-03-20T00:00:00+00:00</published>
		<updated>2023-03-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2606-baireosse/" type="text/html"/>
		<id>https://js970.github.io/2606-baireosse/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 3월 20일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No &lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : DFS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;그래프를 구현하여 상황을 입력받고, 입력받은 상황에 대하여 DFS탐색을 통해 인접한 노드의 수를 구하면 되는 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;아직 Graph및 DFS구현이 서툴러서 많이 틀렸다.&lt;&#x2F;li&gt;
&lt;li&gt;1260번의 DFS코드를 참고했다.
&lt;ul&gt;
&lt;li&gt;DFS의 경우 현제 노드, 인접 리스트, 방문 확인 리스트의 입력을 필요로 한다.&lt;&#x2F;li&gt;
&lt;li&gt;인접 리스트의 경우 1260번과 달리 이중 벡터로 구현했다.&lt;&#x2F;li&gt;
&lt;li&gt;dfs의 recursive 구현이 아닌 반복문을 사용한 구현에 대해 알아보자.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;# include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;# include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adj&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;infected&lt;&#x2F;span&gt;&lt;span&gt;[])
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    infected[node] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; adj[node].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; neighbor = adj[node][i];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!infected[neighbor]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(neighbor, adj, infected);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adj&lt;&#x2F;span&gt;&lt;span&gt;(N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; infected[N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    infected[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a, b;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
&lt;&#x2F;span&gt;&lt;span&gt;        adj[a].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(b);
&lt;&#x2F;span&gt;&lt;span&gt;        adj[b].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(a);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, adj, infected);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(infected[i] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) count++;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;dfs 함수의 스택 구현&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adj&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;infected&lt;&#x2F;span&gt;&lt;span&gt;[])
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    stack&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; s;
&lt;&#x2F;span&gt;&lt;span&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(start);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(!s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; node = s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!infected[node]) {
&lt;&#x2F;span&gt;&lt;span&gt;            infected[node] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; adj[node].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; neighbor = adj[node][i];
&lt;&#x2F;span&gt;&lt;span&gt;                s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(neighbor);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위와 같이 stack을 사용하여 recursive하지 않게 구현할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;1260번의 DFS역시 위와 같이 구현할 수 있었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2606&quot;&gt;2606번: 바이러스&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;js970.github.io&#x2F;1260-dfswa-bfs&#x2F;&quot;&gt;1260번: DFS와 BFS 풀이&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-03-20 수업정리</title>
		<published>2023-03-20T00:00:00+00:00</published>
		<updated>2023-03-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-3-20-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-3-20-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Divide and Conquer - Quicksort&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;divide-and-conquer-quicksort&quot;&gt;Divide and Conquer - Quicksort&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;quicksort-algorithm-kwig-jjeonryeol&quot;&gt;Quicksort Algorithm(퀵 정렬)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;배열은 재귀적으로 두 개의 partition으로 나눠진다.(Divide)
&lt;ul&gt;
&lt;li&gt;배열은 pivot값을 기준으로 pivot값보다 작은 partition, pivot값보다 크거나 같은partition의 두 개의 sub-arrays로 나눠진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;나눠진 두 개의 partition배열에 대해서 정렬이 이루어진다.(Conquer)&lt;&#x2F;li&gt;
&lt;li&gt;Merge Sort와 달리 별도의 메모리 공간을 필요로 하지 않는다.
&lt;ul&gt;
&lt;li&gt;새롭게 배열을 생성하지는 않기 때문&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;worst-case-complexity-of-quicksort&quot;&gt;Worst-case Complexity of Quicksort&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;초기 배열의 원소들이 얼마나 균등하게 분포되어 있는지에 따라 시간복잡도가 다르다. 특히, pivot value에 따라 시간복잡도가 달라진다.&lt;&#x2F;li&gt;
&lt;li&gt;이미 배열이 정렬되어 있지만 이 상태를 모른 채 Quicksort를 수행하는 경우가 가장 많은 연산을 해야 하는 worst-case이다.
&lt;ul&gt;
&lt;li&gt;n개의 원소가 있는 배열에서 comparison연산이 가장 많이 일어나는 경우,  n-1번의 연산과 다시 n-1개의 원소를 가지는 배열에 대한 Quicksort 연산을 거쳐야 한다.
$$T(n) = T(n-1) + (n-1)$$&lt;&#x2F;li&gt;
&lt;li&gt;모든 경우에 대해 위와 같은 최대 연산을 가지게 된다면 아래와 같은 시간복잡도를 가지게 된다.
$$T(n) = \sum^{n}_{k=1}(k-1) \in \Theta(n^2)$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;average-case-time-complexity-of-quicksort&quot;&gt;Average-case time complexity of Quicksort&lt;&#x2F;h3&gt;
&lt;p&gt;n개의 서로 다른 원소를 가지는 배열에서 Mn = total comparison이라고 하자.
$$M_n = \sum_{j=1}^n(n-1 + M_{j-1} + M_{n-j})\frac{1}{n}$$
$$M_n =n-1 + \frac{2}{n}\sum_{k=1}^{n-1}M_k$$
$$nM_n = n(n-1)+2\sum_{k=1}^{n-1}\ \ ...\ (1)$$
이렇게 얻어진 식의 n에 n+1을 대입하면$$(n+1)M_{n+1} = n(n+1) + 2\sum_{k=1}^{n}M_k\ \ \ ...\ (2)$$(2) - (1)을 하면$$(n+1)M_{n+1} = (n+2)M_n+2n$$$$\frac{M_{n+1}}{n+2} = \frac{M_n}{n+1}+\frac{2n}{(n+1)(n+2)}$$
$$\frac{M_{n+1}}{n+2} = \frac{M_{n-1}}{n} + \frac{2(n-1)}{n(n+1)} +\frac{2n}{(n+1)(n+2)} = 2 \sum_{k=0}^{n-1}\frac{n-k}{(n+1-k)(n+2-k)}$$
n-k를 i로 치환하면$$M_{n+1} = 2(n+2)\sum_{k=0}^{n-1}\frac{n-k}{(n+1-k)(n+2-k)} = 2(n+2)\sum_{i=1}^{n}\frac{i}{(i+1)(i+2)}$$
부분분수로 분리하면$$M_{n+1} = 2(n+2)\sum_{i=1}^n[\frac{2}{i+2}-\frac{1}{i+1}]$$
Average-case에 대해 Time complexity를 고려중이다. 분포는 균일분포이며, 이때의 평균값을 Average-case라 말할 수 있으므로 정적분을 취해 계산을 이어갈 수 있다.$$M_{n+1} = 2(n+2)[\int_3^{n+2}\frac{2}{x}dx - \int_2^{n+1}\frac{1}{x}dx] = 2(n+2)[2log(n+2) - log(n+1) + log2 - 2log3]$$
$$M_{n+1} = 2(n+2)[log(n+2) + log(\frac{n+2}{n+1}) + log2 - 2log3]$$&lt;&#x2F;p&gt;
&lt;p&gt;따라서 Quicksort Algorithm의 Average-Case Time Complexity는 다음과 깉이 말할 수 있다.
$$M_n \in \Theta(nlogn)$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementataion&quot;&gt;Implementataion&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;다음은 quicksort algorithm의 c++ 구현이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;C++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-C++ &quot;&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;partition&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;[], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pivot&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pivotIndex = first++;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(first &amp;lt;= last)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[first] &amp;gt; pivot &amp;amp;&amp;amp; arr[last] &amp;lt;= pivot)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; tmp = arr[first];
&lt;&#x2F;span&gt;&lt;span&gt;            arr[first] = arr[last];
&lt;&#x2F;span&gt;&lt;span&gt;            arr[last] = tmp;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[first] &amp;lt;= pivot) first++;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[last] &amp;gt; pivot) last--;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; last;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;quickSort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;[], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(first &amp;lt; last)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pivot = arr[first];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; splitPoint = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;partition&lt;&#x2F;span&gt;&lt;span&gt;(arr, pivot, first, last);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        arr[first] = arr[splitPoint];
&lt;&#x2F;span&gt;&lt;span&gt;        arr[splitPoint] = pivot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;quickSort&lt;&#x2F;span&gt;&lt;span&gt;(arr, first, splitPoint-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;quickSort&lt;&#x2F;span&gt;&lt;span&gt;(arr, splitPoint+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, last);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arrSize; cin &amp;gt;&amp;gt; arrSize;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[arrSize];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; arrSize; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arr[i];
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;quickSort&lt;&#x2F;span&gt;&lt;span&gt;(arr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, arrSize-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; arrSize; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-03-20 수업정리</title>
		<published>2023-03-20T00:00:00+00:00</published>
		<updated>2023-03-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-3-20-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-3-20-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring (3)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;refactoring-example&quot;&gt;Refactoring Example&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;original-uml&quot;&gt;Original UML&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;uml_original.png&quot; alt=&quot;Original UML&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;refactoring-uml-step2&quot;&gt;Refactoring UML ~Step2&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;uml_step2.png&quot; alt=&quot;uml step2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;template-method-patterniran&quot;&gt;Template Method Pattern이란?&lt;&#x2F;h3&gt;
&lt;p&gt;Common Code가 존재하는 서로 다른 두 클래스 간에서, Common Code부분을 template method로 superclass에 구현한다. 서로 다른 구현부는 superclass 에서 abstract method로 남겨둔 뒤 subclass에서 override를 통해 구체적인 구현을 수행한다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step3&quot;&gt;Step3&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Common Code를 찾아서 Template Method Pattern 을 적용시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;본 코드에서는 TextStatement와 HTMLStatement method에서 Common Code가 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 두 method를 Statement Class를 superclass로 가지는 각각의 subclass로 구현한 UML이다.
&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;uml_step3.png&quot; alt=&quot;step3&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-03-20 수업정리</title>
		<published>2023-03-20T00:00:00+00:00</published>
		<updated>2023-03-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-3-20-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-3-20-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Process
&lt;ul&gt;
&lt;li&gt;creation&lt;&#x2F;li&gt;
&lt;li&gt;hierarchy&lt;&#x2F;li&gt;
&lt;li&gt;termination&lt;&#x2F;li&gt;
&lt;li&gt;state&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Implementing Process&lt;&#x2F;li&gt;
&lt;li&gt;Context Switch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;process&quot;&gt;Process&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;peurosesseran&quot;&gt;프로세스란?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;process_in_memory.png&quot; alt=&quot;process in memory&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Program in execution, 즉 실행 중인 프로그램을 프로세스라고 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스는 아래를 포함한다.
&lt;ul&gt;
&lt;li&gt;CPU contexts(registers) -&amp;gt; 연산상태 저장&lt;&#x2F;li&gt;
&lt;li&gt;Program Counter, Stack Pointer -&amp;gt; 프로그램 실행 정보&lt;&#x2F;li&gt;
&lt;li&gt;OS resources(주소 공간, 파일 포인터 등)&lt;&#x2F;li&gt;
&lt;li&gt;Other informations(PID, state, owner, etc.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;time-shared system에서 보안의 기본 단위가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스는 유일한 프로세스 식별 넘버인 PID를 통해 식별된다.&lt;&#x2F;li&gt;
&lt;li&gt;한 개의 프로그램은 여러 개의 프로세스로 이루어질 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스는 아래와 같이 분류될 수 있다.
&lt;ul&gt;
&lt;li&gt;I&#x2F;O-bound process : read&#x2F;write에서 많은 시간을 소요, disk에서의 데이터 처리 속도에 더 많은영향을 받는 프로세스.(system I&#x2F;O의 속도에 영향을 받는다.)&lt;&#x2F;li&gt;
&lt;li&gt;CPU-bound process : 행렬 곱셈 연산 등 CPU의 처리 속도에 더 많은 영향을 받는 프로세스&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;peurosesse-ssaensseon&quot;&gt;프로세스 생성&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 생성 과정
&lt;ol&gt;
&lt;li&gt;프로그램을 코드 영역에서 메모리 및 프로세스 주소 공간으로 load한다.
&lt;ul&gt;
&lt;li&gt;프로그램은 실행 가능한 형태로 디스크 드라이브에 저장되어 있다.&lt;&#x2F;li&gt;
&lt;li&gt;OS는 현재 시점에서 필요한 것들만 &lt;code&gt;lazily&lt;&#x2F;code&gt; 하게 메모리로 load한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로그램의 run time stack을 할당한다.
&lt;ul&gt;
&lt;li&gt;stack영역에는 아래와 같은 값들이 저장된다.
&lt;ul&gt;
&lt;li&gt;local variables&lt;&#x2F;li&gt;
&lt;li&gt;function parameters&lt;&#x2F;li&gt;
&lt;li&gt;return address&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 heap을 생성한다.
&lt;ul&gt;
&lt;li&gt;heap에는 명시적으로 동적 할당되어 사용되는 데이터들이 저장된다.&lt;&#x2F;li&gt;
&lt;li&gt;C언어에서는 malloc()을 호출하여 공간을 할당하고 free()를 호출하여 공간을 해제할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;OS는 위에서 언급한 것 이외의 초기화 동작을 수행한다.
&lt;ul&gt;
&lt;li&gt;Input&#x2F;Output setup - 프로세스는 기본적으로 세 개의 open file descriptor를 가진다.
&lt;ul&gt;
&lt;li&gt;standard input, output, error&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로그램의 시작 지점(entry point, main())에서부터 프로그램을 실행한다.
&lt;ul&gt;
&lt;li&gt;OS는 CPU점유를 새롭게 생성된 프로세스로 넘겨준다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;fork()
&lt;ul&gt;
&lt;li&gt;프로세스를 생성하는 system call이다. 부모 프로세스를 복제한다.&lt;&#x2F;li&gt;
&lt;li&gt;부모 프로세스는 대부분의 자원 및 privileges를 공유한다.(open files, UID, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;자식 프로세스는 부모 프로세스의 주소 공간도 복제한다.&lt;&#x2F;li&gt;
&lt;li&gt;부모 프로세스는 wait()을 이용하여 자식 프로세스의 수행이 끝날 때까지 대기할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;wait()을 사용하지 않았다면 자식 프로세스와 부모 프로세스는 병렬 수행된다.&lt;&#x2F;li&gt;
&lt;li&gt;Shell 또는 GUI는 이 system call을 자체적으로 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;exec()
&lt;ul&gt;
&lt;li&gt;현재 프로세스를 새로운 프로그램으로 교체한다.(system call 호출 즉시 자원을 점유한다.)&lt;&#x2F;li&gt;
&lt;li&gt;Windows 운영체제 에서는 CreateProcess() system call이 fork() + exec() 동작을 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;peurosesse-ggyceung-gujo&quot;&gt;프로세스 계층 구조&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래는 유닉스 환경에서 프로세스의 계층 구조를 쉽게 이해하기 위한 도식이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; file1 | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;hierarchy.png&quot; alt=&quot;process hierarchy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;shell이 parent process 이고 shell에서 실행된 cat, wc는 child process이다.&lt;&#x2F;li&gt;
&lt;li&gt;Unix에서는 이러한 계층 구조를 &lt;code&gt;process group&lt;&#x2F;code&gt;이라고 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Windows에서는 이러한 계층 구조 개념이 존재하지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;peurosesse-jjonryo&quot;&gt;프로세스 종료&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Normal exit(voluntary) : 할 일을 모두 수행하고 return하여 프로세스를 종료하는 경우&lt;&#x2F;li&gt;
&lt;li&gt;Error exit(voluntary) : error가 발생하여 프로세스를 종료하는 경우&lt;&#x2F;li&gt;
&lt;li&gt;Fatal error(involuntary) : operating system 규칙 윙반, 권한 침범으로 인한 kill process
&lt;ul&gt;
&lt;li&gt;Segmentation fault&lt;&#x2F;li&gt;
&lt;li&gt;Protection fault&lt;&#x2F;li&gt;
&lt;li&gt;Exceed allocated resources, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Killed by another process(involuntary) : 특정 신호 수신 등 다른 프로세스를 통해 프로세스가 종료되는 경우
&lt;ul&gt;
&lt;li&gt;Ctrl + C&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Zombie process : 프로세스는 종료되었지만 제거되지 않은 상태&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;peurosesse-state&quot;&gt;프로세스 state&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;process_state.png&quot; alt=&quot;process states&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;New : 프로세스가 생성되는 상태, fork()로 인해 새롭게 프로세스가 생성되는 것을 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Running : 프로그램의 명령어들이 실행되고 있는 상태, exec()를 통해 프로세스가 CPU를 점유한 상태를 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Waiting : 프로세스가 어떠한 이벤트를 기다리고 있는 상태, wait()에 의해 부모 프로세스가 자식 프로세스의 종료를 기다리는 상황을 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Ready : 프로세스가 프로세서 자원을 할당받기를 대기하는 상태, OS에 의해 실행될 때까지 대기하는 상태이다.&lt;&#x2F;li&gt;
&lt;li&gt;Terminated : 프로세스가 실행을 종료한 상태이다. exit()에 의해 프로세스 종료가 일어난 상황을 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementing-process&quot;&gt;Implementing Process&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 구현은 PCB(Process Control Block)자료 구조를 통해 이뤄진다.&lt;&#x2F;li&gt;
&lt;li&gt;PCB는 TCB라고도 불린다(Task Control Block)&lt;&#x2F;li&gt;
&lt;li&gt;아래는 TCB를 간단하게 설명하는 그림이다.
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;tcb.png&quot; alt=&quot;tcb&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;대략적으로 아래와 같은 정보들이 TCB자료 구조에 저장되어 프로세스 상태를 나타낸다.
&lt;ul&gt;
&lt;li&gt;Process state : running, waiting 등 process state정보를 저장&lt;&#x2F;li&gt;
&lt;li&gt;Program Counter : 다음 실행될 명령어의 위치 저장&lt;&#x2F;li&gt;
&lt;li&gt;CPU register : 연산 상태를 저장하는 CPU 레지스터&lt;&#x2F;li&gt;
&lt;li&gt;CPU scheduling informations : 우선순위 및 scheduling queue pointers&lt;&#x2F;li&gt;
&lt;li&gt;Memory management information : CPU used, clock time elapsed since start, etc.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x2F;O status&lt;&#x2F;li&gt;
&lt;li&gt;etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;TCB는 프로세스 마다 다를 수 있는 거의 모든 정보들을 저장하고 있다고 생각하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;Linux 3.2.0기준으로 TCB는 task_struct 로 구현되었으며 이 구조체의 크기는 3248바이트로 굉장히 큰 크기를 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;context-switch&quot;&gt;Context Switch&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;CPU의 프로세스에서 다른 프로세스로 CPU의 점유를 넘기는 것&lt;&#x2F;li&gt;
&lt;li&gt;일반적으로 CPU에서는 초당 100 ~ 1000 회의 context switch가 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;필연적으로 overhead가 발생한다. context switch횟수를 줄일 수록 성능 향상이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 context switch 간에 overhead가 발생하는 이유를 설명하는 도식이다.
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;context_switching.png&quot; alt=&quot;context switch&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-16 수업정리</title>
		<published>2023-03-16T00:00:00+00:00</published>
		<updated>2023-03-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-3-16-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-3-16-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;IAL(ALGOL)(1958)&lt;&#x2F;li&gt;
&lt;li&gt;COBOL(1960)&lt;&#x2F;li&gt;
&lt;li&gt;APL(1962), SNOBOL(1962)&lt;&#x2F;li&gt;
&lt;li&gt;PL&#x2F;I(1964), C(1972)&lt;&#x2F;li&gt;
&lt;li&gt;BASIC(1964)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ial-algol-1958&quot;&gt;IAL(ALGOL)(1958)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;ial&quot;&gt;IAL&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;International Algorithmic Language&lt;&#x2F;li&gt;
&lt;li&gt;FORTRAN을 만든 사람인 John Backus등 유럽과 미국의 여러 사람들의 합작으로 만들어졌다.&lt;&#x2F;li&gt;
&lt;li&gt;이 언어의 탄생 배경은 당시 사용되던 FORTRAN이 IBM 타겟 머신에서만 동작하였고, 이에 알고리즘 기술용 언어로 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;출판, 논문, 발표 등에 사용되었다.&lt;&#x2F;li&gt;
&lt;li&gt;기계어로 바꿀 수 있었다.(mechanically translatable into machine languages)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;heoeojjeo-teugjjin-algol-58&quot;&gt;언어적 특징(ALGOL 58)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;정형화된 &lt;code&gt;type&lt;&#x2F;code&gt; 개념을 사용하였다.(mode)&lt;&#x2F;li&gt;
&lt;li&gt;식별자의 가변 길이를 지원했다.&lt;&#x2F;li&gt;
&lt;li&gt;입력 파라미터와 출력 파라미터를 구분했다.&lt;&#x2F;li&gt;
&lt;li&gt;compund statement(start ... end) -&amp;gt; 블록&lt;&#x2F;li&gt;
&lt;li&gt;조건 분기문에 else if 구문이 추가되었다.&lt;&#x2F;li&gt;
&lt;li&gt;따로 I&#x2F;O가 존재하지 않았다. 컴파일러 구현이 힘들어질 것이라고 생각하여 machine dependent하게 설계하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;heoeojjeo-teugjjin-algol-60&quot;&gt;언어적 특징(ALGOL 60)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;BNF(Backus - Naur - Form)의 구문 표기법을 채택했다.&lt;&#x2F;li&gt;
&lt;li&gt;compund statement -&amp;gt; block statement(local scope)&lt;&#x2F;li&gt;
&lt;li&gt;pass by name, pass by value의 인자 전달 방식을 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;재귀 프로시저, stck-dynamic array를 지원했다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 여전히 따로 I&#x2F;O는 존재하지 않으며, String handling이 없었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;BNF 방식의 채택&lt;&#x2F;li&gt;
&lt;li&gt;첫 번째 machine-independent language&lt;&#x2F;li&gt;
&lt;li&gt;복합문, 블록 구조를 처음으로 제안했다.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x2F;O operation이 없어서 이식성이 떨어졌다.&lt;&#x2F;li&gt;
&lt;li&gt;call by name방식 등 너무 flexible한 특징이 많아서 가독성이 좋지 않았다.&lt;&#x2F;li&gt;
&lt;li&gt;널리 사용되지는 않았다(FORTRAN이 있어서...)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cobol-1960&quot;&gt;COBOL(1960)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Business Computing Environment로 개발되었다(common businiess oriented language).&lt;&#x2F;li&gt;
&lt;li&gt;IBM에서는 동일한 목적으로 COMTRAN을 설계했었다.&lt;&#x2F;li&gt;
&lt;li&gt;사무용으로 미 해군에 의해 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;60년대에 발표되었으나 50년대에 개발했으므로 BIG-4에 포함된다.&lt;&#x2F;li&gt;
&lt;li&gt;FLOW-MATIC에 기반했다.
&lt;ul&gt;
&lt;li&gt;FLOW-MATIC(on UNIVAC)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;heoeojjeo-teugjjin&quot;&gt;언어적 특징&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;수학 연산자로 영문 이름을 사용했다(ADD, SUB ...)&lt;&#x2F;li&gt;
&lt;li&gt;Data부분과 Code부분이 완전히 분리되었다.&lt;&#x2F;li&gt;
&lt;li&gt;모든 선언(statement)은 동사로 시작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;design-goal&quot;&gt;Design Goal&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;최대한 간단한 영어와 비슷하게(자연어와 비슷하게) 보이게 만들었다.&lt;&#x2F;li&gt;
&lt;li&gt;덜 효율적이더라도 더 사용하기 쉽게 만들었다.&lt;&#x2F;li&gt;
&lt;li&gt;Must not be biased by implementation problems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga-1&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;High-level language에서 macro의 개념을 처음으로 제시했다.&lt;&#x2F;li&gt;
&lt;li&gt;계층적 자료 구조가 처음으로 구현되었다.(구조체 -&amp;gt; record)&lt;&#x2F;li&gt;
&lt;li&gt;30자 이상의 긴 이름을 지원했다.&lt;&#x2F;li&gt;
&lt;li&gt;데이터 분할 및 파일 레코드에 대한 강력한 지원을 했다.&lt;&#x2F;li&gt;
&lt;li&gt;여전히 lagacy code로 널리 사용중이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;apl-1962-snobol-1962&quot;&gt;APL(1962), SNOBOL(1962)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;apl&quot;&gt;APL&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A Programming Language&lt;&#x2F;li&gt;
&lt;li&gt;Matrix, Array 연산에 강했다.&lt;&#x2F;li&gt;
&lt;li&gt;초기에는 HDL(Hardware Description Language)로 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;Writability는 좋은데 readability는 좋지 않았다.(프로그램 가독성이 많이 떨어졌다)&lt;&#x2F;li&gt;
&lt;li&gt;후속인 APL2는 1984년에 IBM에서 개발되었으며, 2021susdp Log-On Software로 소유권이 매각되었다. 현재는 채험판만 무료로 사용 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;snobol&quot;&gt;SNOBOL&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;StriNg Oriented and symBOlic Language&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;string manipulation language로 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;string pattern matching을 위한 강력한 operation을 제공한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 언어에서 유래한 SNOWBOL이라는 언어도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;basic-1964&quot;&gt;BASIC(1964)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;non-science student도 배우기 쉽고, 사용하기 쉽게 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;pleasant and friendly&amp;quot;하게 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;과제 등의 제출을 위해 결과물이 빠르게 나오도록 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;무료이다.&lt;&#x2F;li&gt;
&lt;li&gt;User time이 Computer time보다 중요하게 여겼다.
&lt;ul&gt;
&lt;li&gt;이전의 패러다임에서는 computer time이 더 중요하게 여겨졌다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga-2&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;time-sharing environment개념을 도입한 첫 번째 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;코드가 거의 기계어 수준이었다.(structure of the program is very poor)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;apple-ii-emulator-for-windows-reul-stuchan-basic-programming-ceheom&quot;&gt;APPLE II Emulator(for Windows) 를 통한 BASIC Programming 체험&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;result.png&quot; alt=&quot;BASIC code&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;result2.png&quot; alt=&quot;result&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pl-i-1964&quot;&gt;PL&#x2F;I(1964)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;1964년 당시 기준으로 Scientific Computing -&amp;gt; IBM1620, 7090을 target machine 으로 FORTRAN으로 작업했다.(user group : SHARE)&lt;&#x2F;li&gt;
&lt;li&gt;Business Computer영역에서는 IBM1401, 7080을 target machine으로 COBOL이 사용되었다.(user group : GUIDE)&lt;&#x2F;li&gt;
&lt;li&gt;이러한 상황 속에서 새로운 Universal Computing Environment가 필요했다.(Scienticif, Business 특화가 아닌 Universal)
&lt;ul&gt;
&lt;li&gt;a new computer to support both kinds of applications&lt;&#x2F;li&gt;
&lt;li&gt;a new language to support both kinds of applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga-3&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;동시 작업의 지원(concurrent tasks)&lt;&#x2F;li&gt;
&lt;li&gt;예외 처리 지원(exception handling)&lt;&#x2F;li&gt;
&lt;li&gt;재귀 프로시저 지원(ALGOL에서도 사용되었다.)&lt;&#x2F;li&gt;
&lt;li&gt;pointer data type사용&lt;&#x2F;li&gt;
&lt;li&gt;배열의 cross section 을 지원했다.
&lt;ul&gt;
&lt;li&gt;A(*, I) , B(*, 2, *) 와 같은 표현으로 배열 자르기를 지원했다&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;너무 크고 너무 복잡했다.&lt;&#x2F;li&gt;
&lt;li&gt;실제로 scientific, business분야에서 다 사용되기는 했으므로 부분적인 성공(?) 으로 보기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;c-1972&quot;&gt;C(1972)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Dennis Ritchie에 의해 Bell연구소에서 1972년 개발되었다.&lt;&#x2F;li&gt;
&lt;li&gt;시스템 프로그래밍을 위해 개발되었다(UNIX)&lt;&#x2F;li&gt;
&lt;li&gt;B언어에 기반하여 설계되었다.&lt;&#x2F;li&gt;
&lt;li&gt;ALGOL 68, BCPL의 영향을 받은 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;이후 글에서 다시 다룬다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pyeongga-4&quot;&gt;평가&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;complete type checking이 부족했다&lt;&#x2F;li&gt;
&lt;li&gt;Flexible&lt;&#x2F;li&gt;
&lt;li&gt;UNIX를 통해 광범위하게 사용되었다&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-03-15 수업정리</title>
		<published>2023-03-15T00:00:00+00:00</published>
		<updated>2023-03-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-3-15-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-3-15-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Divide and Conquer - Binary Search&lt;&#x2F;li&gt;
&lt;li&gt;Divide and Conquer - Merge Sort&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;divide-and-conquer-binary-search&quot;&gt;Divide and Conquer - Binary Search&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;binary-search-ijji-tatssae&quot;&gt;Binary Search(이진 탐색)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;오름차순으로 정렬된 크기 n의 배열에 찾고자 하는 key값 x의 위치를 특정한다.&lt;&#x2F;li&gt;
&lt;li&gt;항상 중간값과 비교하여 x값이 중간값이라면 그 값의 index를 반환하고&lt;&#x2F;li&gt;
&lt;li&gt;key 값이 중간값보다 작다면 중간값 기준 왼쪽의 subarray에 대하여 Binary Search, key값이 중간값보다 크다면 중간값 기준 오른쪽의 subarray에 대하여 Binary Search를  수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;각 subarray로 Divide한 후 중간값에 대해 비교함으로써 Conquer하는 Divide and Conquer의 예시이다.&lt;&#x2F;li&gt;
&lt;li&gt;recursive code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinarySearch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; A[], key, low, high)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(high &amp;lt; low) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; mid = (low + high) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(A[mid] &amp;gt; key) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinarySearch&lt;&#x2F;span&gt;&lt;span&gt;(A, key, low, mid-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(A[mid] &amp;lt; key) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinarySearch&lt;&#x2F;span&gt;&lt;span&gt;(A, key, mid+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, high);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else return&lt;&#x2F;span&gt;&lt;span&gt; mid;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Iterative code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BinarySearch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; A[], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; size, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; key)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; low = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; high = size-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(low &amp;lt;= high)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		mid = (low + high) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(A[mid] &amp;gt; key) high = mid - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(A[mid] &amp;lt; key) low = mid + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else return&lt;&#x2F;span&gt;&lt;span&gt; mid;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;worst-case-complexity-of-binary-search&quot;&gt;Worst-Case Complexity of Binary Search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Binary Search에서의 주 연산은 comparison이다.&lt;&#x2F;li&gt;
&lt;li&gt;가장 comparison이 많이 일어나는 경우는 key값이 존재하지 않아 low &amp;lt;= high일 때 까지 연산을 반복하는 경우이다.&lt;&#x2F;li&gt;
&lt;li&gt;n개의 원소를 가진 배열에 대한 complexity를 $T(n)$ 이라고 하자. 이때 Binary Search에서는 1보다 큰 모든 2의 제곱수 n에 대하여 아래와 같은 식이 성립한다.
$$T(n) = T(n&#x2F;2) + 1$$&lt;&#x2F;li&gt;
&lt;li&gt;따라서 1보다 큰 모든 2의 제곱수 n에 대하여 $T(n)$ 의 Worst-Case complexity는 아래와 같다.
$$T(n) = log_2(n) + 1$$&lt;&#x2F;li&gt;
&lt;li&gt;n이 2의 제곱수가 아닌 1보다 큰 수라면 아래와 같은 식으로 complexity를 표현할 수 있다.
$$T(n) = \lfloor log_2(n) \rfloor + 1 \in \Theta(log_2(n))$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;divide-and-conquer-merge-sort&quot;&gt;Divide and Conquer - Merge Sort&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;merge-sort-bbyeonhab-jjeoryeol&quot;&gt;Merge Sort(병합 절렬)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;크기 n의 배열 S를 정렬하는 알고리즘이다.&lt;&#x2F;li&gt;
&lt;li&gt;배열 S를 n&#x2F;2크기의 subarray로 Divide한다.&lt;&#x2F;li&gt;
&lt;li&gt;각 subarray들이 크기 1의 배열이 될때까지 반복한다.&lt;&#x2F;li&gt;
&lt;li&gt;두 개의 subarray를 크기순으로 merge하여 하나의 정렬된 array로 만든다.&lt;&#x2F;li&gt;
&lt;li&gt;말 그대로 배열을 Divide하고, divide된 배열에 대해 하나씩 merge(conquer)한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Merge Sort 과정을 나타낸 그림이다.
&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;mergesort.png&quot; alt=&quot;merge sort&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;병합(merge)과정에 대해 자세히 살펴보면 아래와 같다.
&lt;ul&gt;
&lt;li&gt;각 subarray는 이미 크기 순으로 정렬되어 있으므로 왼쪽에서 오른쪽으로 index가 이동할수록 점점 큰 값을 가지게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;subarray - A의 첫 번째 원소와 subarray - B의 첫 번째 원소를 비교하여 더 작은 값을 새로운 merge array의 첫 번째 원소로 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;A, B중 원소가 선택된 subarray는 index를 증가시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;다시 A, B의 index가 가리키는 값을 비교하여 merge array의 다음 원소로 설정한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 과정을 반복하여 크기가 n인 배열에 대해 총 $\lfloor log_2(n) \rfloor$ 번의 divide과정과 merge과정에서 발생하는 n-1번의 comparison과정을 통해 배열이 정렬된다. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;worst-case-complexity-of-merge-sort&quot;&gt;Worst-Case Complexity of Merge Sort&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;병합 정렬은 배열을 두 개로 나누었을 때 두 배열을 정렬하는 과정과, 두 배열을 merge하는 과정으로 나뉘어진다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 병합 정렬의 complexity를 $T(n)$이라고 할 때 아래와 같은 식이 성립한다. h와 m은 n개 원소를 가진 배열을 각각 h개와 m개의 원소로 가진 배열로 나누었다는 뜻이다.
$$T(n) = T(h) + T(m) + (h + m - 1)$$&lt;&#x2F;li&gt;
&lt;li&gt;따라서 1보다 큰 2의 제곱수 n에 대해서 아래와 같은 수식이 유도된다.
$$T(n) = 2T(n&#x2F;2) + (n-1)$$&lt;&#x2F;li&gt;
&lt;li&gt;위의 수식을 바탕으로 T(n)의 시간복잡도에 대해서 아래와 같이 말할 수 있다.
$$T(n) = nlog_{2}n - (n-1) \in \Theta(nlog_2n)$$&lt;&#x2F;li&gt;
&lt;li&gt;n이 2의 제곱수가 아니라고 한다면 아래와 같다.
$$T(n) = T(\lfloor n&#x2F;2 \rfloor) + T(\lceil n&#x2F;2 \rceil) + (n-1)$$&lt;&#x2F;li&gt;
&lt;li&gt;따라서 일반적으로 아래와 같은 시간복잡도를 가지게 된다.
$$T(n) = n\lceil log_2n \rceil \in \Theta(nlog_2n)$$&lt;&#x2F;li&gt;
&lt;li&gt;증명 과정은 아래와 같다.
$$n_1 = \lfloor n&#x2F;2\rfloor, \ \ n_2 = \lceil n&#x2F;2 \rceil$$
$$T(n) \leq T(n_1) + T(n_2) + n$$
$$\leq n1\lceil log_2n_1\rceil + n_2\lceil log_2n_2\rceil + n$$
$$\leq n1\lceil log_2n_2\rceil + n_2\lceil log_2n_2\rceil + n$$
$$= n\lceil log_2n_2\rceil + n$$
$$\leq n(\lceil log_2n\rceil - 1) + n \ \ \ (log_2n_2 \leq \lceil log_2n\rceil -1)$$
$$ = n\lceil log_2n\rceil$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-03-15 수업정리</title>
		<published>2023-03-15T00:00:00+00:00</published>
		<updated>2023-03-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-3-15-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-3-15-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring (2)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;refactoring-example&quot;&gt;Refactoring Example&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;아래의 UML과 코드들은 리펙토링을 하기 이전의 원본 상태이다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;original-uml&quot;&gt;Original UML&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;uml_original.png&quot; alt=&quot;Original UML&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;original-code-run&quot;&gt;Original Code - Run&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Customer&lt;&#x2F;span&gt;&lt;span&gt; customer1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Customer&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;David&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt; movie1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Madagascar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CHILDRENS&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span&gt; rental1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span&gt;(movie1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt; movie2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Star Wars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NEW_RELEASE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span&gt; rental2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span&gt;(movie2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt; movie3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Gone with the Wind&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;REGULAR&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span&gt; rental3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span&gt;(movie3, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;customer1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addRental&lt;&#x2F;span&gt;&lt;span&gt;(rental1);
&lt;&#x2F;span&gt;&lt;span&gt;customer1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addRental&lt;&#x2F;span&gt;&lt;span&gt;(rental2);
&lt;&#x2F;span&gt;&lt;span&gt;customer1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addRental&lt;&#x2F;span&gt;&lt;span&gt;(rental3);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(customer1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;statement&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;output&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Rental Record for David
&lt;&#x2F;span&gt;&lt;span&gt;	Madagascar 6.0
&lt;&#x2F;span&gt;&lt;span&gt;	Star Wars 6.0
&lt;&#x2F;span&gt;&lt;span&gt;	Gone with the Wind 11.0
&lt;&#x2F;span&gt;&lt;span&gt;Amount owed is 23.0
&lt;&#x2F;span&gt;&lt;span&gt;You earned 4 frequent renter points
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;original-code-class-movie&quot;&gt;Original Code - class Movie&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;CHILDREN &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;REGULAR &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;NEW_RELEASE &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;_title;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;_priceCode;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;priceCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		_title &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; title;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		_priceCode &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; priceCode;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getPriceCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; _priceCode; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setPriceCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) { _priceCode &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; arg; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getTitle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; _title; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;original-code-class-rental&quot;&gt;Original Code - class Rental&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;_movie;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;_daysRented;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;daysRented&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		_movie &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; movie;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		_daysRented &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; daysRented;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getDaysRented&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; _daysRented; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; _movie; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;original-code-class-customer&quot;&gt;Original Code - class Customer&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Customer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;_name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; _rentals &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Customer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) { _name &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; name; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;addRental&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) { _rentals.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(arg); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; _name; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;statement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; totalAmount &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rental Record for &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rental&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; each&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; _rentals) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; thisAmount &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriceCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Moviie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;REGULAR&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					thisAmount &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDaysRented&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;						thisAmount &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDaysRented&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NEW_RELEASE&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					thisAmount &lt;&#x2F;span&gt;&lt;span&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDaysRented&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CHILDREN&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					thisAmount &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDaysRented&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;						thisAmount &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDaysRented&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			frequentRenterPoints&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;((each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPriceCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Movie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NEW_RELEASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDaysRented&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;				frequentRenterPoints&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			result &lt;&#x2F;span&gt;&lt;span&gt;+= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; each.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getMovie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getTitle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(thisAmount) &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			totalAmount &lt;&#x2F;span&gt;&lt;span&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; thisAmount;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		result &lt;&#x2F;span&gt;&lt;span&gt;+= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Amount owed is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(totalAmount) &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		result &lt;&#x2F;span&gt;&lt;span&gt;+= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You earned &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(frequentRenterPoints) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; frequent renter points&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; result;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;munjejjeoddeugwa-haeggyeo-bbanbbeo&quot;&gt;문제점들과 해결 방법&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래와 같은 상황에서 위의 코드는 OCP를 위반한다.
&lt;ul&gt;
&lt;li&gt;사용자가 출력 방식을 HTML형태로 출력하기를 원한다.&lt;&#x2F;li&gt;
&lt;li&gt;요금 규정이 변경된다.&lt;&#x2F;li&gt;
&lt;li&gt;새로운 영화 카테고리가 추가된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;원인은 아래와 같다.
&lt;ul&gt;
&lt;li&gt;Business Code와 UI Code가 섞여 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Business Code와 UI Code가 독립적으로 너무 자주 변경된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;해결 방법
&lt;ul&gt;
&lt;li&gt;긴 method(statemeent())를 작은 method로 쪼갠다. 이렇게 하여 전체 method가 늘어나면 SRP를 위반할 확률이 낮아진다.
&lt;ul&gt;
&lt;li&gt;SRP : Single ResponsibilityPrinciple, 변경의 원인은 하나여야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 위해 UI, Control, Entity Class를 나누어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;클래스 추가, 추상 클래스 생성을 통하여 OCP를 충족하도록 설계한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;step1-uml&quot;&gt;Step1 - UML&lt;&#x2F;h3&gt;
&lt;p&gt;Statement method의 implementation을 여러 별개의 method로 extract method한다. 이 과정에서 다른 클래스의 feature를 더 많이 사용한다면 Move method 한다.
&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;uml_step1.png&quot; alt=&quot;uml step1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step2-uml&quot;&gt;Step2 - UML&lt;&#x2F;h3&gt;
&lt;p&gt;새로운 클래스를 추상 클래스 형태로 추가하여 Polymorphism을 통해 OCP를 만족시키도록 설계한다. step1에서 다른 class의 feature를 더 많이 사용하여 이동된 method를 확인할 수 있다.
&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;uml_step2.png&quot; alt=&quot;uml step2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-03-15 수업정리</title>
		<published>2023-03-15T00:00:00+00:00</published>
		<updated>2023-03-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-3-15-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-3-15-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;System Call&lt;&#x2F;li&gt;
&lt;li&gt;Operating System Structure&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;system-call&quot;&gt;System Call&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;operating-system-services&quot;&gt;Operating-System Services&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;os_service.png&quot; alt=&quot;Operating System Services&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User mode에서 실행되는 프로그램이 자원 할당, 처리 요청 등 Kernel의 서비스를 이용할 경우 System Call을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;User mode에서의 요청인 System Call이 발생하면 운영 체제는 이를 처리해 준다.&lt;&#x2F;li&gt;
&lt;li&gt;당연하지만 운영체제마다 제공하는 System Call API는 모두 다르다.
&lt;ul&gt;
&lt;li&gt;같은 역할을 하더라도 이름이나 구현 등에 차이가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;API를 사용하는 이유는 항상 System Call을 호출하는 것을 현실적으로 어려우며, API를 사용함으로써 운영 체제만 같다면 hardward-independent하게 동작하여 이식성을 높일 수 있기 때문이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;system-call-ddonjja&quot;&gt;System Call 동작&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;system call이 호출되면, 이에 대응하는 system call number의 interrupt vector가 호출된다.
&lt;ul&gt;
&lt;li&gt;함수명을 넘겨주는 과정이다.&lt;&#x2F;li&gt;
&lt;li&gt;system call table을 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;linux에서는 eax레지스터를 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;system call 함수에서 사용될 parameter값들을 전달한다.
&lt;ul&gt;
&lt;li&gt;파라미터를 넘겨주는 과정은 아래와 같은 세 가지 방법으로 구현 가능하다.
&lt;ul&gt;
&lt;li&gt;레지스터를 통한 파라미터 값의 직접 전달&lt;&#x2F;li&gt;
&lt;li&gt;레지스터를 통한 메모리 주소값 전달&lt;&#x2F;li&gt;
&lt;li&gt;Stack을 사용한 파라미터 전달&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;linux에서 레지스터를 사용하는 경우 ebx, ecx등 레지스터를 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;interrupt vector는 system call이 수행해야 할 실제 구현부에 접근한다.
&lt;ul&gt;
&lt;li&gt;body라고 하며, 이 부분에서 전달받은 파라미터를 이용하여 결과값을 계산한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;결과값을 system call을 호출한 영역으로 return한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;system-call-implementation&quot;&gt;System Call Implementation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;동작 과정에서 확인할 수 있는 것처럼 아래와 같은 절차를 거쳐 System Call을 등록할 수 있다.
&lt;ol&gt;
&lt;li&gt;System Call Function 정의
&lt;ul&gt;
&lt;li&gt;System Call의 body를 구현하는 과정에 해당한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;인터럽트 벡터 등록
&lt;ul&gt;
&lt;li&gt;System Call Number를 부여한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;System Call Function 등록
&lt;ul&gt;
&lt;li&gt;linux&#x2F;arch&#x2F;i386&#x2F;kernel&#x2F;vsyscall-sysenter.S파일에 function을 등록한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Rebuild &amp;amp; Test&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;types-of-system-call&quot;&gt;Types of System Call&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;System Call을 통해 아래의 requirement를 만족시킨다.
&lt;ul&gt;
&lt;li&gt;Process Control&lt;&#x2F;li&gt;
&lt;li&gt;File manipulation(management)&lt;&#x2F;li&gt;
&lt;li&gt;Device manipulation&lt;&#x2F;li&gt;
&lt;li&gt;Information maintenance&lt;&#x2F;li&gt;
&lt;li&gt;Communication&lt;&#x2F;li&gt;
&lt;li&gt;Protection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;앞서 설명했듯, 동작 자체는 비슷하더라도 운영 체제 별로 System Call의 구현 및 지원하는 API는 모두 다르다. 예시로 아래 두 Sys Call API는 같은 동작을 한다.
&lt;ul&gt;
&lt;li&gt;Windows : CreateProcess()&lt;&#x2F;li&gt;
&lt;li&gt;Linux : fork()&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;operating-system-structure&quot;&gt;Operating System Structure&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;simple-structure-monolitic&quot;&gt;Simple Structure(monolitic)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;모듈 형태로 나눠지지 않은 단일 kernel형태이다.&lt;&#x2F;li&gt;
&lt;li&gt;인터페이스 및 계층 구조가 정의되지 않은 형태이다.&lt;&#x2F;li&gt;
&lt;li&gt;기능 중심으로 Operating System을 설계했다.&lt;&#x2F;li&gt;
&lt;li&gt;management관점에서는 성능이 떨어진다.&lt;&#x2F;li&gt;
&lt;li&gt;MS-DOS, 초기 UNIX에서 이러한 구조를 채텍했다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 traditional UNIX system의 nonolitic kernel형태이다. &lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;monolithic.png&quot; alt=&quot;monolithic&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;계층 구조를 가지지 않으며 kernel의 모든 기능이 동일한 level에서 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;기능 간의 interoperation에서 효율이 떨어지는 문제점이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;layered-approach&quot;&gt;Layered Approach&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;비슷한 기능이나 서비스를 제공할 경우 동일 layer로 구성했다.&lt;&#x2F;li&gt;
&lt;li&gt;monolithic 구조의 기능의 계층화가 없고 인터페이스를 제공하지 않는다는 점을 보완했다.&lt;&#x2F;li&gt;
&lt;li&gt;layered approach구조의 N번째 계층의 설계에 있어 N-1번째 계층과의 상호 작용만 고려하면 된다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;기능의 생성 및 디버깅에 편의를 주는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 동작 과정에서 여러 layer를 거쳐야 할 경우 work-overload가 커지는 문제가 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;microkernels&quot;&gt;Microkernels&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;microkernels.png&quot; alt=&quot;Microkernels&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;기존의 kernel이 제공했던 많은 기능들을 user level로 옮겼다.
&lt;ul&gt;
&lt;li&gt;kernel에서 제공하던 기능들이 많이 사라졌으므로, 이식성이 증대되었다.&lt;&#x2F;li&gt;
&lt;li&gt;또한 kernel영역의 간소화로 인해 보안성이 증가했다.&lt;&#x2F;li&gt;
&lt;li&gt;새로운 architecture로의 이식성이 증가되었다.&lt;&#x2F;li&gt;
&lt;li&gt;kernel의 크기가 작으므로 확장성이 좋다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;하지만 기능 구현에 있어 user-level에서 각 기능 간 통신은 kernel을 거쳐 통신해야 하므로(message passing), 프로그램 간의 communication overhead가 증가했고 이는 user-level에서의 performance overhead 증가로 이어진다.&lt;&#x2F;li&gt;
&lt;li&gt;Mac OS X(Darwin)이 이러한 구조를 채택했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;modules.png&quot; alt=&quot;Modules&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;미리 커널의 기능을 정의하는 방식이다.&lt;&#x2F;li&gt;
&lt;li&gt;각각의 기능들은 객체 지향 프로그래밍 방식으로 설계되었다.
&lt;ul&gt;
&lt;li&gt;필요할 때마다 모듈을 추가하기에 용이하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;모듈 간 통신은 미리 정의된 방법으로 kernel에서 일어난다.&lt;&#x2F;li&gt;
&lt;li&gt;모듈들은 boot time 또는 run time에 필요한 모듈들만 kernel에 적재된다.
&lt;ul&gt;
&lt;li&gt;불필요한 overhead를 줄일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;계층 구조가 아니므로 모듈들은 다른 모듈과 직접적으로 통신 가능하다는 점에서 layered approach와 차이점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;kernel이 기존에 정의된 최소한의 동작을 지원해야 하며, 프로그램이 kernel을 통해 communicate 한다는 점에서 microkernel과 비슷하다. 하지만 모듈 방식에서는 필요한 모듈을 kernel에 적재하고 있기 때문에 microkernel과 달리 message passing등을 고려할 필요가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hybrid-system&quot;&gt;Hybrid System&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;사실 최근 OS들은 앞서 살펴본 구조들의 단일 구성만으로 설계되지는 않는다.
&lt;ul&gt;
&lt;li&gt;여러 구조들을 동시에 채택하여 User-level의 requirement(보안성, 기능, 사용성 등)을 충족시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Hybrid 방식의 Mac OS X이다.&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;hybrid.png&quot; alt=&quot;Hybrid&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ios&quot;&gt;iOS&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;iphone, ipad에서 사용되는 운영 체제이다.&lt;&#x2F;li&gt;
&lt;li&gt;Mac OS X의 기본 구조 위에 기능을 추가한 형태이다.&lt;&#x2F;li&gt;
&lt;li&gt;모바일 환경을 지원하기 위해 아래와 같은 기능을 추가했다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cocoa-touch&lt;&#x2F;strong&gt;(Objective-C) for developing apps&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Media Services&lt;&#x2F;strong&gt; for graphics, audio, video&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Core Services&lt;&#x2F;strong&gt; for cloud computing, databases&lt;&#x2F;li&gt;
&lt;li&gt;Core Operating System은 앞서 말했읏이 Mac OS X기반이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;android&quot;&gt;Android&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;안드로이드 환경에서 사용되는 운영 체제이다.&lt;&#x2F;li&gt;
&lt;li&gt;리눅스 커널에 기반했지만 power management등 기능을 추가했다.&lt;&#x2F;li&gt;
&lt;li&gt;Open Handset Alliance(오픈 소스, mostly Google)에 의해 개발되었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-14 수업정리</title>
		<published>2023-03-14T00:00:00+00:00</published>
		<updated>2023-03-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/peuroggeraeoncoheoeoron-3-14-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/peuroggeraeoncoheoeoron-3-14-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;컴파일러, 인터프리터, 하이브리드 방식의 Implementation&lt;&#x2F;li&gt;
&lt;li&gt;FORTRAN(1957)&lt;&#x2F;li&gt;
&lt;li&gt;LISP(1959)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;keompailreo-bbanssi&quot;&gt;컴파일러 방식&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;compiler.png&quot; alt=&quot;compiler&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inteopeuriteo-bbanssi&quot;&gt;인터프리터 방식&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;interpreter.png&quot; alt=&quot;interpreter&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hybrid-bbanssi&quot;&gt;Hybrid 방식&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;hybrid.png&quot; alt=&quot;hybrid&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 ISA를 지원하는 하드웨어에서 작동하는 VM을 통해 인터프리터 방식의 Programming Language구현이 가능하다. 대표적으로 Java의 byte code가 있다. Java에서의 VM은 JVM이 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fortran-1957&quot;&gt;FORTRAN(1957)&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;FORTRAN은 초기 과학 연산 등에 사용되는 공식(FORmula)을 프로그램으로 변환(TRANsform)해주는 언어라는 뜻으로 FORTRAN이라는 이름으로 명명되었다.&lt;&#x2F;li&gt;
&lt;li&gt;초기 컴퓨터에 사용되었으며, 따로 효율적인 프로그래밍 기법은 존재하지 않았다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fortran-i&quot;&gt;FORTRAN I&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;첫 번째 FORTRAN이다.&lt;&#x2F;li&gt;
&lt;li&gt;여섯 문자의 변수명 설정, formatted I&#x2F;O, User-defined subroutines등이 지원되었다.&lt;&#x2F;li&gt;
&lt;li&gt;arithmetic IF(branch), posttest counting DO loop(loop)등 분기문과 반복문을 지원했다.
&lt;ul&gt;
&lt;li&gt;이를 지원하기 위해 statement좌측에 lable이라는 것을 선택적으로 지정할 수 있었다.&lt;&#x2F;li&gt;
&lt;li&gt;arithmetic IF의 경우 파라미터 값(0, +, -) 에 따라 지정된 레이블로 이동했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;별다른 선언 없이 implicit data type을 사용했다.
&lt;ul&gt;
&lt;li&gt;I1 : 정수형&lt;&#x2F;li&gt;
&lt;li&gt;x1 : 실수형&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;target machine의 성능이 뛰어나지 않았기 때문에 매우 최적화된 코드를 사용했다.(18 worker-years optimization part)&lt;&#x2F;li&gt;
&lt;li&gt;400 line이상은 컴파일이 되지 않았다고 보면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;코드는 Punched Card 를 통해 작성되었다. 아래 사진은 Z(1) = Y + W(1)을 의미하는 statement를 의미하는 Punched Card이다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;punchcard.png&quot; alt=&quot;punch card&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;evolutions-of-fortran&quot;&gt;Evolutions of FORTRAN&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;이후로도 FORTRAN II, FORTRAN III, FORTRAN IV, FORTRAN 77등 계속해서 후속 버전이 나왔다.&lt;&#x2F;li&gt;
&lt;li&gt;FORTRAN 90에서는 Private, Public의 Encapsulation이 지원되게 되었다. 또한 Common, Equivalence, Goto등의 문법이 삭제되었다.&lt;&#x2F;li&gt;
&lt;li&gt;가장 최근 버전은 FORTRAN 2008 이며, interdependencies가 없다면 parallel loop의 실행이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;포트란은 가장 널리 사용된 첫 번째 고급 언어이다. 하지만 튜링 어워드의 첫 번째 수상자인 Alen Perlis는 포트란은 언어가 아니라고 말하는 등 혹평 역시 있었다.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lisp-1959&quot;&gt;LISP(1959)&lt;&#x2F;h2&gt;
&lt;p&gt;John McCarthy에 의해 개발된 list processing language이다. MIT 교수였던 McCarthy는 과제로(...) 언어를 만들어 오라고 시켰으나, 제대로 한 사람이 없어 직접 만들었다고 한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;symbolic computation을 통해 AI분야에 널리 사용되었다.&lt;&#x2F;li&gt;
&lt;li&gt;atoms, lists의 두 개의 데이터 타입을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;함수형 프로그래밍 언어이다.(The only operation is an application)&lt;&#x2F;li&gt;
&lt;li&gt;여전히 널리 사용되고 있으며, 현재는 컴퓨터 하드웨어의 발달로 꽤 효율적이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;list-data-structure&quot;&gt;List Data Structure&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;lisp_ds.png&quot; alt=&quot;LISP data structure&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;(A B C D) 는 일반적인 linked list이다.&lt;&#x2F;li&gt;
&lt;li&gt;LISP에서는 list의 원소로 다시 list가 올 수 있어서 아래와 같은 형태의 generalized list를 생성 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;언어 자체에 괄호가 많아 혼란스러운 면이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lisp-variants&quot;&gt;LISP Variants&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Scheme : dynamic scoping을 지원했던 LISP와 달리 static scoping을 지원했다. 크기가 작다.&lt;&#x2F;li&gt;
&lt;li&gt;Common LISP : static &amp;amp; dynamic scoping을 모두 지원했다. 큰 형태의 데이터 타입을 다룰 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Clojure : JVM위에서 동작 가능하다. .net과 JavaScript로 컴파일 될 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;other-functional-languages&quot;&gt;Other Functional Languages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ML : meta language, 상업용 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;Miranda&lt;&#x2F;li&gt;
&lt;li&gt;Haskell : 위원회의 주관으로 만들었다. 병렬 프로그래밍에 매우 효율적이다. 함수형 프로그래밍 언어의 표준(?) 으로 여겨진다.&lt;&#x2F;li&gt;
&lt;li&gt;Scala : functional 방식 뿐만 아니라 Object-oriented 방식도 지원한다. JVM 위에서 동작 가능하다. native compilation으로도 동작 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-03-13 수업정리</title>
		<published>2023-03-13T00:00:00+00:00</published>
		<updated>2023-03-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-3-13-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-3-13-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Big $O$, Big $\Theta$, Big $\Omega$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;big-o-big-theta-big-omega&quot;&gt;Big $O$, Big $\Theta$, Big $\Omega$&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;big-o&quot;&gt;Big $O$&lt;&#x2F;h3&gt;
&lt;p&gt;주어진 복잡도 함수 f(n)에 대하여, n이 임의의 수 N 보다 크거나 같을 때, g(n)이 f(n)에 어떠한 상수 c를 곱한 것보다 작거나 같다면 아래와 같이 표현한다. 그리고 g(n) is oh of f(n) 이라고 읽는다.
$$g(n) \leq c * f(n),\ g(n) \in O(f(n))$$ &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;임의의 수 N보다 n이 커야 한다는 조건은, 입력값의 크기가 작은 경우에 더 빠른 알고리즘이 존재하므로 이러한 조건이 붙은 것이다. 당연하지만, N이 작을수록 위의 수식을 만족하기 힘들다. 하지만 어떠한 정수 N에 대해서만 만족하면 되고, Big $O$, Big $\Theta$, Big $\Omega$ 는 매우 큰 수 n에 대해서 다루기 때문에 별 의미는 없다. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;big-omega&quot;&gt;Big $\Omega$&lt;&#x2F;h3&gt;
&lt;p&gt;앞서 살펴본 Big $O$ 가 g(n)의 시간복잡도의 upperbound를 (g(n)은 한 f(n)보다는 빠른 알고리즘임을 의미한다.)의미했다면, Big $\Omega$ 는 g(n)의 시간복잡도의 lowerbound를 의미한다. 따라서 Big $\Omega$ 표현은 아래 수식을 만족해야 한다. 단순하게 Big $O$ notation과는 부등호 방향이 반대이다.
$$if\ g(n) \in \Omega(f(n)),\ g(n) \ge c * f(n)\ for(n \ge N)$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;big-theta&quot;&gt;Big $\Theta$&lt;&#x2F;h3&gt;
&lt;p&gt;g(n)이 $O(f(n),\ \Omega(f(n))$ 에 모두 속할 경우 아래와 같이 표기할 수 있다.
$$g(n) \in \Theta(f(n))$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;결국, Big $\Theta$는 집합은 같은 시간복잡도의 집합을 표시한다고 할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;정의에 따라 $2n^2,\ n^2+10$ 은 같은 Big $\Theta$는 집합에 속한다고 말할 수 있다. (same complexity를 가진다)&lt;&#x2F;li&gt;
&lt;li&gt;Big $O$, Big $\Theta$, Big $\Omega$ notation을 통해 서로 다른 알고리즘 간의 수학적인 비교가 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;어떠한 시간복잡도 함수가 각 notation을 충족하는지는 부등식을 통해 증명 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dossi-pyohyeon&quot;&gt;도식 표현&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;아래 그림은 각 집합의 영역을 그림으로 표시한 것이다.
&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;bigO_1.png&quot; alt=&quot;big O sigma, theta&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 각 집합(Big $O$, Big $\Theta$, Big $\Omega$)의 증가율을 비교한 것이다.
&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;bigO_2.png&quot; alt=&quot;graphOfBigO&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 위에서 설명한 집합에 속하는 시간복잡도 함수를 벤 다이어그램으로 표현한 것이다.
&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;diagram.png&quot; alt=&quot;diagram&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;아래의 수식이 참인지 증명하시오
$$n! \in \Theta(n^n)$$
&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;proof-theta.png&quot; alt=&quot;proof&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;증명의 2번 부분에서, 당연히 $log(n) \ge n&#x2F;2log(n&#x2F;2)$ 이지만, 임의의 상수 $c$에 대해서는 위 수식이 성립하기 때문에 참이라고 말할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-03-13 수업정리</title>
		<published>2023-03-13T00:00:00+00:00</published>
		<updated>2023-03-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/sopeuteuweeosissetotsseoggy-3-13-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/sopeuteuweeosissetotsseoggy-3-13-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;UML&lt;&#x2F;li&gt;
&lt;li&gt;Refactoring (1)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;uml-unified-modeling-language&quot;&gt;UML(Unified Modeling Language)&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;UML basic elements
&lt;img src=&quot;&#x2F;image&#x2F;SSD&#x2F;uml_basic.png&quot; alt=&quot;uml basic&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;UML은 특정 언어의 모델링만 하는 것이 아니므로, attribute, operation등 포괄적인 단어를 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;변수명, 메소드명, 클래스명이 requirement단계의 이름과 일치해야 한다&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;응집성 문제가 없어야 한다&lt;&#x2F;strong&gt;.
&lt;ul&gt;
&lt;li&gt;하나의 메소드는 하나의 역할만을 해야 한다. 이렇지 않을 경우 응집성이 높아져 code smell이 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;switch - case문의 사용은 응집성 문제를 가질 수밖에 없기 때문에 그 자체로 smell이 된다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 문제는 적절한 design pattern을 선택하여 해결 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;코드의 중복이 없어야 한다.
&lt;ul&gt;
&lt;li&gt;코드 자체의 중복은 리펙토링 과정에서 발생할 수 있다.(연산의 중복 등)&lt;&#x2F;li&gt;
&lt;li&gt;하지만 코드의 수정에 있어서 한 가지 목적을 위한 수정을 했을 때 여러 부분을 수정해야 하는 중복은 발생해서는 안된다. =&amp;gt; extreme code smell&lt;&#x2F;li&gt;
&lt;li&gt;이는 적절한 extract method를 통해 해결할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;O&lt;strong&gt;CP(Open Close Principle)를 준수해야 한다&lt;&#x2F;strong&gt;.
&lt;ul&gt;
&lt;li&gt;확장(extension)에 대해서는 Open 되어 있어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;기존 코드의 수정(modification)에 대해서는 Close 되어 있어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;결과적으로 기존 코드의 수정 없이 기능의 확장이 가능하게 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이런 면에서 switch - case문이 smell로 분류된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;리펙토링 결과 메소드의 길이는 짧아지고, 클래스는 더 커지고, 많아지게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;리펙토링을 통해 코드의 유지보수성을 늘일 수 있다.
&lt;ul&gt;
&lt;li&gt;처음 코드를 작성할 때 당장만을 생각하는 것이 아닌, 1년 후, 5년 후를 생각한다.&lt;&#x2F;li&gt;
&lt;li&gt;혼자서 작성하는 코드가 아닌 여러 명에서 협업하는 프로젝트의 경우, 새롭게 프로젝트에 참가하는 사람이 기존의 모든 것을 이해하는 데에는 많은 시간이 소요된다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 코드가 리펙토링 되어 있다면 모든 것을 완벽히 이해하지 않더라도 유지, 보수를 할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-03-13 수업정리</title>
		<published>2023-03-13T00:00:00+00:00</published>
		<updated>2023-03-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-3-13-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-3-13-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Storage&lt;&#x2F;li&gt;
&lt;li&gt;Computer System Architecture&lt;&#x2F;li&gt;
&lt;li&gt;운영 체제는 무엇을 하는가?&lt;&#x2F;li&gt;
&lt;li&gt;운영 체제 설계의 목표&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;storage&quot;&gt;Storage&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;주 메모리인 메인 메모리(휘발성), secondary storage인 비휘발성 storage가 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래와 같은 계층 구조를 가진다.
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;storage_hierarchy.png&quot; alt=&quot;storage_hierarchy&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;그림에서 레지스터와 캐시는 운영 체제에서 관리하지 않는다. 운영 체제에서 관리하는 메모리 영역은 메인 메모리부터 2차 저장소 까지의 영역이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;i-o-device&quot;&gt;I&#x2F;O Device&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적인 컴퓨터의 구조는 아래와 같이 나타낼 수 있다.
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;system_architecture.png&quot; alt=&quot;architecture&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;각 디바이스 컨트롤러들은 담당하고 있는 특정 디바이스 타입에 대해 로컬 버퍼를 가지며, 이를 관리한다. 보통 디바이스 드라이버에 의해 디바이스 컨트롤러가 인식된다.&lt;&#x2F;li&gt;
&lt;li&gt;CPU는 컨트롤러의 로컬 버퍼로부터 데이터를 읽고 쓰는 작업을 수행한다.
&lt;ul&gt;
&lt;li&gt;이때 인터럽트에 의해 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;디바이스 컨트롤러들은 CPU에 인터럽트를 발생시켜 데이터 전송 종료를 알린다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dma-direct-memory-access&quot;&gt;DMA(Direct Memory Access)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;I&#x2F;O디바이스에 의해 CPU인터럽트가 일어나게 되면 이는 곧 CPU의 성능 저하로 이어진다.&lt;&#x2F;li&gt;
&lt;li&gt;DMA는 이러한 상황을 막기 위해 I&#x2F;O디바이스에서 메모리 간에 직접 데이터를 주고받는 방식으로 구현한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 DMA를 적용한 경우와 적용하지 않은 경우의 차이점을 그림으로 나타낸 것이다.
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;DMA.png&quot; alt=&quot;DMA&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;두 경우 모두 인터럽트 자체는 발생한다. 
&lt;ul&gt;
&lt;li&gt;DMA방식의 경우 각 I&#x2F;O로부터 데이터는 메모리로 직접 전송한다. 그리고 블록 단위로 전송 종료를 알리는 인터럽트를 발생시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;CPU가 I&#x2F;O데이터를 메모리에 직접 전송하는 경우 바이트 단위의 인터럽트가 발생한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;computer-system-architecture&quot;&gt;Computer System Architecture&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 시스템에는 다양한 구조가 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;크게 아래와 같이 분류할 수 있다.
&lt;ul&gt;
&lt;li&gt;Single-Processor System&lt;&#x2F;li&gt;
&lt;li&gt;Multi-Processor System
&lt;ul&gt;
&lt;li&gt;Symmetric Multiprocessing Architecture
&lt;ul&gt;
&lt;li&gt;메인 메모리에 연결된 각 프로세서 별로 OS, User, Process를 담당한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Asymmetric Multiprocessing Architecture
&lt;ul&gt;
&lt;li&gt;메인 메모리에 연결된 어떤 프로세서는 OS영역만을 담당하고, 다른 프로세서는 User, Process영역을 담당한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Dual-Core Architecture&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Distributed System
&lt;ul&gt;
&lt;li&gt;Clustered System&lt;&#x2F;li&gt;
&lt;li&gt;Grid Computing System = cluster stystem + WLAN&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이렇듯 다양한 컴퓨터 시스템 구조가 존재하지만, 본 과정에서는 Single-Processor System을 바탕으로 진행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unhyeon-cejeneun-muheosheu-haneunga&quot;&gt;운영 체제는 무었을 하는가?&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Multiprogramming 지원
&lt;ul&gt;
&lt;li&gt;single user는 컴퓨터의 모든 자원을 100% 사용할 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;따라서 multiprogramming을 통해 job을 배분하는 것이 효율적이다.&lt;&#x2F;li&gt;
&lt;li&gt;운영 체제는 multiprogramming을 효율적으로 지원하도록 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Timesharing(multitasking) 지원
&lt;ul&gt;
&lt;li&gt;위와 비슷한 맥락으로 CPU는 여러 가지 job을 매우 빠르게 switch하여 user가 동시에 여러 job과 상호작용 하는 것처럼 동작한다.(swapping)&lt;&#x2F;li&gt;
&lt;li&gt;이를 위해 운영 체제는 아래와 같은 동작을 지원한다.
&lt;ul&gt;
&lt;li&gt;process 관리&lt;&#x2F;li&gt;
&lt;li&gt;job scheduling&lt;&#x2F;li&gt;
&lt;li&gt;CPU scheduling&lt;&#x2F;li&gt;
&lt;li&gt;Virtual memory 지원&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;컴퓨터의 메모리는 아래와 같은 구조를 가진다는 것을 기억하면 위의 내용을 이해하는 데 도움이 된다.
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;memory_structure.png&quot; alt=&quot;memory structure&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;operating-system-operations&quot;&gt;Operating System Operations&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;운영 체제는 interrupt driven방식으로 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;소프트웨어 인터럽트는 trap이라고도 불리며 아래와 같이 두 개의 범주로 나눌 수 있다.
&lt;ul&gt;
&lt;li&gt;Software errors(divide by zero, stack overflow ...)&lt;&#x2F;li&gt;
&lt;li&gt;System Call(Ctrl + C -&amp;gt; HALT)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;운영 체제는 Infinite loop, deadlock등 여러 상황에 대해 인터럽트를 이용하여 대처할 수 있어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;보통은 Dual-Mode 와 Timer를 이용하여 이러한 상황을 관리한다.
&lt;ul&gt;
&lt;li&gt;User mode : 일반적인 instruction 실행 가능&lt;&#x2F;li&gt;
&lt;li&gt;Kernel mode : privileged instruction + normal instruction 사용 가능&lt;&#x2F;li&gt;
&lt;li&gt;아래는 system call에 의한 명령어 실행 도식이다.
&lt;img src=&quot;&#x2F;image&#x2F;OS&#x2F;dual-mode.png&quot; alt=&quot;dual mode&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;프로세스 실행 중 발생한 무한 루프 등의 상황에 대해서는 Timer를 이용하여 탈출한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Virtual machine manager등에서는 Multi-Mode로 관리하기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ggyeoron&quot;&gt;결론&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;운영 체제가 하는 일에 대해 요약하면 아래와 같다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Process management&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory management&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Storage management&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Protection and Security&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unhyeon-ceje-sseoggyyi-mogpyo&quot;&gt;운영 체제 설계의 목표?&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;운영 체제는 abstraction을 통해 시스템을 편리하고 쉽게 사용할 수 있도록 한다.&lt;&#x2F;li&gt;
&lt;li&gt;고성능을 보장한다.
&lt;ul&gt;
&lt;li&gt;높은 throughput, utilization보장&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;어플리케이션 간의 보호를 담당한다 -&amp;gt; isolation등의 방법 사용&lt;&#x2F;li&gt;
&lt;li&gt;신뢰성을 보장한다.&lt;&#x2F;li&gt;
&lt;li&gt;그 외에도 에너지 효율, 보안, mobility등을 보장한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2579 - 계단 오르기</title>
		<published>2023-03-12T00:00:00+00:00</published>
		<updated>2023-03-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2579-ggydda-oreugi/" type="text/html"/>
		<id>https://js970.github.io/2579-ggydda-oreugi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 3월 12일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : Dynamic Programming&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;처음 문제를 읽고 동적 프로그래밍 문제인 지 바로 인식하지 못해 문제 풀이에 시간이 걸렸다.&lt;&#x2F;li&gt;
&lt;li&gt;1칸, 2칸, 3칸, 4칸에 대하여 가능한 경우의 수를 손으로 직접 그려보니 동적 계획법 문제인 것이 바로 인식되었다. 경우를 나누어 배열을 초기화했다.
&lt;ul&gt;
&lt;li&gt;n번째 계단에 도착했을 때 직전 계단에 이어 연속해서 밟는 경우&lt;&#x2F;li&gt;
&lt;li&gt;n번째 계단에 도착했을 때 직전 계단을 건너뛰고 두 칸 이전의 계단에서 이어 밟는 경우&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;상황을 크게 위의 두 가지 경우로 나누어 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;pair를 사용하여 first에는 직전 계단에 연속해서 밟는 점수를 저장했다. second에는 두 칸 이전의 계단에서 이어 밟았을 때의 점수를 저장했다.
&lt;ul&gt;
&lt;li&gt;직전 계단에서 이어 밟았을 경우, 직전 계단 이전의 계단을 밟은 경우라면 3칸을 연속해서 밟은 상황이 되기 때문에 이를 생각해서 직전 계단의 second와 n번째 계단의 점수를 더해야 한다. first는 고려하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;두 칸 이전의 계단에서 이어 밟았을 경우에는, 두 칸 이전의 계단이 이전 계단에서 어떻게 넘어왔는지는 중요하지 않으므로 first, second중 큰 값에 대해 n번째 계단의 점수를 더해 second에 저장했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;설명이 복잡하여 아래의 그림으로 간단하게 정리해 보았다. 결과적으로 65보다 75가 크기 때문에 테스트 케이스에서의 정답인 75를 출력하게 된다.
&lt;img src=&quot;&#x2F;image&#x2F;baekjoon&#x2F;2579&#x2F;2579logic.png.png&quot; alt=&quot;logic-2579&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arr[i];
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * ans = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]; ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] + arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]; ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        ans[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ arr[i];
&lt;&#x2F;span&gt;&lt;span&gt;        ans[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= (ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;) ? ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ arr[i] : ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;+ arr[i];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; answer = ans[N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; ans[N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;? ans[N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;: ans[N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; answer &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2579&quot;&gt;2579번: 계단 오르기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1992 - 쿼드트리</title>
		<published>2023-03-11T00:00:00+00:00</published>
		<updated>2023-03-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1992-kweoddeteuri/" type="text/html"/>
		<id>https://js970.github.io/1992-kweoddeteuri/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 3월 11일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 분할 정복, 재귀&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;compressable함수를 구현하여 2차원 배열의 모든 원소가 같은 원소로 구성되어있는지 확인한다.
&lt;ul&gt;
&lt;li&gt;하나라도 다른 원소가 포함되어 있다면 false를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;compress함수를 구현하여 recursion을 통해 입력된 배열에 대해 compress를 수행한다.
&lt;ul&gt;
&lt;li&gt;만약 모든 원소의 값이 같지 않아서 압축이 되지 않을 경우, 4분할을 통해 compress함수를 재귀호출한다(recursion)&lt;&#x2F;li&gt;
&lt;li&gt;처음에는 이차원 배열을 새롭게 생성하여 compress를 호출하였으나, compressable과 compress함수의 인자로 row, col의 시작 인덱스를 주어, 추가 배열 생성 없이 호출이 가능하도록 구현했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;메인 함수에서 입력을 받을 때 입력 형식을 맞추기 위해 char타입으로 입력을 받아 하나씩 저장했다.
&lt;ul&gt;
&lt;li&gt;int타입으로 구현하면 0과 1이 붙어서 한 숫자로 인식된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;처음에 이차원 배열의 동적할당 후 생성하는 문법에 오류가 있어 문제를 몇 번 틀렸다.
&lt;ul&gt;
&lt;li&gt;이중 포인터 하나만 배열로 동적할당 한 뒤, 각 이중 포인터 배열의 원소에 대해 다시 동적할당하는 방식으로 코딩해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;compressable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; elem = arr[row][col];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = row; i &amp;lt; row+size; i++)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = col; j &amp;lt; col+size; j++)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i][j] != elem) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compressable&lt;&#x2F;span&gt;&lt;span&gt;(arr, row, col, size)) cout &amp;lt;&amp;lt; arr[row][col];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sub_size = size &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span&gt;(arr, row, col, sub_size);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span&gt;(arr, row, col+sub_size, sub_size);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span&gt;(arr, row+sub_size, col, sub_size);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span&gt;(arr, row+sub_size, col+sub_size, sub_size);
&lt;&#x2F;span&gt;&lt;span&gt;		cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;	cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[N];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		arr[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N; j++)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;			cin &amp;gt;&amp;gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;			arr[i][j] = c - &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compress&lt;&#x2F;span&gt;&lt;span&gt;(arr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, N); 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1992&quot;&gt;1992번: 쿼드트리&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1931 - 회의실 배정</title>
		<published>2023-03-10T00:00:00+00:00</published>
		<updated>2023-03-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1931-hoeyissi-bbajjeon/" type="text/html"/>
		<id>https://js970.github.io/1931-hoeyissi-bbajjeon/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 3월 10일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 그리디 알고리즘&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;모든 선택에 있어서 선택 가능한 선택지 중 끝나는 시간이 가장 빠른 회의를 선택한다면 가장 많은 회의를 진행할 수 있게 된다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 알고리즘으로 쉽게 구현하기 위해 pair를 사용했다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;끝나는 시간이 빠른 것을 선택해야 하므로 끝나는 시간을 pair.first로 설정한다.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 하면 sort를 이용해 원하는 상태로 한번에 정렬이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;이전에 끝난 시간보다는 회의가 끝나는 시간이 같거나 뒤여야 하기 때문에 이를 조건문으로 구현하였다. 조건을 만족한다면 회의가 열렸다는 것을 의미하므로 이 때마다 count를 1씩 증가시킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;초기 코드에서는 끝나는 시간을 pair.second로 설정해서 정렬을 여러 번 해야 했다.
&lt;ul&gt;
&lt;li&gt;결과적으로 시간복잡도가 늘어나서 시간초과가 발생하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;cogi-kodde&quot;&gt;초기 코드&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;while 문 내부에서 minSecond함수를 수행하는데 이 과정에서 시간복잡도가 O(n^2)으로 늘어나 시간초과 발생의 원인이 되었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;climits&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pointRenew&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmpnum&lt;&#x2F;span&gt;&lt;span&gt;, pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;[], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrSz&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentPoint&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = currentPoint; i &amp;lt; arrSz; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= cmpnum &amp;amp;&amp;amp; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;== arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= cmpnum) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;minSecond&lt;&#x2F;span&gt;&lt;span&gt;(pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;[], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrSz&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentPoint&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; min = INT_MAX;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = currentPoint; i &amp;lt; arrSz; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        min = (arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; min) ? arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;: min;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; min;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arr, arr+N);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; point = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; min;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(point != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; point &amp;lt; N)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        min = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minSecond&lt;&#x2F;span&gt;&lt;span&gt;(arr, N, point);
&lt;&#x2F;span&gt;&lt;span&gt;        point = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pointRenew&lt;&#x2F;span&gt;&lt;span&gt;(min, arr, N, point);
&lt;&#x2F;span&gt;&lt;span&gt;        count++;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jecul-kodde&quot;&gt;제출 코드&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;코드 구현에 있어 우선적으로 고려되어야 하는 회의 종료 시간을 pair.first로 설정하였기 때문에 정렬을 두 번씩 할 필요가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; n;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; arr[n];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; n; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arr, arr + n);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; prev_end_time = arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; n; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= prev_end_time) {
&lt;&#x2F;span&gt;&lt;span&gt;            count++;
&lt;&#x2F;span&gt;&lt;span&gt;            prev_end_time = arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1931&quot;&gt;1931번: 회의식 배정&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-09 수업정리</title>
		<published>2023-03-09T00:00:00+00:00</published>
		<updated>2023-03-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/3-9-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/3-9-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍 언어의 평가기준(속성)&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어 설계의 trade-off&lt;&#x2F;li&gt;
&lt;li&gt;Programming Languages as Virtual Computers&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어의 구현 방법&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 환경&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-heoeoyi-ssosseon&quot;&gt;프로그래밍 언어의 속성&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Writability - 프로그램을 쉽게 구현할 수 있는가?&lt;&#x2F;li&gt;
&lt;li&gt;Readability - 가독성이 높은가?&lt;&#x2F;li&gt;
&lt;li&gt;Efficiency - 컴파일 시간이 오래 걸리지는 않는가?(효율적인가?)&lt;&#x2F;li&gt;
&lt;li&gt;Reliability - 신뢰성&lt;&#x2F;li&gt;
&lt;li&gt;Portability - 이식성 -&amp;gt; 여러 플랫폼에서 지원하는가?(C 언어의 장점)&lt;&#x2F;li&gt;
&lt;li&gt;Orthogonality - 직교성 
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;orthogonality.png&quot; alt=&quot;Orthogonality&quot; &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;C언어에서 swap을 예시로 들어 보자. swap1(int a, int b) 과 swap2(int a[], int b[]) 함수는 내부 연산이 같다고 하더라도 서로 다르게 동작한다. 이는 파라미터의 차이 때문이다(swqp1 -&amp;gt; int, swap2 -&amp;gt; pointer).&lt;&#x2F;li&gt;
&lt;li&gt;이에 대해 C언어는 파라미터 패싱에 있어서 Orthogonal하지 않다고 말할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Abstraction - 추상화 수준(High Level Language &amp;lt;-&amp;gt; Low Level Language)&lt;&#x2F;li&gt;
&lt;li&gt;Homoiconicity(the same representation)
&lt;ul&gt;
&lt;li&gt;Control(함수, 프로시저) 과 data(자료구조)의 표현이 같다는 특징이 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-heoeo-sseoggyyi-trade-off&quot;&gt;프로그래밍 언어 설계의 trade-off&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Reliability &amp;lt;--&amp;gt; Efficiency&lt;&#x2F;li&gt;
&lt;li&gt;Writability &amp;lt;--&amp;gt; Readability&lt;&#x2F;li&gt;
&lt;li&gt;Safety &amp;lt;--&amp;gt; Flexibility 
&lt;ul&gt;
&lt;li&gt;C++에서는 private member access가 제약되지만(Safety가 높다), Python에서는 그러한 기능이 없다(Flexibility가 높다).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;programming-languages-as-virtual-computers&quot;&gt;Programming Languages as Virtual Computers&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;languages_on_shell.png&quot; alt=&quot;diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Shell은 운영 체제 위에서 돌아가는 프로그램이다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어는 Shell에서 작동하는 가상 컴퓨터라고 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;virtualization&quot;&gt;Virtualization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;가상화라고 번역 가능하지만 문맥 상 &amp;quot;사실상의&amp;quot; 라는 의미로 받아들이면 이해하기 쉽다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램 가상화 : JVM에서의 .net&lt;&#x2F;li&gt;
&lt;li&gt;하드웨어 가상화 : VMware, VirtualBox, WSL등&lt;&#x2F;li&gt;
&lt;li&gt;Azure, AWS등의 서비스를 통해 자원을 제공받을 수 있지만 실제로는 가상화를 통해 서비스를 제공하므로 어떤 machine인지는 모른다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-heoeoyi-guhyeon-bbanbbeo&quot;&gt;프로그래밍 언어의 구현 방법&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;language_implementation.png&quot; alt=&quot;language implementation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;컴파일러를 사용해 구현하는 방식
&lt;ul&gt;
&lt;li&gt;위 그림에서 target program은 곧 machine code를 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;C, C++이 대표적인 컴파일러를 사용하는 프로그래밍 언어이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;인터프리터를 통해 구현하는 방식
&lt;ul&gt;
&lt;li&gt;인터프리터는 하드웨어와 상호작용하여 프로그램이 실행되도록 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Java의 byte code, p-code, CIL(.net에서 사용) 등이 인터프리터 방식이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Hybrid Implementation
&lt;ul&gt;
&lt;li&gt;컴파일러 방식과 인터프리터 방식을 모두 사용한다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;hybrid_implementation.png&quot; alt=&quot;hybrid implementation&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-hwanggyeon&quot;&gt;프로그래밍 환경&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;IDE
&lt;ul&gt;
&lt;li&gt;Editor&lt;&#x2F;li&gt;
&lt;li&gt;Language Processor(컴파일러, 인터프리터)&lt;&#x2F;li&gt;
&lt;li&gt;Debugger&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Software Engineering Tools
&lt;ul&gt;
&lt;li&gt;Document Generator&lt;&#x2F;li&gt;
&lt;li&gt;Test Pattern Generator&lt;&#x2F;li&gt;
&lt;li&gt;Profiler&lt;&#x2F;li&gt;
&lt;li&gt;형상 관리 툴(git)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;AI Tools
&lt;ul&gt;
&lt;li&gt;GPT CoPilot&lt;&#x2F;li&gt;
&lt;li&gt;Code GPT
&lt;ul&gt;
&lt;li&gt;VScode에 플러그인으로 추가 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 두 툴 모두 gpt-3 기반이다.
&lt;ul&gt;
&lt;li&gt;gpt : 자연어 처리 모델&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-03-08 수업정리</title>
		<published>2023-03-08T00:00:00+00:00</published>
		<updated>2023-03-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/3-8-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/3-8-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;리펙토링이란?&lt;&#x2F;li&gt;
&lt;li&gt;Eclipse Refactoring&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ripegtoringiran&quot;&gt;리펙토링이란?&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;Refactoring is a disciplined technique for restructuring an existing body of code, altering its internal structure without changing tis external behavior
Martin Fowler, 1999&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;코드를 외부 동작의 변화 없이 내부 구조만 바꾸는 것&lt;&#x2F;li&gt;
&lt;li&gt;결과적으로 유지보수성과 가독성을 높이는 역할을 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;eclipse-refactoring&quot;&gt;Eclipse Refactoring&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;extract constant
&lt;ul&gt;
&lt;li&gt;숫자 우클릭 -&amp;gt; 리펙토링 -&amp;gt; 상수 추출 -&amp;gt; 상수 이름 명명&lt;&#x2F;li&gt;
&lt;li&gt;이클립스가 자동으로 상수를 선언해 준다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;extract local variable
&lt;ul&gt;
&lt;li&gt;요소 드래그 -&amp;gt; 우클릭 -&amp;gt; 리펙토링 -&amp;gt; 지역 변수 추출 -&amp;gt; 변수 명명&lt;&#x2F;li&gt;
&lt;li&gt;이클립스가 자동으로 변수를 선언해 준다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Extracting Method
&lt;ul&gt;
&lt;li&gt;함수가 여러 가지 동작을 하지 않도록 각 요소 별로 함수를 추출한다.&lt;&#x2F;li&gt;
&lt;li&gt;요소 드래그 -&amp;gt; 우클릭 -&amp;gt; 리펙토링 -&amp;gt; 함수 추출 -&amp;gt; 함수 이름 명명 및 확인&lt;&#x2F;li&gt;
&lt;li&gt;이클립스가 자동으로 함수를 선언해 준다. &lt;&#x2F;li&gt;
&lt;li&gt;함수를 우클릭하고 open declaration을 누르면 선언부를 볼 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Renameing Variables and Methods
&lt;ul&gt;
&lt;li&gt;함수나 변수 선택 -&amp;gt; 우클릭 -&amp;gt; 리펙토링 -&amp;gt; rename -&amp;gt; 이름 명명&lt;&#x2F;li&gt;
&lt;li&gt;일일히 모든 코드의 함수명이나 변수명을 변경할 필요가 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>컴퓨터 알고리즘 2023-03-08 수업정리</title>
		<published>2023-03-08T00:00:00+00:00</published>
		<updated>2023-03-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/keompyuteo-algorijjeu-3-8-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/keompyuteo-algorijjeu-3-8-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;알고리즘이란?&lt;&#x2F;li&gt;
&lt;li&gt;Recursion&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘의 분석&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;algorijjeuiran&quot;&gt;알고리즘이란?&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;문제(problem)는 &amp;quot;정답을 요구하는 질문&amp;quot;이다.
&lt;ul&gt;
&lt;li&gt;배열을 크기 순으로 정렬해라&lt;&#x2F;li&gt;
&lt;li&gt;값 x가 배열 S에 존재하는지 판단해라&lt;&#x2F;li&gt;
&lt;li&gt;25번째 피보나치 수열은?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘은 &amp;quot;target computer&amp;quot;에서 소프트웨어 개발자가 주어진 입력에 대한 출력을 생성하기 위해 작성한 &amp;quot;logic&amp;quot; 이다.&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘에서 중요하게 여겨지는 요소는 아래와 같다.
&lt;ul&gt;
&lt;li&gt;Correctness&lt;&#x2F;li&gt;
&lt;li&gt;Complexity
&lt;ul&gt;
&lt;li&gt;다양한 알고리즘이 존재한다면 간단하고 빠른 알고리즘을 선호할 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;순차 탐색보다는 이진 탐색을 선호할 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Optimality&lt;&#x2F;li&gt;
&lt;li&gt;Clarity and Efficiency
&lt;ul&gt;
&lt;li&gt;프로그램 배포 시 idea(logic)을 명확하게 설명할 수 있어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ssuca-tatssae-sequential-search&quot;&gt;순차 탐색(Sequential Search)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;배열의 처음부터 끝까지 순차적으로 탐색한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ijji-tatssae-binary-search&quot;&gt;이진 탐색(Binary Search)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;정렬된 리스트에서 탐색하고자 하는 값이 속한 절반의 영역만을 선택하여 탐색하는 방법&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;recursion&quot;&gt;Recursion&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;recursive-fibonacci&quot;&gt;Recursive Fibonacci&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(n&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; n;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;(n-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span&gt;(n-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;fib(n)에서 fib(n-1), fib(n-2)를 호출한다. -&amp;gt; recursive&lt;&#x2F;li&gt;
&lt;li&gt;이렇게 recursion을 사용한다면 코드가 구현하기 쉽고 이해하기도 편하다는 장점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 별로 효율적이지는 않다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 Recursive의 문제점이다.
&lt;ul&gt;
&lt;li&gt;fib(5)의 값을 구하기 위해 무려 15번의 fib함수의 호출이 이루어진다.&lt;&#x2F;li&gt;
&lt;li&gt;또한, 이미 구한 fib(5)의 호출로 이미 연산한 fib(3)의 값을 fib(4)를 호출하면서 다시 연산하게 된다. fib(3)뿐만이 아니라 이런 식으로 중복 연산되는 값이 상당수 존재한다.
&lt;img src=&quot;&#x2F;image&#x2F;Algorithm&#x2F;fibonacci_recursion.png&quot; alt=&quot;fibonacci_recursion&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이렇듯 recursion은 같은 값에 대해 여러 번 연산해야 할 수 있고, 함수의 call stck이 무한정 증가할 수 있으므로 전혀 효율적이지 않다.&lt;&#x2F;li&gt;
&lt;li&gt;그렇다면 이러한 recursion을 피하기 위해서는 어떻게 해야 할까? -&amp;gt; 반복문을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;iterative-fibonacci&quot;&gt;Iterative Fibonacci&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fib2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; f[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n];
&lt;&#x2F;span&gt;&lt;span&gt;	f[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(n &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		f[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++)
&lt;&#x2F;span&gt;&lt;span&gt;			f[i] = f[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] + f[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; f[n];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;fib2함수에서는 fib함수와 달리 이전 값을 배열에 저장하고, 반복문을 통해 다음 피보나치 배열의 값을 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;fib2함수는 recursion이 없으므로 단 1번의 함수 호출만 발생한다.&lt;&#x2F;li&gt;
&lt;li&gt;또한, fib2(5)을 5번의 연산만을 통해 계산할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;anyway&quot;&gt;Anyway...&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;물론 모든 경우에서 recursion이 효울적이지 않은 것은 아니다.&lt;&#x2F;li&gt;
&lt;li&gt;또한 recursion은 앞서 설명한 것처럼 코드가 구현하기 쉽고, 이해하기에 편리하다.&lt;&#x2F;li&gt;
&lt;li&gt;그렇다면 상황에 따라 recursion이 적합한 경우도 있을 텐데 이를 어떻게 알까?
-&amp;gt; 이것이 컴퓨터 알고리즘을 공부하는 이유이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;algorijjeuyi-bbusseo&quot;&gt;알고리즘의 분석&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;어떤 프로그램(알고리즘)이 다른 프로그램도다 효율적인지 추정하는 방법으로 실행 시간을 비교하는 방법을 생각할 수 있다. 하지만 같은 환경에서 비교가 불가능한 경우가 다수 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;앞선 fib, fib2함수의 경우 굳이 실행시켜보지 않더라도 직관적으로 fib2가 더 효율적임을 알 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;siggabbojjado&quot;&gt;시간복잡도&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;함수에서의 매개변수에 따른 실행시간을 생각해 보자&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function1&lt;&#x2F;span&gt;&lt;span&gt;(A[], n)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	k = n&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; A[k];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위의 function1은 매개변수와 무관하게 일정한 실행시간을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 경우 Constant time의 시간복잡도를 가진다고 말한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function2&lt;&#x2F;span&gt;&lt;span&gt;(A[], n)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++)
&lt;&#x2F;span&gt;&lt;span&gt;		sum += A[i];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; sum;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위의 function2의 경우, n=1일때의 수행시간을 1이라고 한다면, n = k라면 선형적으로 k의 수행시간을 가질 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;이는 function2의 주 연산이 덧셈, 할당이고, 매개 변수 n에 따라서 주 연산 횟수가 늘어나기 때문이다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 경우 n의 시간복잡도를 가진다고 말한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function3&lt;&#x2F;span&gt;&lt;span&gt;(A[], n)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt;= n; j++)
&lt;&#x2F;span&gt;&lt;span&gt;			sum += A[i]*A[j];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; sum;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;function3의 경우 n에 따라 수행시간은 $n^2$ 만큼 증가할 것이다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 경우 $n^2$ 의 시간복잡도를 가진다고 말한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;위에서 살펴본 시간복잡도는 세 가지 경우로 나누어 생각할 수 있다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Worst case&lt;&#x2F;li&gt;
&lt;li&gt;Best case&lt;&#x2F;li&gt;
&lt;li&gt;Averge case
사실 위의 세 경우 중 Best case에 대한 시간복잡도는 별로 의미가 없으며, Worst case의 시간복잡도가 최악의 경우를 보장하기 때문에 주 관심사가 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;또한 아래와 같이 시간복잡도를 구분할 수 있다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;매개 변수 n에 대해서
&lt;ul&gt;
&lt;li&gt;Constant$$ 1, 3, 9, ...$$&lt;&#x2F;li&gt;
&lt;li&gt;Linear$$n, 2n, 3n-2, 21n+100, ... $$&lt;&#x2F;li&gt;
&lt;li&gt;Quadratic$$n^2, 2n^2-3, 4n^2-3n+23, ... $$&lt;&#x2F;li&gt;
&lt;li&gt;Cubic $$n^3 , 4n^3+3n^2-2n+7, ...$$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>운영체제 2023-03-08 수업정리</title>
		<published>2023-03-08T00:00:00+00:00</published>
		<updated>2023-03-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/unhyeonceje-3-8-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/unhyeonceje-3-8-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;운영 체제의 정의 및 primary components&lt;&#x2F;li&gt;
&lt;li&gt;컴퓨터의 부팅 과정&lt;&#x2F;li&gt;
&lt;li&gt;System Call&lt;&#x2F;li&gt;
&lt;li&gt;Virtualization&lt;&#x2F;li&gt;
&lt;li&gt;Persistence&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unhyeon-cejeyi-jjeonyi-primary-components&quot;&gt;운영 체제의 정의 &amp;amp; primary components&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;현대 컴퓨터 시스템은 사용자, 소프트웨어 영역, 운영 체제, 하드웨어 영역으로 나눌 수 있다. 운영 체제는 소프트웨어 어플리케이션이 하드웨어 자원을 효율적으로 사용할 수 있도록 하는 소프트웨어이다.(제한된 HW자원을 효율적으로 프로세스에 할당한다.)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resource allocator&lt;&#x2F;strong&gt; : 앞서 말한 것처럼 운영 체제는 하드웨어 자원을 프로세스에 효율적으로 할당하는 역할을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;control program&lt;&#x2F;strong&gt; : 예기치 못한 에러 및 부적절한 컴퓨터의 사용이 일어나지 않도록 프로그램의 실행을 관리하는 역할을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;결국 운영 체제는 아래와 같은 동작을 수행해야 한다.
&lt;ol&gt;
&lt;li&gt;프로그램이 효율적으로 동작하도록 해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그램들이 메모리를 공유하도록 관리해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;하드웨어 자원과 프로그램이 상호작용 할 수 있도록 동작해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;이 이외에도 운영 체제는 아래와 같이 설명할 수도 있다.(참고)
&lt;ol&gt;
&lt;li&gt;컴퓨터가 동작하는 동안 항상 동작하는 kernel&lt;&#x2F;li&gt;
&lt;li&gt;system program 또는 Application Program&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;keompyuteoyi-bupout-gwajjeon&quot;&gt;컴퓨터의 부팅 과정&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;본 단에서는 윈도우 등 현대 운영 체제를 탑재한 일반적인 컴퓨터의 부팅 과정에 대해 간단히 설명한다.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;POST phase
&lt;ul&gt;
&lt;li&gt;HW디바이스가 잘 연결되어 있는지 확인하는 단계이다.&lt;&#x2F;li&gt;
&lt;li&gt;basic filesystem drivers를 load 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Initial Startup phase
&lt;ul&gt;
&lt;li&gt;MBR(Master Boot Record, 부트로더를 저장하고 있는 파티션이 있는 하드디스크의 첫번째 섹터)에서conf.file을 load하고 read한다.&lt;&#x2F;li&gt;
&lt;li&gt;MBR을 로드하기 위해서는 ROM에 존재하는 firmware가 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;BootLoad&lt;&#x2F;li&gt;
&lt;li&gt;Kernel Loading
&lt;ul&gt;
&lt;li&gt;이 단계에서 인증 모듈 등이 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;부팅 완료&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;운영 체제가 실행되고 난 후에는 어떠한 event가 일어나는 것을 기다린다. -&amp;gt; 인터럽트 driven방식으로 동작하기 때문.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;인터럽트 방식은 하드웨어 인터럽트 방식과 소프트웨어 인터럽트 방식이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하드웨어 인터럽트 방식은 인터럽트 버스를 통해 직접 신호를 주는 인터럽트 방식이다.&lt;&#x2F;li&gt;
&lt;li&gt;소프트웨어 인터럽트 방식은 HW인터럽트와 달리 융통성을 발휘할 수 있다. trap이라고도 불린다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 인터럽트가 너무 자주 발생하면 좋을 것이 없으므로 DMA등의 방식을 사용해 효율적으로 처리한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;system-call&quot;&gt;System Call&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;System Call은 사용자가 OS에 어떠한 행동을 해야 하는지를 알려주는 역할을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;OS는 API, STL등을 이용하여 이러한 인터페이스를 제공한다.&lt;&#x2F;li&gt;
&lt;li&gt;대부분의 운영체제는 수백 개 정도의 System Call 을 제공한다.
&lt;ul&gt;
&lt;li&gt;프로그램 실행 관련&lt;&#x2F;li&gt;
&lt;li&gt;메모리 접근 관련&lt;&#x2F;li&gt;
&lt;li&gt;디바이스 연결 관련&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;virtualization&quot;&gt;Virtualization&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;OS는 물리적인 자원을 가상 형태의 자원으로 바꾼다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CPU, Memory자원을 여러 프로세스에서 공유하는 것을 생각하면 이해하기 쉽다.&lt;&#x2F;li&gt;
&lt;li&gt;이러한 virtual form이 더 일반적이고, 강력하며 사용하기 쉽다.&lt;&#x2F;li&gt;
&lt;li&gt;OS자체를 virtual machine이라고 명명하기도 한다.&lt;&#x2F;li&gt;
&lt;li&gt;현대의 다중 스레드 프로그램들은 동시성 문제를 가질 수밖에 없다.
&lt;ul&gt;
&lt;li&gt;OS의 가상화 기능을 통해 효율적으로 사용할 수 있지만 comcurrency issue의 원인이 되기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;persistence&quot;&gt;Persistence&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;앞서 설명한 가상화를 통해 여러 프로세스에서 같은 메모리에 System Call을 통해 접근하는 경우가 발생할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;File system은 이러한 crash문제를 막아야 한다.(Journaling이라고 한다.)&lt;&#x2F;li&gt;
&lt;li&gt;파일 시스템 역시 운영 체제에 포함되는 것으로 보기도 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-07 수업정리</title>
		<published>2023-03-07T00:00:00+00:00</published>
		<updated>2023-03-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/3-7-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/3-7-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍 언어의 역할&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어에 대해 공부해야 하는 이유&lt;&#x2F;li&gt;
&lt;li&gt;수많은 프로그래밍 언어를 어떻게 다루어야 하나?&lt;&#x2F;li&gt;
&lt;li&gt;Requirements &amp;amp; Constraints&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어에 대한 평가&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-heoeoyi-hyeohal&quot;&gt;프로그래밍 언어의 역할&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;사람과 기계 사이의 의사 소통이 가능하게 한다.(단방향)&lt;&#x2F;li&gt;
&lt;li&gt;사람과 사람 사이의 의사소통이 가능하게 한다.(양방향)
&lt;ul&gt;
&lt;li&gt;다른 사람이 본인의 코드를 쉽게 이해할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;프로그래머가 프로그램을 쉽게 작성할 수 있는가? -&amp;gt; writability&lt;&#x2F;li&gt;
&lt;li&gt;다른 프로그래머가 자신의 코드를 쉽게 이해할 수 있는가? -&amp;gt; readability
&lt;ul&gt;
&lt;li&gt;readability의 향상을 위해 IAL(International Algol Language)가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;실제로는 거의 사용되지 않았다.&lt;&#x2F;li&gt;
&lt;li&gt;이후 이 언어의 영향을 받아 Pascal, C등 High Level Language로의 발전이 이루어졌다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-heoeoreul-ggonbuhaeya-haneun-iyu&quot;&gt;프로그래밍 언어를 공부해야 하는 이유&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The limits of my language mean the limits of my world.&amp;quot; - Wittgenstein(1989~1951) &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;새로운 언어에 의해 사고가 확장될 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;더 효율적으로 문제를 풀어낼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;더 효율적으로 언어를 선택할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;더 효율적으로 언어를 학습할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;더 효율적으로 언어를 사용할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;더 효율적으로 언어를 작성할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;더 효율적으로 관리할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;heoeoe-ddahan-jjeoggeu&quot;&gt;언어에 대한 접근&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머와 컴퓨터를 잇는 다리 역할을 한다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;bridging_the_gap.png&quot; alt=&quot;bridging the gap&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;어떠한 도메인에 사용되는가?
&lt;ul&gt;
&lt;li&gt;Scientific, Buisness, AI, Graphics, Embedded Systems, web Applications, System Programming, Script ...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;어떠한 패러다임을 따르는가?
&lt;ul&gt;
&lt;li&gt;Procedural, Functional, Module-Based, Object-Oriented, Imperative, Declarative ...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;어떠한 컴퓨터 구조 모델을 따르는가?
&lt;ul&gt;
&lt;li&gt;Imperative(폰 노이만 구조), Functional($\lambda$), Logic(deductive logic) ...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;requirements-constraints&quot;&gt;Requirements &amp;amp; Constraints&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머는 Requirements에 맞는 Programming Language를 선택한다.&lt;&#x2F;li&gt;
&lt;li&gt;Computer Architecture는 Programming Language에 Constraint를 부여한다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 도식으로 나타내면 아래와 같다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;requirements&amp;amp;constraints.png&quot; alt=&quot;Requirements and Constrains&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-heoeoe-ddahan-pyeongga&quot;&gt;프로그래밍 언어에 대한 평가&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍 언어는 다음과 같은 세 가지의 기본 요구사항이 존재한다.
&lt;ul&gt;
&lt;li&gt;Expressiveness - 표현력&lt;&#x2F;li&gt;
&lt;li&gt;Maintainability - 유지보수성&lt;&#x2F;li&gt;
&lt;li&gt;Executability - 실행가능성&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 세 가지 요소가 적절히 섞인(?) 프로그래밍 언어가 좋은 프로그래밍 언어이다.&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어의 평가 기준은 다음과 같다.
&lt;img src=&quot;&#x2F;image&#x2F;PL&#x2F;language_evaluation_criteria.png&quot; alt=&quot;Language Evaluation Criteria&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이런 평가기준은 논쟁 가능성이 높지만 그래도 대부분이 동의하는 기준이다.&lt;&#x2F;li&gt;
&lt;li&gt;이 이외에도 많은 평가 특성(속성) 을 바탕으로 평가한다.
&lt;ul&gt;
&lt;li&gt;Orthogonality&lt;&#x2F;li&gt;
&lt;li&gt;Abstraction&lt;&#x2F;li&gt;
&lt;li&gt;Homoiconicity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>소프트웨어시스템설계 2023-03-06 수업정리</title>
		<published>2023-03-06T00:00:00+00:00</published>
		<updated>2023-03-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/3-6-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/3-6-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Readability &amp;amp; Understandability&lt;&#x2F;li&gt;
&lt;li&gt;Refactoring&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;readability&quot;&gt;Readability&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;local variable, constant등 코드 내의 각 요소들을 쉽게 파악할 수 있는 정도이다.&lt;&#x2F;li&gt;
&lt;li&gt;readability가 좋은 코드는 변수 등의 위치를 바로바로 파악 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;일관성 있는 코드 스타일의 사용을 통해 readability를 보장할 수 있다. (줄바꾸기, 들여쓰기 등)
&lt;ul&gt;
&lt;li&gt;코드 스타일은 언어마다 정해진 코드 스타일이 있다. 이를 준수하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;underatandability&quot;&gt;Underatandability&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Understandability는 코드의 &amp;quot;역할&amp;quot; 을 쉽게 이해할 수 있는 정도이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 코드에서 코드를 따로 들여다보지 않고는 doSomething이라는 함수의 기능을 바로 이해할 수 없다. 따라서 아래 코드는 Readable한 코드일지는 몰라도 understandability는 좋지 않다.&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;doSomething&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x3){
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; y[] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new double&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;= x2*x2 - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*x1*x3;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;		y[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = (-x2 + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Q&lt;&#x2F;span&gt;&lt;span&gt;)) &#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*x1);
&lt;&#x2F;span&gt;&lt;span&gt;		y[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = (-x2 - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Q&lt;&#x2F;span&gt;&lt;span&gt;)) &#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*x1);
&lt;&#x2F;span&gt;&lt;span&gt;	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Q &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		y[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = y[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = (-x2) &#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*x1);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 코드를 refactoring을 통해 의미 있는 함수 이름(quadraticEquation(int a, int b, int c))로 바꿔 준다면 understandability를 높일 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;switch문의 사용 역시 결국 상황에 따른 복잡한 기능을 구현하는 것이므로 poor understandability라고 할 수 있다. 이렇듯 understandability가 좋지 않은 코드는 주석을 통해 코드의 역할을 설명하게 된다. 하지만 이는 근본적인 해결법이라고 할 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;근본적인 해결을 위해서는 refactoring을 통해 코드의 구조를 수정해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;코드 refactoring은 기존 코드의 기능을 유지하면서 변수나 함수의 이름 변경, 함수의 추출, superclass의 추출 등을 통해 코드의 구조를 변경하는 행위이다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 통해 코드의 질적 향상이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;결과적으로 Refactoring을 통해 코드의 understandability와 modifiability를 높일 수 있다.
&lt;ul&gt;
&lt;li&gt;다른 말로 유지 보수성을 높일 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1927 - 최소 힙</title>
		<published>2023-03-03T00:00:00+00:00</published>
		<updated>2023-03-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1927-coeso-hib/" type="text/html"/>
		<id>https://js970.github.io/1927-coeso-hib/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 3월 3일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No &lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : queue, heap&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;그냥 priority_queue를 선언하여 시키는 대로 풀면 되는 매우 간단한 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;&#x27;\n&#x27;을 사용하지 않고 endl로 리턴했다가 시간초과를 한 번 봤다. 주의하자&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    priority_queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, greater&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; pq;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; num;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; num;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(num == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(num == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(num);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1927&quot;&gt;1927번: 최소 힙&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Github Page 구축</title>
		<published>2023-03-03T00:00:00+00:00</published>
		<updated>2023-03-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/github-page-setting/" type="text/html"/>
		<id>https://js970.github.io/github-page-setting/</id>
		<content type="html">&lt;h1 id=&quot;zola-sahyonhagi&quot;&gt;Zola 사용하기&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;zola&quot;&gt;Zola?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Zola는 Static Site Generator(SSG)이다.&lt;&#x2F;li&gt;
&lt;li&gt;Eleventy, Jekyll과 다르게 버전 관련 이슈가 없다.&lt;&#x2F;li&gt;
&lt;li&gt;Hugo와 다르게 단순한 디렉토리 계층 구조를 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;개인 Github Page등의 용도로 간단한 사이트를 생성하기에 적당하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;overview&#x2F;&quot;&gt;Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xypnox.com&#x2F;blag&#x2F;posts&#x2F;migrating-to-zola&#x2F;&quot;&gt;Migrating to Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;page-ssaensseon-mic-ssihaeng&quot;&gt;Page 생성 및 실행&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위의 Zola homepage에서 Docs를 참고하면 Zola의 설치를 어렵지 않게 할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;원하는 경로에서 다음 명령어를 입력한다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;zola init myblog(수정가능)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Zola Docs에서 설명한 요건을 충족한다면 아래 명령어를 통해 127.0.0.1(내부순환루프)에서 시뮬레이션이 가능하다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;zola serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;theme-jjeohyonhagi&quot;&gt;Theme 적용하기&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;다른 SSG에 비해 비교적 테마 선택의 폭이 좁다는 단점이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;개인 Github Blog용 Theme으로 DeepThought, xyblag를 사용해 보았다.&lt;&#x2F;li&gt;
&lt;li&gt;xyblag가 깔끔하다고 판단되고 모바일에서도 정상적으로 작동하여 xyblag를 메인 테마로 사용할 예정이다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 xyblag테마 적용 시 글자 크기가 살짝 부담스러울 정도로 크다. 한글 폰트가 나눔 고딕이 아닌 바탕체인데 이것 역시 불편하다. 이것을 바꾸는 방법에 대해서 알아봐야 겠다.&lt;&#x2F;li&gt;
&lt;li&gt;DeepThought의 경우 다양한 이미지가 포함된 테마이며, 많은 social link가 포함한다.&lt;&#x2F;li&gt;
&lt;li&gt;DeepThought는 일부 환경에서 가로 폭이 너무 좁고, 양각을 표현하는 음영이 내 취향에는 맞지 않아 현재 사용하고 있지 않다. 하지만 xyblag와 달리 폰트 크기는 매우 만족스럽다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xypnox&#x2F;blag&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;xypnox&#x2F;blag&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RatanShreshtha&#x2F;DeepThought&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;RatanShreshtha&#x2F;DeepThought&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기본적으로 Theme의 README.md를 읽어보고 따라하면 적용에는 큰 어려움이 없다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;하지만 github에 커밋하기 위해서는 $blogpath&#x2F;theme&#x2F; 위치에서 서브모듈로 추가하는 것이 바람직하다. 아래는 이를 실행하는 코드이다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;cd themes
&lt;&#x2F;span&gt;&lt;span&gt;git submodule add https:&#x2F;&#x2F;themepath
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;서브모듈로 theme폴더에 테마를 추가한 이후에는 다시 메인 경로에서 config.toml을 적용할 테마에 알맞은 형식으로 수정해야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이외에도 테마마다 필요로 하는 toml파일이 다르기 때문에 테마 템플릿의 파일 구조를 파악하여 필요한 파일을 복사해 넣어야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;blag, DeepThought는 content폴더가 비슷한 구조를 가지고 있어서 적은 비용으로 테마 변경이 가능하지만, 그렇지 않은 테마도 있으므로 잘 확인하고 적용해야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;작동하지 않는 페이지가 있을 경우 해당 테마에서 제공하는 demo page를 확인하여 원인을 파악해야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;github-action-configuration&quot;&gt;Github Action Configuration&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;github-actioniran&quot;&gt;Github Action이란?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Gtihub에서 제공하는 Auto Pipeline 기능이다.&lt;&#x2F;li&gt;
&lt;li&gt;자세하게는 더 알아봐야 겠지만 Github Page구축을 위한 Github Action 설정은 다음과 같다.
&lt;ul&gt;
&lt;li&gt;main브랜치에 push할 때마다 build해서 gh-pages브랜치에 적용&lt;&#x2F;li&gt;
&lt;li&gt;build는 구체적으로 zola의 기능을 이용하여 마크다운으로 기술된 포스트를 html, css, js로 변환하는 과정을 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;github page blog를 위해서는 html을 기반으로 기술되어야 하므로 위와 같은 작업이 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;github-action-sseojjeon&quot;&gt;Github Action 설정&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;github repository내에 .github폴더를 생성한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;.github폴더 내에 workflows폴더를 생성한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;workflows폴더에는 main.yml파일이 있는데 이 파일을 통해 Github Action의 flow를 설정한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래는 zola를 Github Action을 통해 커밋 즉시 페이지에 적용되도록 하는 main.yml 코드이다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# On every push this script is executed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Build and deploy GH Pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github.ref == &amp;#39;refs&#x2F;heads&#x2F;main&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;checkout
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v3.0.0
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build_and_deploy
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shalzz&#x2F;zola-deploy-action@v0.16.1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Target branch
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PAGES_BRANCH&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gh-pages
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Provide personal access token
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TOKEN&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Or if publishing to the same repo, use the automatic token
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;자세한 yml파일의 설정 설명은 Zola docs를 참고한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;deployment&#x2F;github-pages&#x2F;&quot;&gt;GitHub Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pages-sseojjeon&quot;&gt;Pages 설정&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;%EA%B3%84%EC%A0%95%EC%9D%B4%EB%A6%84.github.io&quot;&gt;계정이름.github.io&lt;&#x2F;a&gt; 의 형태로 github repository를 생성한다.&lt;&#x2F;li&gt;
&lt;li&gt;Settings의 Pages에서 Deploy from branch로 설정하고 Branch를 gh-pages로 설정한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;makeudaun-sahyonhagi&quot;&gt;마크다운 사용하기&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Zola(Eleventy, Jekyll역시 마찬가지이다)는 *.md파일로 페이지를 쉽고 빠르고 간단하게 작성하면 이를 static site로 변환해 주는 프레임워크이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Notion등과 다르게 기본적인 마크다운 문법에 대해 숙지하고 있어야 원활한 사용이 가능하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;xyblag(DeepThought역시 마찬가지이다)의 tags 및 categories기능을 사용하기 위해서는 taxonomies를 설정해 주어야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래와 같은 구문을 *.md파일 위에 기술하여 포스트의 제목 및 날짜, taxonomies의 설정이 가능하다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+++
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title = &amp;quot;Post name&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;date = 2023-01-06
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;taxonomies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;categories = [&amp;quot;category1&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tags = [&amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+++
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;기본적인 마크다운 문법에 관한 가이드로는 DeepThought 테마에서 템플릿 페이지로 있던 Basic Markdown Syntax를 참고하면 될 듯 하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;js970.github.io&#x2F;posts&#x2F;example&#x2F;&quot;&gt;Basic Markdown Syntax&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;todo&quot;&gt;TODO&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;xyblag테마에서 한글 폰트 및 글자 크기 조정하는 방법 알아보기&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1780 - 종이의 개수</title>
		<published>2023-03-02T00:00:00+00:00</published>
		<updated>2023-03-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1780-jjoniyi-ggasu/" type="text/html"/>
		<id>https://js970.github.io/1780-jjoniyi-ggasu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 28일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 분할정복&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;혹시나 하는 마음에 chat GPT에게 문제를 그대로 주었다&lt;&#x2F;li&gt;
&lt;li&gt;한번에 정답을 맞췄다... 충격적이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;vector&amp;lt;vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; paper;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_all_same&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = x; i &amp;lt; x + size; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = y; j &amp;lt; y + size; j++) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(paper[x][y] != paper[i][j]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;count_paper&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_all_same&lt;&#x2F;span&gt;&lt;span&gt;(x, y, size)) {
&lt;&#x2F;span&gt;&lt;span&gt;        count[paper[x][y] + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]++;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; next_size = size &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;; j++) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count_paper&lt;&#x2F;span&gt;&lt;span&gt;(x + i * next_size, y + j * next_size, next_size, count);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    paper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;(N, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(N));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N; j++) {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; paper[i][j];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count_paper&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, N, count);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; c : count) {
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1780&quot;&gt;1780번: 종이의 개수&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>프로그래밍언어론 2023-03-02 수업정리</title>
		<published>2023-03-02T00:00:00+00:00</published>
		<updated>2023-03-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/3-2-suheojjeonri/" type="text/html"/>
		<id>https://js970.github.io/3-2-suheojjeonri/</id>
		<content type="html">&lt;h1 id=&quot;flow&quot;&gt;Flow&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;안전한 프로그래밍 언어?&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어에 대한 담론&lt;&#x2F;li&gt;
&lt;li&gt;프로그래밍 언어와 패러다임&lt;&#x2F;li&gt;
&lt;li&gt;추상화란?&lt;&#x2F;li&gt;
&lt;li&gt;프로그램, 프로세스, 프로세서&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;anjjeohan-peuroggeraeonco-heoeo&quot;&gt;안전한 프로그래밍 언어?&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;교수님이 상담을 하는 상황을 가정해 보자, 상담을 위해 대기하고 있는 교수님의 오피스에 호랑이가 들어온다면? 매우 위험한 상황이다. 또한 한국어를 구사하지 못해 의사소통이 이루어지지 않는 사람이 들어오는 경우에도 상담이라는 목적을 달성할 수 없게 된다. 프로그래밍 언어에서도 마찬가지이다. 어떤 함수에 매개변수로 적절한 타입이 들어가지 않는다면 해당 함수가 비정상적으로 동작하거나 에러를 띄울 것이다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;C, C++, Java등의 언어에서는 type이 정의된 상황이라고 생각할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Python, Javascript등의 언어는 typeless(?)처럼 보인다. 이는 불안정성을 야기하고 프로그래머는 이에 대해 숙지하고 있어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-heoeoe-ddahan-ddaron&quot;&gt;프로그래밍 언어에 대한 담론&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;언어는 구문(Syntax)과 의미(Semantics)로 이루어져 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Syntax, Semantics는 언어의 설계도이다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 현실 세계로 implementation하는 과정 자체는 다소 난해할 수 있다.(구문론, 의미론)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraeonco-paereodaim&quot;&gt;프로그래밍 패러다임&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;어떤 방식으로 프로그램을 작성해야 할 것인지, 프로그램 수행 모델은 어떨 지에 따라 프로그래밍 패러다임이 바뀐다. Church가 제시한 $\lambda - calculus$ 방식, 튜링의 튜링 머신 방식, 이후 춈스키가 분류한 언어의 4분류에 따른 각각의 방식 모두 별개의 프로그래밍 패러다임을 가진다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;춈스키는 프로그래밍 언어를 아래와 같은 4개의 오토마타로 인식됨에 따라 분류했다.
&lt;ul&gt;
&lt;li&gt;TM(Turing Machine)&lt;&#x2F;li&gt;
&lt;li&gt;PDA(Push Down Automata)&lt;&#x2F;li&gt;
&lt;li&gt;LBA(Linear Bounded Automata)&lt;&#x2F;li&gt;
&lt;li&gt;FA(Finate Automata)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 분류 중 선형 한계 오토마타(LBA)가 인식하는 프로그래밍 언어가 현재 가장 많이 쓰이는 폰 노이만 구조의 컴퓨터에서 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 여러 프로그램 수행 모델들에 따라 각각 다른 프로그래밍 패러다임을 가진다고 말할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cussanhwa-abstraction-ran&quot;&gt;추상화(Abstraction)란?&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;지금까지 CS에 대해 공부하면서 추상화 라는 표현에 대해 직관적으로만 이해했다. 아직 명확하게 정의된 형태로 이해가 가는 개념은 아니지만 일부 예시를 들자면 아래와 같다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램을 추상화하면 알고리즘이 된다. &lt;&#x2F;li&gt;
&lt;li&gt;class를 추상화하면 자료 구조가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;자료 구조를 추상화하면 연산이 된다.
추상화의 반대 표현은 구체화이다.&lt;&#x2F;li&gt;
&lt;li&gt;연산을 구체화하면 자료 구조가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;자료 구조를 구체화하면 class가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘을 구체화하면 프로그램이 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;peuroggeraem-peurosesse-peurosesse&quot;&gt;프로그램, 프로세스, 프로세서&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;익숙한 개념이지만 다시 한 번 정리하자면 아래와 같다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램은 하드디스크에 저장되어 있는 프로세스의 실행 파일이다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세스는 프로그램이 메모리에서 실행되는 상태를 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;프로세서는 프로그램의 의도대로 메모리의 내용을 바꾼다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>webOS on Raspberry pi 4</title>
		<published>2023-03-01T00:00:00+00:00</published>
		<updated>2023-03-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/webos-on-raspberry-pi-4/" type="text/html"/>
		<id>https://js970.github.io/webos-on-raspberry-pi-4/</id>
		<content type="html">&lt;h1 id=&quot;webos-ose-open-source-eddition&quot;&gt;webOS OSE(open source eddition)&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;webOS의 오픈 소스 버전이다.&lt;&#x2F;li&gt;
&lt;li&gt;필요에 따라 커스텀 빌드가 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;빌드 시스템으로는 &lt;strong&gt;yocto&lt;&#x2F;strong&gt;를 사용하며, 이는 18.04이전 버전의 Ubuntu에서 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;본 글에서는 라즈베리파이4에 설치할 운영체제인 &lt;strong&gt;webOS OSE&lt;&#x2F;strong&gt;를 빌드하는 과정을 설명한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;jjubimul&quot;&gt;준비물&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;18.04 이하 버전의 ubuntu(VM 안됨)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;이후 버전으로 빌드를 시도하면 &lt;strong&gt;yocto&lt;&#x2F;strong&gt;가 에러뜬다.&lt;&#x2F;li&gt;
&lt;li&gt;본 빌드에서는 &lt;strong&gt;Ubuntu 18.04.6 LTS&lt;&#x2F;strong&gt;를 사용하였다.&lt;&#x2F;li&gt;
&lt;li&gt;개인 서버는 &lt;strong&gt;Ubuntu 22.02 LTS&lt;&#x2F;strong&gt;를 사용중이고, 여기서 빌드를 시도할 경우 &lt;strong&gt;yocto&lt;&#x2F;strong&gt;설치 파일을 제대로 다운로드하지 못하는 문제가 있었다. 그냥 맘편히 VMWARE에서 &lt;strong&gt;Ubuntu 18.04.6 LTS&lt;&#x2F;strong&gt; 로 설치했다. ⇒ 진짜 이틀을 날린 희대의 실수가 되었다… VM은 쓰지 말 것..&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;빌드 시스템(&lt;strong&gt;yocto&lt;&#x2F;strong&gt;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;yocto&lt;&#x2F;strong&gt; 에 대해서 자세하게 조사하지는 않았으며, 그냥 webOS를 빌드하기 위한 빌드 시스템 정도로 파악하고 넘어갔다.&lt;&#x2F;li&gt;
&lt;li&gt;webOS OSE는 yocto를 통한 빌드 시 webOS image를 수정하여 빌드하는 것이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;본 빌드에서는 따로 webOS image를 수정 또는 변경하지 않고 기본 상태 그대로 빌드했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;gcc&lt;&#x2F;strong&gt;(8.2버전 이상)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu18.04.6&lt;&#x2F;strong&gt;설치 후 빌드를 시도하였으나 g++컴파일러가 헤더를 charconv헤더를 인식하지 못해 빌드에 실패했다는 에러가 발생했다. 해당 에러에 대해 검색해 보니 8.2버전 이상의 g++컴파일러를 필요로 했다.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu18.04.6&lt;&#x2F;strong&gt;의 기본 설치된 gcc의 버전은 7.4였다.&lt;&#x2F;li&gt;
&lt;li&gt;gcc의 버전 업데이트를 위해 다음과 같은 커멘드를 입력하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;sudo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add-apt&lt;&#x2F;span&gt;&lt;span&gt;-repository ppa:ubuntu-toolchain-r&#x2F;test
&lt;&#x2F;span&gt;&lt;span&gt;sudo apt-get update
&lt;&#x2F;span&gt;&lt;span&gt;sudo apt-get install gcc-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt; g++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-11
&lt;&#x2F;span&gt;&lt;span&gt;sudo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;update-alternatives &lt;&#x2F;span&gt;&lt;span&gt;--install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11 110 &lt;&#x2F;span&gt;&lt;span&gt;--slave &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-11
&lt;&#x2F;span&gt;&lt;span&gt;sudo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;update-alternatives &lt;&#x2F;span&gt;&lt;span&gt;--config gcc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;다음은 gcc11을 설치하는 과정이다.
&lt;ul&gt;
&lt;li&gt;gcc의 최신 버전이 올라오는 &lt;strong&gt;PPA&lt;&#x2F;strong&gt;(Personal Package Archive)를 추가한다.(1행)&lt;&#x2F;li&gt;
&lt;li&gt;gcc-11을 설치한다.(3행)&lt;&#x2F;li&gt;
&lt;li&gt;실행 시 버전을 명시하지 않고도 바로 사용할 수 있도록 gcc에 매핑시킨다.(4행)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kukuta.tistory.com&#x2F;394&quot;&gt;[gcc] Ubuntu 20.04에서 최신 버전 gcc설치하기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Raspberry pi 4&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Target machine으로 Raspberry pi 4, 4GB모델을 사용했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;sd card&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;webOS OSE의 image가 올라갈 저장 공간으로 sd card가 있어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;64GB sd card를 사용하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;build&quot;&gt;Build&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;아래 페이지의 README.md를 참고하여 빌드한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;webosose&#x2F;build-webos&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;webosose&#x2F;build-webos&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;절대로&lt;&#x2F;code&gt; VM을 사용해서 빌드를 시도하지 말자… 애초에 README.md에서도 VM을 사용하지 말라고 명시했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;빌드 시스템(yocto)설치&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;webosose&#x2F;build-webos.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; build-webos
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; scripts&#x2F;prerequisites.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;빌드 환경의 총 cpu코어 수 조사, 두 값을 곱한 값이 총 코어 수이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Pyhsical CPU
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc&#x2F;cpuinfo | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;physical id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniq &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wc -l
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Pyhsical CPU cores
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc&#x2F;cpuinfo | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpu cores&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniq
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;빌드 시작 전 configure&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;mcf -p &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;cpu core&amp;gt; -b &amp;lt;cpu core&amp;gt; raspberrypi4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;빌드 시작&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; webos-build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(23&#x2F;02&#x2F;16 기준으로 아래와 같은 에러가 발생하며 더 이상 진행하지 못하고 있다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;webOS_on_Raspberry_pi_4&#x2F;Screenshot_from_2023-02-16_22-23-01.png&quot; alt=&quot;Screenshot from 2023-02-16 22-23-01.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1697 - 숨바꼭질</title>
		<published>2023-02-28T00:00:00+00:00</published>
		<updated>2023-02-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1697-ssubaggogjji/" type="text/html"/>
		<id>https://js970.github.io/1697-ssubaggogjji/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 28일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&#x2F;Retry&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : BFS, DFS, DP, Graph&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;K가 N보다 작을 경우 N은 K로 이동하기 위해 한 칸씩 뒤로 가는 경우밖에 없다. 따라서 K가 N보다 작거나 같은 경우에 대해서는 예외 처리를 한다.&lt;&#x2F;li&gt;
&lt;li&gt;이제 나머지 경우인 K가 N보다 큰 경우에 대해서만 생각한다.&lt;&#x2F;li&gt;
&lt;li&gt;N이 K까지 도달하기 위해서는 한 칸 앞으로 가거나 뒤로 가는 연산을 적절히 한 후 가능한 경우 2배 연산까지 활용해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 내가 생각한 아이디어이다.
&lt;ul&gt;
&lt;li&gt;arr배열은 index, distance를 pair형태로 저장하는 배열이다.&lt;&#x2F;li&gt;
&lt;li&gt;arr배열의 index는 0부터 K까지의 값을 가지며, distance는 기본적으로 K-index의 값으로 초기화된다.(한 칸씩 움직여서 도달하는데 걸리는 시간)&lt;&#x2F;li&gt;
&lt;li&gt;calc라는 함수를 통해 arr배열에서 2배 연산을 통해 이동 가능한 지점에 대한 배열 값을 초기화한다.
&lt;ul&gt;
&lt;li&gt;arr[k] = 0 → arr[k&#x2F;2] = 1 → arr[k&#x2F;2&#x2F;2] = 2 …&lt;&#x2F;li&gt;
&lt;li&gt;k가 짝수인 경우라면 위 연산만으로 초기화하면 되지만 k가 홀수인 경우라면 k&#x2F;2, (k&#x2F;2)+1 에 대해서 모두 초기화 해 준다. 이 경우에는 1칸 움직인 후 2배 연산을 하기 떄문에 짝수인 경우와 달리 2초의 시간을 더해 준다.&lt;&#x2F;li&gt;
&lt;li&gt;수가 작은 경우(1, 3, 5 등) 짝수와 홀수인 경우에 대해 곱셈 연산을 해서 이동하는 것보다 1칸씩 이동하여 연산하는 것이 더 빠를 수 있다. 이러한 경우를 포함시키기 위해 원래 배열의 값과 연산값 중 작은 값을 선택하도록 코드를 작성한다.&lt;&#x2F;li&gt;
&lt;li&gt;arr[k&#x2F;2]등에 대한 연산이 종료되었다면 calc를 재귀 호출하여 해당 수에서의 곱셈 이동에 대해 배열을 계속해서 초기화한다.&lt;&#x2F;li&gt;
&lt;li&gt;k==1일 경우 함수를 종료한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 아이디어를 떠올리는 데까지 시행착오가 몇 번 있었지만 정상적으로 작동함을 확인했따.&lt;&#x2F;li&gt;
&lt;li&gt;그런데… 이 문제를 위와 같이 풀면 DP를 사용해서 풀이한 것이 된다. 하지만 백준에서 이 문제의 카테고리는 그래프 이론, 그래프 탐색, BFS이다. 그래프 이론을 이용하여 다시 풀어보자&lt;&#x2F;li&gt;
&lt;li&gt;DP는 DAG에 대해서만 사용해야 한다고 한다. 본 문제처럼 정점의 방문 선후 과계가 명확하지 않은 경우에는 사이클에 의해 잘못된 답을 구할 수 있게 된다고 한다…
&lt;ul&gt;
&lt;li&gt;DAG : Directed Acyclic Graph, 유향 비순환 그래프&lt;&#x2F;li&gt;
&lt;li&gt;DAG에서는 한번 거친 노드로 다시 돌아오지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;본 문제에서 나의 알고리즘은 한번 거친 노드로 다시 돌아오는 부분이 있다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 출발 노드 자체가 다르고 이러한 중복되는 노드에 대해 최솟값 연산을 통해 처리했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;[], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(k == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(k%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        arr[k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= (arr[k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; arr[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) ? arr[k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;: arr[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(arr, k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        arr[k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= (arr[k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; arr[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) ? arr[k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;: arr[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        arr[(k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= (arr[(k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; arr[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) ? arr[(k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;: arr[k].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(arr, k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(arr, (k&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, K;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(K &amp;lt;= N) cout &amp;lt;&amp;lt; N - K &amp;lt;&amp;lt; endl; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[K+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= K; i++) arr[i] = {i, K-i};
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(arr, K);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        vector&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; point;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; K; i ++)
&lt;&#x2F;span&gt;&lt;span&gt;           point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(arr[i]);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; min = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;999999&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; p : point)
&lt;&#x2F;span&gt;&lt;span&gt;            min = (min &amp;lt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;- N)) ? min : p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;- N);
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; min &amp;lt;&amp;lt; endl;      
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1697&quot;&gt;1697번: 숨바꼭질&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;board&#x2F;view&#x2F;79415&quot;&gt;글 읽기 - 반례, 지적 부탁드릴게요ㅠㅠ&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ko.wikipedia.org&#x2F;wiki&#x2F;%EC%9C%A0%ED%96%A5_%EB%B9%84%EC%88%9C%ED%99%98_%EA%B7%B8%EB%9E%98%ED%94%84&quot;&gt;유향 비순환 그래프&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1764 - 듣보잡</title>
		<published>2023-02-28T00:00:00+00:00</published>
		<updated>2023-02-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1764-ddeubojja/" type="text/html"/>
		<id>https://js970.github.io/1764-ddeubojja/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 28일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : set&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;set에 듣도 못한 사람들을 추가한다.&lt;&#x2F;li&gt;
&lt;li&gt;보도 못한 사람들이 set에 포함되어 있다면 이를 듣도 보도 못한 사람들의 set인 nhs에 추가한다.&lt;&#x2F;li&gt;
&lt;li&gt;nhs의 원소들을 vector컨테이너 ans에 저장한다. ans벡터를 sort한 후 조건에 맞게 출력했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    set&amp;lt;string&amp;gt; nh;
&lt;&#x2F;span&gt;&lt;span&gt;    set&amp;lt;string&amp;gt; nhs;
&lt;&#x2F;span&gt;&lt;span&gt;    string name;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; name;
&lt;&#x2F;span&gt;&lt;span&gt;        nh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(name);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; name;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(nh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(name) != nh.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;            nhs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(name);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;string&amp;gt; ans;
&lt;&#x2F;span&gt;&lt;span&gt;    set&amp;lt;string&amp;gt;::iterator iter;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(iter = nhs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(); iter != nhs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(); iter++)
&lt;&#x2F;span&gt;&lt;span&gt;        ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(*iter);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; ans[i] &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1764&quot;&gt;1764번: 듣보잡&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1620 - 나는야 포켓몬 마스터 이다솜</title>
		<published>2023-02-27T00:00:00+00:00</published>
		<updated>2023-02-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1620-naneunya-pokesmon-masseteo-idache/" type="text/html"/>
		<id>https://js970.github.io/1620-naneunya-pokesmon-masseteo-idache/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 27일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&#x2F;Retry&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : map&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;한동안 마주치지 않아서 endl의 사용이 시간초과를 야기한다는 것을 간과했다. 이 때문에 많이 틀렸다.&lt;&#x2F;li&gt;
&lt;li&gt;기본적으로 map 자료구조를 사용해서 해결할 수 있는 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;숫자를 key값으로 하는 map과 문자열을 key값으로 가지는 map두 개를 선언해서 문제를 해결했다.&lt;&#x2F;li&gt;
&lt;li&gt;unordered_map을 사용하면 map을 사용했을 때보다 살짝 빠르게 문제 풀이가 가능하다. 두 자료구조 모두 제한시간 안에 풀이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;string헤더에서 제공하는 isdigit()함수를 사용하는 법을 기억하도록 하자&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;unordered_map사용 코드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unordered_map&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    unordered_map&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, string&amp;gt; arr_name;
&lt;&#x2F;span&gt;&lt;span&gt;    unordered_map&amp;lt;string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; arr_num;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        string name;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; name;
&lt;&#x2F;span&gt;&lt;span&gt;        arr_name[i] = name;
&lt;&#x2F;span&gt;&lt;span&gt;        arr_num[name] = i;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    string * ans = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; string[M];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; ans[i];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isdigit&lt;&#x2F;span&gt;&lt;span&gt;(ans[i][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]))
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; res = arr_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stoi&lt;&#x2F;span&gt;&lt;span&gt;(ans[i]));
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; res-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; res = arr_num.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(ans[i]);
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; res-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;map 사용 코드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    map&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, string&amp;gt; arr_name;
&lt;&#x2F;span&gt;&lt;span&gt;    map&amp;lt;string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; arr_num;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        string name;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; name;
&lt;&#x2F;span&gt;&lt;span&gt;        arr_name[i] = name;
&lt;&#x2F;span&gt;&lt;span&gt;        arr_num[name] = i;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    string * ans = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; string[M];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; ans[i];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isdigit&lt;&#x2F;span&gt;&lt;span&gt;(ans[i][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]))
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stoi&lt;&#x2F;span&gt;&lt;span&gt;(ans[i])) != arr_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; arr_name[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stoi&lt;&#x2F;span&gt;&lt;span&gt;(ans[i])] &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(arr_num.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(ans[i]) != arr_num.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; arr_num[ans[i]] &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1620&quot;&gt;1620번: 나는야 포켓몬 마스터 이다솜&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1676 - 팩토리얼 0의 개수</title>
		<published>2023-02-27T00:00:00+00:00</published>
		<updated>2023-02-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1676-paegtoriheo-0yi-ggasu/" type="text/html"/>
		<id>https://js970.github.io/1676-paegtoriheo-0yi-ggasu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 27일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : DP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;이전 단계의 값에 특정 조건에 따라 추가 연산을 하면 되는 전형적인 DP문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;5를 소인수로 몇 개를 가지고 있는지에 따라 0의 개수가 늘어나는 것이 핵심이다. (2는 2칸마다 1개씩 생성(?)되므로 충분하다.)&lt;&#x2F;li&gt;
&lt;li&gt;펙토리얼 연산이므로 현재의 수가 소인수로 가지는 5의 개수는 이전 단계의 값에 현 단계의 수에 대한 연산을 조건문을 통해 처리하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;501&lt;&#x2F;span&gt;&lt;span&gt;] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;501&lt;&#x2F;span&gt;&lt;span&gt;; i ++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        arr[i] = arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;125 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) arr[i] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) arr[i] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) arr[i] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; arr[N] &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1676&quot;&gt;1676번: 팩토리얼 0의 개수&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1463 - 1로 만들기</title>
		<published>2023-02-26T00:00:00+00:00</published>
		<updated>2023-02-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1463-1ro-manddeugi/" type="text/html"/>
		<id>https://js970.github.io/1463-1ro-manddeugi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 26일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : DP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;다이나믹 프로그래밍을 이용한다. 이전 단계의 정답을 다음 단계의 정답에 사용할 수 있는 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;1, 2, 3에 대해서만 미리 값을 정해준다. 그 이후의 값들에 대한 연산 결과는 해당 수를 3으로 나누거나, 2로 나누거나 1로 뺀 수의 연산값 중 가장 작은 값에 1을 더한 값이다.&lt;&#x2F;li&gt;
&lt;li&gt;물론 3으로 나누어떨어지거나 2로 나누어 떨어질 경우에만 해당 경우에 대해 고려하고 그렇지 않다면 1로 뺀 수의 연산값에 1을 더한 값이 연산값이 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;climits&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000001&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000001&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        arr[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000001&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; min = INT_MAX;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            min = (arr[i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt; arr[i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]) ? arr[i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] : arr[i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            min = (min &amp;lt; arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) ? min : arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;!=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) min = (arr[i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt; arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) ? arr[i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] : arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;!=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; i%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) min = (arr[i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt; arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) ? arr[i&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] : arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; min = arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        arr[i] = min + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; arr[N] &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1463&quot;&gt;1463번: 1로 만들기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1389 - 케빈 베이컨의 6단계 법칙</title>
		<published>2023-02-24T00:00:00+00:00</published>
		<updated>2023-02-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1389-kebbi-beikeonyi-6ddaggy-bbeocig/" type="text/html"/>
		<id>https://js970.github.io/1389-kebbi-beikeonyi-6ddaggy-bbeocig/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 24일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&#x2F;Retry&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : BFS, Graph, 다익스트라 알고리즘, 플로이드 워셜 알고리즘&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;1260번 문제와 마찬가지로 chat GPT의 코드를 이용하여 학습했다. chat GPT의 코드를 기반으로 문제의 조건에 맞게 일부 수정하여 제출하였다.&lt;&#x2F;li&gt;
&lt;li&gt;다익스트라 알고리즘의 구현은 BFS와 유사한 방식으로 구현되었다. 노드를 이동해 가면서 해당 노드의 인접 노드에 대해 정해진 규칙에 따라(다익스트라 알고리즘에서는 가장 시작 노드로부터weight의 합이 가장 적은 노드부터 탐색한다.) 탐색하고, 이를 priority queue에 삽입하여 모든 노드에 대한 연산이 끝날 때까지 반복한다.&lt;&#x2F;li&gt;
&lt;li&gt;BFS와 구현 상의 차이점으로는, BFS는 visited벡터 컨테이너를 사용하여 방문한 노드인지의 여부를 확인해 모든 노드가 방문되었을 경우 반복문이 끝나는 형식으로 구현되어 있지만, 다익스트라 알고리즘의 경우 노드가 중복해서 queue에 들어갈 수 있다는 점이 가장 큰 차이점이다. 다익스트라 알고리즘에서 노드가 중복해서 queue에 들어가더라도(인접 리스트의 특성상 한번 연산한 노드에 대해서 다시 호출이 되는 구조이다.) 전체 거리가 더 적지 않다면 queue에 삽입하지 않기 때문에 반복문의 탈출이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;다음은 기본적인 다익스트라 알고리즘이다.
&lt;ol&gt;
&lt;li&gt;출발 노드를 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;출발 노드를 기준으로 각 노드의 최소 비용을 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;방문하지 않은 노드 중에서 가장 비용이 적은 노드를 선택한다.&lt;&#x2F;li&gt;
&lt;li&gt;해당 노드를 거쳐서 특정한 노드로 가는 경우를 고려하여 최소 비용을 갱신한다.&lt;&#x2F;li&gt;
&lt;li&gt;3~4를 반복한다.(모든 노드가 방문 처리되었을 때까지)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;다음은 내 코드의 다익스트라 알고리즘의 작동 방식이다.
&lt;ol&gt;
&lt;li&gt;start노드에 대한 dist배열 초기화 및 priority queue로의 삽입&lt;&#x2F;li&gt;
&lt;li&gt;start노드의 인접 리스트를 참조하여 거리값 갱신, 거리값이 dist행렬의 값보다 작다면 초기화하고 priority queue로 push한다.&lt;&#x2F;li&gt;
&lt;li&gt;push한 start노드의 인접 리스트에 있는 노드가 queue에서 pop되면서 2를 반복해서 수행한다. 이 과정은 priority queue가 empty가 아니라면 계쏙해서 반복된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;본 문제에서는 노드 간 weight값이 1이라고 생각할 수 있으므로 모든 비용을 1로 처리했다.&lt;&#x2F;li&gt;
&lt;li&gt;본 코드에서 priority queue컨테이너에 들어가는 pair&amp;lt;int, int&amp;gt;는 first가 start로부터 현재 노드까지의 이동 비용이고, second가 인접 노드의 노드 번호를 의미한다.
&lt;ul&gt;
&lt;li&gt;이 부분의 구현은 chat GPT의 구현이었는데, 사실 어떤 의도로 이러한 코딩을 했는지는 잘 모르겠다. 아마 인접 노드의 번호가 곧 가중치를 의미하는 상황인 것으로 추측된다. 본 문제에서 모든 가중치는 1로 통일되기 때문에 코드를 수정하여 노드 번호의 의미만 가지도록 하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;나는 이 문제를 다익스트라 알고리즘을 사용하여 해결하였다. 하지만 가중치가 1로 통일되어 있는 상황이기 때문에 BFS알고리즘으로도 충분히 해결 가능하다. 또한 백준 카테고리 상으로는 플로이드-워셜 알고리즘을 사용해서도 해결 가능하다. 추후에 시도해 볼 것. (기본적으로 그래프 상에서 두 정점 사이의 최소 거리를 구하는 알고리즘이니 당연하다…)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;climits&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; INF = INT_MAX;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;vector&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; adj[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10001&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dijkstra&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dist&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    priority_queue&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, vector&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;, greater&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; pq;
&lt;&#x2F;span&gt;&lt;span&gt;    pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,start});
&lt;&#x2F;span&gt;&lt;span&gt;    dist[start][start] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(!pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; u = pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; v : adj[u])
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; w = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; weight = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(dist[start][u] + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; dist[start][w])
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                dist[start][w] = dist[start][u] + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;({dist[start][w], w});
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, m;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;** dist = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        dist[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j++)
&lt;&#x2F;span&gt;&lt;span&gt;            dist[i][j] = INF;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; m; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; u, v;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;
&lt;&#x2F;span&gt;&lt;span&gt;        adj[u].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;({v, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;        adj[v].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;({u, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dijkstra&lt;&#x2F;span&gt;&lt;span&gt;(i, dist);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        sum[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt;= n; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            sum[i] += dist[i][j];
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; min = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99999&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(min &amp;gt; sum[i])
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            min = sum[i];
&lt;&#x2F;span&gt;&lt;span&gt;            idx = i;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; idx &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1389&quot;&gt;1389번: 케빈 베이컨의 6단계 법칙&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;m.blog.naver.com&#x2F;ndb796&#x2F;221234424646&quot;&gt;23. 다익스트라(Dijkstra) 알고리즘&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1260 - DFS와 BFS</title>
		<published>2023-02-23T00:00:00+00:00</published>
		<updated>2023-02-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1260-dfswa-bfs/" type="text/html"/>
		<id>https://js970.github.io/1260-dfswa-bfs/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 23일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&#x2F;Retry&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : DFS, BFS, Graph&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DFS와 BFS를 조건에 맞게 구현하기만 하면 되는 문제이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;DFS, BFS의 개념은 자료 구조 수업에서 배웠다고 생각했지만 막상 구현하려고 하니 어려움이 많았다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;결국 구현의 핵심은 adjacency list와 visited list의 사용이었다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;각 블로그 및 교재를 참조하였으나 잘 이해가 되지 않아서… chat GPT에게 코드를 요청했고 그 코드를 바탕으로 학습하였다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래는 DFS와 BFS의 chat GPT코드의 개념이다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DFS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;baekjoon&#x2F;DFS.png&quot; alt=&quot;DFS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;인접 리스트의 첫 번째 원소부터 접근하여 해당 노드가 visited == false인 경우 그 노드를 시작 노드로 가지는 DFS를 호출한다. 이러한 방식으로 첫 번째 호출된 DFS의 시작 노드에 대한 모든 adjacency list에 대한 탐색을 모두 마치면 함수가 종료된다.&lt;&#x2F;li&gt;
&lt;li&gt;BFS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;baekjoon&#x2F;BFS.png&quot; alt=&quot;BFS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;앞선 DFS는 함수의 재귀 호출을 통해 구현했다면 BFS는 while loop과 queue를 통해 구현했다. start node에서 시작하여 한 번의 루프마다 queue에서 pop을 수행한다. queue에서 pop 된 후 pop된 노드에 대한 인접 리스트를 탐색한다. 인접 리스트의 원소가 visited == false인 경우 해당 노드를 queue에 push한다. 이런 방식으로 queue가 empty가 아니라면 계속해서 while문을 수행한다. queue를 통해 계층 별로 순서에 맞게 탐색하는 BFS를 구현할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;DFS, BFS와 별개로 본 문제에서 요구한 사항인 방문 가능한 노드가 다수 있을 경우 번호가 작은 노드를 먼저 방문해야 한다는 조건에 따라 adjacency list를 오름차순으로 정렬해 주어야 했다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;이는 algorithm 헤더의 sort method를 이용하여 구현하였다.&lt;&#x2F;li&gt;
&lt;li&gt;본 문제에서 노드 번호는 1부터 시작하는데 이를 간과한 채 sort함수를 실행하여 segmentation fault로 한번 오답을 제출했다. 범위를 바꿔 주니 정답을 출력했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;chat GPT 코드 - give me c++ code implementing DFS and BFS algorithm&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stack&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to perform Depth First Search (DFS)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adj&lt;&#x2F;span&gt;&lt;span&gt;[], vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visited&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    visited[node] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; node &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; adj[node].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; neighbor = adj[node][i];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!visited[neighbor]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(neighbor, adj, visited);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to perform Breadth First Search (BFS)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;bfs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adj&lt;&#x2F;span&gt;&lt;span&gt;[], vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visited&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; q;
&lt;&#x2F;span&gt;&lt;span&gt;    visited[start] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(start);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(!q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; node = q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; node &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; adj[node].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; neighbor = adj[node][i];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!visited[neighbor]) {
&lt;&#x2F;span&gt;&lt;span&gt;                visited[neighbor] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(neighbor);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, m;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; n: number of nodes, m: number of edges
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; adj[n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; adjacency list
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; build the graph
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; m; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; u, v;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;
&lt;&#x2F;span&gt;&lt;span&gt;        adj[u].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(v);
&lt;&#x2F;span&gt;&lt;span&gt;        adj[v].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(u);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; initialize visited array
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visited&lt;&#x2F;span&gt;&lt;span&gt;(n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; perform DFS
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!visited[i]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(i, adj, visited);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; reset visited array
&lt;&#x2F;span&gt;&lt;span&gt;    visited.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assign&lt;&#x2F;span&gt;&lt;span&gt;(n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; perform BFS
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!visited[i]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bfs&lt;&#x2F;span&gt;&lt;span&gt;(i, adj, visited);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;놀랍게도…? syntax error가 있다(2023&#x2F;02&#x2F;23). 벡터 선언에 있어 lvalue 가지고 동적 할당이 아니라 바로 선언을 해버렸다. 아래의 제출 코드는 이 문법 문제를 동적 할당으로 바꾸어 해결했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;제출 코드&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adj&lt;&#x2F;span&gt;&lt;span&gt;[], vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visited&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    visited[node] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; node &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; adj[node].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; neighbor = adj[node][i];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!visited[neighbor])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(neighbor, adj, visited);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;bfs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adj&lt;&#x2F;span&gt;&lt;span&gt;[], vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visited&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; q;
&lt;&#x2F;span&gt;&lt;span&gt;    visited[start] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(start);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(!q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; node = q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; node &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; adj[node].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; neighbor = adj[node][i];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!visited[neighbor])
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                visited[neighbor] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(neighbor);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, m, v;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; v;
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * adj = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; m; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; u, v;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; u &amp;gt;&amp;gt; v;
&lt;&#x2F;span&gt;&lt;span&gt;        adj[u].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(v);
&lt;&#x2F;span&gt;&lt;span&gt;        adj[v].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(u);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= n; i++) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(adj[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), adj[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;visited&lt;&#x2F;span&gt;&lt;span&gt;(n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(v, adj, visited);
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    visited.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assign&lt;&#x2F;span&gt;&lt;span&gt;(n+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bfs&lt;&#x2F;span&gt;&lt;span&gt;(v, adj, visited);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1260&quot;&gt;1260번: DFS와 BFS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1107 - 리모컨</title>
		<published>2023-02-18T00:00:00+00:00</published>
		<updated>2023-02-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1107-rimokeon/" type="text/html"/>
		<id>https://js970.github.io/1107-rimokeon/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 골드 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 18일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 브루트포스&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;전역 배열 valid를 만들어서 고장난 버튼을 사용하지 못하도록 한다.&lt;&#x2F;li&gt;
&lt;li&gt;possible() upward_search(), downward_search()를 구현하였다.
&lt;ul&gt;
&lt;li&gt;possible은 고장난 버튼 때문에 한번에 채널을 누를 수 없다면 false, 고장난 버튼과 관계없이 채널을 누를 수 있다면 true를 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;upward_search는 입력받은 인자에 대해 possible이 true를 반환할 때까지 입력받은 인자를 1씩 증가시킨다. possible이 true를 반환하면 이 값을 return한다.&lt;&#x2F;li&gt;
&lt;li&gt;downward_search는 upward_search와 동일하게 동작하지만 인자를 1씩 감소시키며 탐색한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 세 함수를 이용하여 바꾸고 싶은 채널(N)에 대해 +버튼과 -버튼을 가장 적게 눌러도 되는 값인 up과 down을 초기화시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;100번 채널에서 시작하므로 변경할 채널을 직접 입력하는 것보다 100번 채널에서 직접 + - 버튼을 통해 이동하는 것이 더 빠를 경우를 생각한다. 이는 뺄셈 연산으로 구현 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 로직으로 이 문제를 풀 수 있으나 아래의 주의사항을 유념해서 코딩해야한다.
&lt;ul&gt;
&lt;li&gt;0번 버튼 빼고 모든 버튼이 고장났을 때 up은 논리적으로 계산할 수 없으므로 무한루프가 발생한다. 이를 처리해 주어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;up과 down의 값이 같을 경우 down값을 선택하도록 코딩해야 한다(999가 1000보다 버튼을 적게 누르기 때문이다)&lt;&#x2F;li&gt;
&lt;li&gt;down값이 음수가 되어서는 안된다.&lt;&#x2F;li&gt;
&lt;li&gt;바꾸고 싶은 채널(N) - down값이 음수가 되어서는 안된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위 네 가지 반례를 생각하지 못해서 한번 틀렸다. 이런 반례들을 확실하게 처리하는 연습을 해야겠다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;upward_search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;downward_search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;possible&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; valid[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;possible&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alter&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    string alter_s = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(alter);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = alter_s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;()-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i--)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx = alter_s[i] - &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!valid[idx]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;upward_search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alter&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;possible&lt;&#x2F;span&gt;&lt;span&gt;(alter)) alter++;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; alter;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;downward_search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alter&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;possible&lt;&#x2F;span&gt;&lt;span&gt;(alter) &amp;amp;&amp;amp; alter &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) alter--;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; alter;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; invalid;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; invalid;
&lt;&#x2F;span&gt;&lt;span&gt;        valid[invalid] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; num, distance, up, down;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;possible&lt;&#x2F;span&gt;&lt;span&gt;(N))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; i++) 
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(valid[i]) zero = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!zero) up = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;upward_search&lt;&#x2F;span&gt;&lt;span&gt;(N);
&lt;&#x2F;span&gt;&lt;span&gt;        down = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;downward_search&lt;&#x2F;span&gt;&lt;span&gt;(N);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(up-N &amp;gt;= N-down &amp;amp;&amp;amp; N-down &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; down &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            distance = N-down;
&lt;&#x2F;span&gt;&lt;span&gt;            num = down;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            distance = up-N;
&lt;&#x2F;span&gt;&lt;span&gt;            num = up;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        distance = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        num = N;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; _100man = (N &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;) ? N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;-N;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    string num_s = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(num);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; button = (_100man &amp;gt; num_s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() + distance) ? num_s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() + distance : _100man;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; button &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1107&quot;&gt;1107번: 리모컨&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1074 - Z</title>
		<published>2023-02-17T00:00:00+00:00</published>
		<updated>2023-02-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1074-z/" type="text/html"/>
		<id>https://js970.github.io/1074-z/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 17일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 분할정복&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력되는 배열은 행 또는 열의 크기가 $2^n$인 정사각형 형태의 배열이다. 이를 4개의 구역으로 나누는 방식을 재귀적으로 적용하였다.&lt;&#x2F;li&gt;
&lt;li&gt;4개로 나눠진 각각의 구역은 다시 4개의 서로 다른 구역으로 나눌 수 있다. 이 과정을 2*2배열까지 적용한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 문제의 입력을 배열로 구현하면 메모리 초과의 발생이 자명하다. 이에 실제로 배열을 구현하지는 않고 배열의 인덱스를 나타내는 변수 idx를 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;idx는 r행 c열에 위치한 수가 몇 번째로 출력되는지 순서를 나타낸다.&lt;&#x2F;li&gt;
&lt;li&gt;앞서 설명한 4개의 구역을 임의로 1섹터, 2섹터, 3섹터, 4섹터로 분류한다. 1섹터는 $2^{n-1} * 2^{n-1}$개의 칸을 을 0번, 2섹터는 1번, 3섹터는 2번, 4섹터는 3번 통과한 후 해당 섹터의 프레임에 도달한다. 이 값을 섹터의 프레임이 1이 될때까지 재귀적으로 반복한다.&lt;&#x2F;li&gt;
&lt;li&gt;설명이 어려운 것에 비해 코드로 구현한 것은 아래처럼 매우 간단하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, r, c;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; r &amp;gt;&amp;gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; div;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        div = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, N-i);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;((r&#x2F;div)%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; (c&#x2F;div)%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) idx += div * div * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;((r&#x2F;div)%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; (c&#x2F;div)%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) idx += div * div * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;((r&#x2F;div)%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; (c&#x2F;div)%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) idx += div * div * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;((r&#x2F;div)%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; (c&#x2F;div)%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) idx += div * div * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; idx &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1074&quot;&gt;1074번: Z&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1012 - 유기농 배추</title>
		<published>2023-02-16T00:00:00+00:00</published>
		<updated>2023-02-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1012-yuginong-bbacu/" type="text/html"/>
		<id>https://js970.github.io/1012-yuginong-bbacu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 16일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&#x2F;Retry&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : DFS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;pair array를 사용하여 배추가 심어져 있는지의 여부(0, 1)와 벌레가 도달 가능&#x2F;불가능 여부(true, false)의 정보를 저장했다.&lt;&#x2F;li&gt;
&lt;li&gt;배열은 N*M의 크기를 가지는 일차원 배열이며 x, y값이 곧 행과 열의 index이므로 이를 이용하여 배열을 참조했다.&lt;&#x2F;li&gt;
&lt;li&gt;dfs함수를 구현하여 기존의 벌레 도달 지역이 아닌 곳의 배추가 심어져 있다면 ans를 증가시켜 총 필요한 벌레의 수를 구했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span&gt;[], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i%M != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !arr[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(arr, N, M, i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i%M != M-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !arr[i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(arr, N, M, i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i-M &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i-M].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !arr[i-M].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(arr, N, M, i-M);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i+M &amp;lt; N*M)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i+M].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !arr[i+M].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(arr, N, M, i+M); 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; testC;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; testC;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, M, K;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x, y;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ans = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; c &amp;lt; testC; c++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; M &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K;
&lt;&#x2F;span&gt;&lt;span&gt;        pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[N*M];
&lt;&#x2F;span&gt;&lt;span&gt;        ans = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N*M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; K; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
&lt;&#x2F;span&gt;&lt;span&gt;            arr[M*y+x].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N*M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dfs&lt;&#x2F;span&gt;&lt;span&gt;(arr, N, M, i);
&lt;&#x2F;span&gt;&lt;span&gt;                    ans++;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1012&quot;&gt;1012번: 유기농 배추&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>apt commands</title>
		<published>2023-02-14T00:00:00+00:00</published>
		<updated>2023-02-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/apt-commands/" type="text/html"/>
		<id>https://js970.github.io/apt-commands/</id>
		<content type="html">&lt;aside&gt;
💡 아래 커멘드 중 install을 빼고 사용할 곳이 얼마나 있나 싶지만… 멍청하게도 &#x2F;bin에서 다짜고짜 삭제를 감행하는 짓을 벌이고 난 후에 아래 apt purge를 사용해서 완전 삭제가 가능했다. 이런 특수한 경우에 꽤나 유용하게 사용할 수 있다.
&lt;&#x2F;aside&gt;
&lt;h1 id=&quot;apt-usage&quot;&gt;APT Usage&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;패키지 목록 갱신&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;패키지 업그레이드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; upgrade
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;패키지 설치(+dependency)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; install &amp;lt;package&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;패키지 삭제(설정 파일 제외)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; remove &amp;lt;package&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;설정 파일을 포함한 패키지 삭제&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; purge &amp;lt;package&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;관련 패키지 검색&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; search &amp;lt;package&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;패키지 정보 출력&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; show &amp;lt;package&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;패키직 목록 출력&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;설치된 패키지 목록 출력&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --installed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;업그레이드 가능 패키지 목록 출력&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt; list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --upgradable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;도움말&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apt --help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.manualfactory.net&#x2F;11953&quot;&gt;Ubuntu Server &#x2F; apt &#x2F; 패키지 설치, 삭제, 업그레이드하는 명령어&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ubuntu 22.04 local setting</title>
		<published>2023-02-14T00:00:00+00:00</published>
		<updated>2023-02-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/ubuntu-22-04-local-setting/" type="text/html"/>
		<id>https://js970.github.io/ubuntu-22-04-local-setting/</id>
		<content type="html">&lt;aside&gt;
💡 이미 윈도우 등 타 환경에서 우분투 ios파일로 우분투 설치 usb는 만들어서 우분투는 설치되었다고 가정한다.
&lt;&#x2F;aside&gt;
&lt;h1 id=&quot;han-hyeon-bbyeohwan-sseojjeon&quot;&gt;한&#x2F;영 변환 설정&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;fcitx5를 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;ibus, uim등의 방법을 사용할 수도 있지만 이는 추후에 추가한다.(2&#x2F;14&#x2F;2023)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fcitx5&quot;&gt;fcitx5&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;다음 명령어를 터미널에 입력하여 fcitx5를 설치한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install fcitx5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;설치가 완료되면 Settings → Region &amp;amp; Language → Manage Installed Language에서 Keyboard input method system을 fcitx5로 변경한다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 설정이 완료되면 컴퓨터를 재부팅한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; shutdown now
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;재부팅 이후 우측 상태 표시줄의 가장 왼쪽에 키보드 모양 아이콘이 추가된 것을 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;Ubuntu_22_04_Local_Setting&#x2F;Screenshot_from_2023-02-14_15-03-38.png&quot; alt=&quot;Screenshot from 2023-02-14 15-03-38.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;키보드 아이콘을 클릭한 후 configure에서 Available input Method로 Hangul을 추가한다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;Ubuntu_22_04_Local_Setting&#x2F;Screenshot_from_2023-02-14_15-05-16.png&quot; alt=&quot;Screenshot from 2023-02-14 15-05-16.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이를 적용하면 ctrl+space를 통해 한&#x2F;영 변환이 가능하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ibus&quot;&gt;ibus&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;fcitx를 편하게 사용중이었지만... 한글과컴퓨터 한컴오피스 2020 for linux에서 한글 입력은 ibus만 인식된다고 한다... 이에 ibus로 다시 설정하게 되었다.(2023-03-12)&lt;&#x2F;li&gt;
&lt;li&gt;설정 -&amp;gt; 지역 및 언어 -&amp;gt; Korean박스가 체크되어 있는지 확인
&lt;ul&gt;
&lt;li&gt;체크되어 있지 않다면 체크 후 재부팅&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;terminal에 아래와 같이 입력&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ibus-setup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;ibus Preferences에서 Input Method선택, 여기에 Korean - Hangul 추가할 것
&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;Ubuntu_22_04_Local_Setting&#x2F;ibus_setting.png&quot; alt=&quot;ibus preferences&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Setting의 Keyboard에서 Korean(Hangul) 추가하고 나머지는 전부 삭제할 것
&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;Ubuntu_22_04_Local_Setting&#x2F;ibus-settings.png&quot; alt=&quot;Setting-ibus&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;재부팅하면 우측 상단의 상태 표시줄에 한글 입력기가 추가된 것을 볼 수 있다. 이를 우클릭하여 Setup을 선택하면 아래와 같은 창이 표시된다.
&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;Ubuntu_22_04_Local_Setting&#x2F;ibus-pref.png&quot; alt=&quot;ibusHangulSetup&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;이 창에서 한&#x2F;영 변환 토글 키 설정이 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;nvidia-graphic-driver&quot;&gt;nvidia graphic driver&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;여러 가지 설치 방법이 있지만 설치에 꽤 애를 먹었다.&lt;&#x2F;li&gt;
&lt;li&gt;본 글에서는 터미널에서 커맨드를 이용해 수동으로 그래픽 드라이버를 설치한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;suddon-sseoci&quot;&gt;수동 설치&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;우선 아래의 커맨드를 통해 현재 사용중인 그래픽카드를 확인한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; lshw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt; display
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;다음 커맨드를 이용하여 설치 가능한 드라이버 목록을 확인한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ubuntu-drivers&lt;&#x2F;span&gt;&lt;span&gt; devices
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;자신의 그래픽카드에 맞는 버전의 설치 가능한 드라이버를 설치한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install nvidia-driver-xxx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;이때 recommended가 붙어있는 nvidia-driver-525-open을 설치하려고 시도했으나 이 때문에 많은 시간을 소비했다. open버전이 아닌 버전으로 설치해야 했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Enviromnent_Settings&#x2F;Ubuntu_22_04_Local_Setting&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;드라이버의 설치가 완료되면 컴퓨터를 재부팅한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; shutdown now
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;마지막으로 다음 커맨드를 통해 그래픽카드 드라이버의 설치를 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvidia-smi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위의 커맨드를 이용하지 않고 application에서 nvidia x server를 실행하여 그래픽카드를 정상적으로 인식하는지 확인할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;zsh&quot;&gt;zsh&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;zsh-oh-my-zsh-sseoci&quot;&gt;zsh, oh-my-zsh 설치&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;mac에서 익숙하게 사용했던 zsh을 설치한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install zsh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;기본 shell을 변경한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chsh -s &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;which&lt;&#x2F;span&gt;&lt;span&gt; zsh)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;curl을 이용해서 oh-my-zsh 설치(zsh 설정을 관리하는 프레임워크)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# curl설치
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt isntall curl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# oh-my-zsh설치
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sh -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -fsSL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;플러그인 활성화, 쉘 설정 변경은 ~&#x2F;.zshrc를 수정하여 설정 가능하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래는 ohmyzsh의 깃허브 페이지이다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;ref&quot;&gt;Ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;osg.kr&#x2F;archives&#x2F;913#%ED%95%9C%EA%B8%80-%EC%9E%85%EB%A0%A5%EA%B8%B0-fcitx-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95&quot;&gt;Ubuntu 22.04 한글 입력기 3가지 설정 방법(ibus, uim, fcitx) - 오솔길&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hyeon.pro&#x2F;dev&#x2F;nvidia-drive-install-in-ubuntu&#x2F;&quot;&gt;우분투 nvidia 드라이버 설치 | 개발자 상현에 하루하루&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;forums.developer.nvidia.com&#x2F;t&#x2F;nvidia-smi-outputs-no-devices-were-found-on-ubuntu-22-04-driver-520&#x2F;234829&quot;&gt;Nvidia-smi outputs &amp;quot;No devices were found&amp;quot; on Ubuntu 22.04 + driver 520&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1003 - 피보나치 함수</title>
		<published>2023-02-12T00:00:00+00:00</published>
		<updated>2023-02-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1003-pibonaci-hamsu/" type="text/html"/>
		<id>https://js970.github.io/1003-pibonaci-hamsu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 12일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : DP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력값 범위에 따라 fibo(40)까지만 연산하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;fibo(N)에서 사용하는 fibo(1)과 fibo(0)의 호출수는 fibo(N-1)의 fibo(1), fibo(0)의 호출수와 fibo(N-2)의 fibo(1), fibo(0)의 호출수와 같다.&lt;&#x2F;li&gt;
&lt;li&gt;40개의 경우에 대해 이전 값을 배열에 저장해 두는 방식으로 재귀 없이 직접 참조가 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;41&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;41&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        ans[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        ans[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ans[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;41&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        ans[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;+ ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        ans[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;+ ans[i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; T; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; ans[N].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; ans[N].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1003&quot;&gt;1003번: 피보나치 함수&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>18111 - 마인크래프트</title>
		<published>2023-02-12T00:00:00+00:00</published>
		<updated>2023-02-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/18111-mainkeuraepeuteu/" type="text/html"/>
		<id>https://js970.github.io/18111-mainkeuraepeuteu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 12일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 브루트포스&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;주어진 입력 범위에 대한 모든 경우의 수를 탐색한다고 했을 때, 500 * 500 * 256 = 64,000,000이므로 완전 탐색을 해도 시간은 충분하다.&lt;&#x2F;li&gt;
&lt;li&gt;문제에서 놓치기 쉬운 조건들이 많은 편이었다.
&lt;ul&gt;
&lt;li&gt;같은 시간이 걸릴 경우 가장 높은 높이를 가지는 경우를 정답으로 출력할 것&lt;&#x2F;li&gt;
&lt;li&gt;블록의 개수가 부족할 경우에는 블록을 쌓을 수 없고 블록을 캐는 것만 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;블록을 캐면 전체 블록의 수가 그만큼 증가한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;숨은 조건도 있었다.
&lt;ul&gt;
&lt;li&gt;블록을 쌓거나 캐는 순서는 정해진 바가 없다. 탐색 연산 중 일시적으로 전체 블록이 0 미만으로 떨어지더라도 순서를 조정하여 바로잡을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;구현에서는 이중 for문을 사용하여 범위 안에서 가질 수 있는 모든 높이 값에 대해 걸리는 시간을 탐색했다. 이때 입력값을 저장하는 배열을 내림차순으로 정렬하여 블록을 먼저 캐고 난 후 쌓는 순서로 탐색하도록 설정했다. 이렇게 하면 전체 블록이 0미만으로 떨어질 경우 100% 문제 조건에 부합하지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;혹시 모를 시간 초과를 방지하기 위해 입력값으로 주어지는 높이의 최솟값과 최댓값을 구하여 탐색 범위를 한정했다.&lt;&#x2F;li&gt;
&lt;li&gt;블록 값이 음수로 떨어진 경우에 대해서 쓰레기 값이 결과값 pair에 저장되는 것을 막기 위해 vaild라는 bool변수를 추가했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, M, B;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; M &amp;gt;&amp;gt; B;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N*M];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; max_arg = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; min_arg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;257&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N*M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arr[i];
&lt;&#x2F;span&gt;&lt;span&gt;        max_arg = (max_arg &amp;lt; arr[i]) ? arr[i] : max_arg;
&lt;&#x2F;span&gt;&lt;span&gt;        min_arg = (min_arg &amp;gt; arr[i]) ? arr[i] : min_arg;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arr, arr+N*M, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greater&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; time = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; block = B;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; ans;
&lt;&#x2F;span&gt;&lt;span&gt;    ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = min_arg; i &amp;lt;= max_arg; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        block = B;
&lt;&#x2F;span&gt;&lt;span&gt;        time = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N*M; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[j] &amp;gt;= i)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                time += (arr[j]-i) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                block += (arr[j]-i);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(i - arr[j] &amp;gt; block) valid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;                {
&lt;&#x2F;span&gt;&lt;span&gt;                    time += (i-arr[j]) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    block -= (i-arr[j]);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;== -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; valid)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= time;
&lt;&#x2F;span&gt;&lt;span&gt;            ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= i;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; time &amp;amp;&amp;amp; valid)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= time;
&lt;&#x2F;span&gt;&lt;span&gt;            ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= i;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;== time &amp;amp;&amp;amp; valid)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= time;
&lt;&#x2F;span&gt;&lt;span&gt;            ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= (i &amp;lt; ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;) ? ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;: i;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;18111&quot;&gt;18111번: 마인크래프트&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>15829 - Hashing</title>
		<published>2023-02-11T00:00:00+00:00</published>
		<updated>2023-02-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/15829-hashing/" type="text/html"/>
		<id>https://js970.github.io/15829-hashing/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 11일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 정수의 성질&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;얼핏 생각하면 난감하지만 mod연산의 특징을 이해한다면 쉽게 풀 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;mod 1234567891 공간에서 값을 가지기 때문에 31의 50승이라는 말도 안 되는 수임에도 불구하고 연산 과정마다 mod연산을 통해 hash값을 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;각각 따로 mod한 값을 이후에 더한 후 mod해도 다 더해서 mod한 값과 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; exp; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {   
&lt;&#x2F;span&gt;&lt;span&gt;        n %= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234567891&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        n *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; n;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myhash&lt;&#x2F;span&gt;&lt;span&gt;(string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; n;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;(); i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        n = str[i] - &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        ret += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(i, n);
&lt;&#x2F;span&gt;&lt;span&gt;        ret %= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234567891&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ret;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; L;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; L;
&lt;&#x2F;span&gt;&lt;span&gt;    string input;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;myhash&lt;&#x2F;span&gt;&lt;span&gt;(input);
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;myhash&lt;&#x2F;span&gt;&lt;span&gt;(input) &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;15829&quot;&gt;15829번: Hashing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>10773 - 제로</title>
		<published>2023-02-10T00:00:00+00:00</published>
		<updated>2023-02-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/10773-jero/" type="text/html"/>
		<id>https://js970.github.io/10773-jero/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 10일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : stack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;stack자료구조를 사용해서 0이 입력되면 pop을 수행하고 그 이외의 경우에 대해 push를 수행한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stack&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;    stack&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stack;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!input)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(input);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(!stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        sum += stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;10773&quot;&gt;10773번: 제로&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>10989 - 수 정렬하기 3</title>
		<published>2023-02-10T00:00:00+00:00</published>
		<updated>2023-02-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/10989-su-jjeonryeolhagi-3/" type="text/html"/>
		<id>https://js970.github.io/10989-su-jjeonryeolhagi-3/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 10일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 메모리 고려&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;본 문제의 최대 테스트 케이스의 수는 천만이다.&lt;&#x2F;li&gt;
&lt;li&gt;short형 배열을 선언한다고 해도 20MB의 메모리 공간을 소모한다. 문제에서 제한한 메모리 공간은 8MB이니 불가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;입력 최대 크기는 10000이므로 0~10000의 정수의 개수를 세는 배열을 선언한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 배열의 원소 수만큼 반복하여 출력하면 문제 조건에 부합한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10001&lt;&#x2F;span&gt;&lt;span&gt;] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;        arr[input]++;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; arr[i]; j++)
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;10989&quot;&gt;10989번: 수 정렬하기 3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>11651 - 좌표 정렬하기 2</title>
		<published>2023-02-10T00:00:00+00:00</published>
		<updated>2023-02-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/11651-jjwpyo-jjeonryeolhagi-2/" type="text/html"/>
		<id>https://js970.github.io/11651-jjwpyo-jjeonryeolhagi-2/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 10일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;pair를 사용해서 문제 조건에 맞게 정렬되어 출력되도록 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arr, arr+N);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;11651&quot;&gt;11651번: 좌표 정렬하기 2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>7568 - 덩치</title>
		<published>2023-02-10T00:00:00+00:00</published>
		<updated>2023-02-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/7568-ddeonci/" type="text/html"/>
		<id>https://js970.github.io/7568-ddeonci/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 10일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력 범위를 생각해 보면 이중 for문을 사용하여 모든 경우에 대해 연산해도 충분하다.&lt;&#x2F;li&gt;
&lt;li&gt;pair와 이중 for문을 활용하여 한 원소에 대한 다른 모든 원소의 대소관계를 비교하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; person;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; person.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        arr[i] = person;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[j].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; arr[j].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                count++;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;7568&quot;&gt;7568번: 덩치&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>4949 - 균형잡힌 세상</title>
		<published>2023-02-09T00:00:00+00:00</published>
		<updated>2023-02-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/4949-ggyuhyeongjjahin-sessan/" type="text/html"/>
		<id>https://js970.github.io/4949-ggyuhyeongjjahin-sessan/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 9일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&#x2F;Retry&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : stack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력받은 문자열에 대해서 string헤더의 substr함수를 사용하여 재귀적으로 검사하였다.&lt;&#x2F;li&gt;
&lt;li&gt;소괄호와 대괄호가 알맞게 열리고 닫힌 경우에 대해 그 안의 모든 문자열을 재귀함수의 입력으로 넣었다.&lt;&#x2F;li&gt;
&lt;li&gt;결과적으로 정답이었으나 상당히 많은 시행착오가 있었고 적지 않은 시간을 소모했다.&lt;&#x2F;li&gt;
&lt;li&gt;stack을 사용하여 훨씬 간단한 풀이가 가능하다.
&lt;ul&gt;
&lt;li&gt;괄호가 열리고 닫히는 과정을 stack을 통해 안정적으로 구현 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;balance&lt;&#x2F;span&gt;&lt;span&gt;(string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; depth = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, end = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; subbalance = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    string sub;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(msg[i] == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(start == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                start = i;
&lt;&#x2F;span&gt;&lt;span&gt;            depth++;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(msg[i] == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(start == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                start = i;
&lt;&#x2F;span&gt;&lt;span&gt;            depth++;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(msg[i] == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(msg[start] == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;amp;&amp;amp; depth == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                end = i;
&lt;&#x2F;span&gt;&lt;span&gt;            depth--;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(msg[i] == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(msg[start] == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;amp;&amp;amp; depth == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                end = i;
&lt;&#x2F;span&gt;&lt;span&gt;            depth--;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(start != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; end != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            sub = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;substr&lt;&#x2F;span&gt;&lt;span&gt;(start+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, end-start-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            subbalance = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;balance&lt;&#x2F;span&gt;&lt;span&gt;(sub);
&lt;&#x2F;span&gt;&lt;span&gt;            start = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, end = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(depth &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|| !subbalance)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(depth != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(start != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; end == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) ret = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ret;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    string message;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getline&lt;&#x2F;span&gt;&lt;span&gt;(cin, message);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(message == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;balance&lt;&#x2F;span&gt;&lt;span&gt;(message)) cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;stack을 사용한 풀이&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bits&#x2F;stdc++.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    string a;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getline&lt;&#x2F;span&gt;&lt;span&gt;(cin, a);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(a == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    stack&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; s;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; isValid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; c : a){
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(c == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; || c == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(c == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;() || s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() != &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;){
&lt;&#x2F;span&gt;&lt;span&gt;          isValid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(c == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;() || s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() != &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;){
&lt;&#x2F;span&gt;&lt;span&gt;          isValid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) isValid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(isValid) cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;4949&quot;&gt;4949번: 균형잡힌 세상&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;stack 사용한 풀이
&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;source&#x2F;55558193&quot;&gt;로그인&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1085 - 직사각형에서 탈출</title>
		<published>2023-02-07T00:00:00+00:00</published>
		<updated>2023-02-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1085-jjisaggahyeongesse-talcul/" type="text/html"/>
		<id>https://js970.github.io/1085-jjisaggahyeongesse-talcul/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 7일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;수를 비교하여 출력만 하면 되는 매우 단순한 문제이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x, y, w, h;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;gt;&amp;gt; w &amp;gt;&amp;gt; h;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; width, hight;
&lt;&#x2F;span&gt;&lt;span&gt;    width = (x &amp;lt; w - x) ? x : w - x;
&lt;&#x2F;span&gt;&lt;span&gt;    hight = (y &amp;lt; h - y) ? y : h - y;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ans = (width &amp;lt; hight) ? width : hight;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1085&quot;&gt;1085번: 직사각형에서 탈출&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>11050 - 이항 계수 1</title>
		<published>2023-02-07T00:00:00+00:00</published>
		<updated>2023-02-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/11050-ithan-ggysu-1/" type="text/html"/>
		<id>https://js970.github.io/11050-ithan-ggysu-1/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 7일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;이항계수를 구하는 문제이다. 이항계수란 $_nC_k$를 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;이항계수를 계산하기 위해서는 factorial연산을 필요로 한다.
&lt;ul&gt;
&lt;li&gt;직접 구현할 수도 있지만 cmath헤더파일의 tgamma함수를 이용하면 factorial을 쉽게 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;tgamma함수는 (인자-1)factorial을 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, K;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;tgamma&lt;&#x2F;span&gt;&lt;span&gt;(N+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;tgamma&lt;&#x2F;span&gt;&lt;span&gt;(K+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;tgamma&lt;&#x2F;span&gt;&lt;span&gt;(N-K+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;11050&quot;&gt;11050번: 이항 계수 1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shoark7.github.io&#x2F;programming&#x2F;algorithm&#x2F;3-ways-to-get-binomial-coefficients&quot;&gt;[조합론] 이항계수 알고리즘 3가지&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;50132863&#x2F;is-there-any-built-in-factorial-function-in-c&quot;&gt;Is there any built-in factorial function in c++?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>11650 - 좌표 정렬하기</title>
		<published>2023-02-07T00:00:00+00:00</published>
		<updated>2023-02-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/11650-jjwpyo-jjeonryeolhagi/" type="text/html"/>
		<id>https://js970.github.io/11650-jjwpyo-jjeonryeolhagi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 7일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;처음에는 priority_queue자료구조를 이용하여 입력과 동시에 정렬하려고 생각했으나 pair를 사용하여 오름차순으로 정렬해야 하는 상황이었으므로 pair&amp;lt;int,int&amp;gt;배열을 이용하여 입력을 받은 후 sort를 이용하여 정렬하였다.&lt;&#x2F;li&gt;
&lt;li&gt;pair배열을 sort를 이용해서 정렬했을 때 first에 따라 오름차순으로 정렬하고 first가 같을 경우 second 값에 따라 오름차순으로 정렬한다는 사실을 알고 있어서 쉽게 해결할 수 있었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arr, arr + N);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; arr[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;11650&quot;&gt;11650번: 좌표 정렬하기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>11866 - 요세푸스 문제 0</title>
		<published>2023-02-07T00:00:00+00:00</published>
		<updated>2023-02-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/11866-yosepusse-munje-0/" type="text/html"/>
		<id>https://js970.github.io/11866-yosepusse-munje-0/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 7일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;이 문제를 해결하기 위해 queue를 사용하여 차례에 맞는 숫자를 pop하는 방식을 사용했다. 차례에 맞지 않는 경우 pop후 다시 push하여 circle을 구현하였다.&lt;&#x2F;li&gt;
&lt;li&gt;처음에는 deque를 통해 구현하려 했는데, 처음 코드처럼 코딩할 것면 굳이 deque가 아니라 queue로 충분하다…&lt;&#x2F;li&gt;
&lt;li&gt;이 문제에서 double-free segmentaion fault로 인해서 많은 시간을 사용하였다…
&lt;ul&gt;
&lt;li&gt;double-free segmentation fault는 동적할당한 변수 또는 배열에 대해 delete가 두 번 이상 수행될 경우 발생하는 런타임 에러이다.&lt;&#x2F;li&gt;
&lt;li&gt;c++에서는 복사 생성자를 컴파일러가 자동으로 생성하는 과정에서 자주 발생한다고 한다.(ref참조)&lt;&#x2F;li&gt;
&lt;li&gt;첫 시도에서 tmp에 pop하기 전의 front를 저장하고, pop수행 후 이 값을 다시 push하는 식으로 구현하였는데 이 과정에서 dobule-free error가 발생했다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 먼저 push한 후 pop하는 코드로 수정하니 에러가 사라졌다.&lt;&#x2F;li&gt;
&lt;li&gt;솔직히 정확한 원인에 대해서는 잘 모르겠다. 본 코드에서 직접 동적 할당을 사용한 적도 없고 stl을 사용했는데도 이런 에러가 발생했다.&lt;&#x2F;li&gt;
&lt;li&gt;심지어 항상 발생하는 것이 아니라 특정 입력에 대해서만 이런 에러가 발생해서 더욱 찾기 힘들었다.&lt;&#x2F;li&gt;
&lt;li&gt;그냥 이런 상황 자체를 경험적으로 학습해야 할 듯 하다…&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;오답 코드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deque&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, K;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K;
&lt;&#x2F;span&gt;&lt;span&gt;    deque&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; deque;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx = K-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; ans;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; K-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; tmp = deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(tmp);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; K-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; tmp = deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(tmp);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; ans[i] &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; ans[i] &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;수정 코드(정답)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, K;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K;
&lt;&#x2F;span&gt;&lt;span&gt;    queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; queue;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx = K-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; ans;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; K-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; K-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; ans[i] &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; ans[i] &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;11866&quot;&gt;11866번: 요세푸스 문제 0&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14063791&#x2F;double-free-or-corruption-after-queuepush&quot;&gt;Double free or corruption after queue::push&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2231 - 분해합</title>
		<published>2023-02-07T00:00:00+00:00</published>
		<updated>2023-02-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2231-bbuhaehab/" type="text/html"/>
		<id>https://js970.github.io/2231-bbuhaehab/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 7일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;li&gt;알고리즘 : 정수의 성질&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력값의 경계가 백만이므로 모든 경우에 대해 생각해도 시간은 충분하다.&lt;&#x2F;li&gt;
&lt;li&gt;큰 정수의 각 자릿수는 아래 코드처럼 구하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; seg;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; exist = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ans;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        seg = i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        seg += i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        seg += i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        seg += i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        seg += i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        seg += i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        seg += i;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(input == seg)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            exist = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            ans = i;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(exist) cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2231&quot;&gt;2231번: 분해합&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2292 - 벌집</title>
		<published>2023-02-07T00:00:00+00:00</published>
		<updated>2023-02-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2292-bbeojji/" type="text/html"/>
		<id>https://js970.github.io/2292-bbeojji/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 7일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력 범위가 완전탐색이 가능한 범위이므로 모든 경우에 대해 조사했다.&lt;&#x2F;li&gt;
&lt;li&gt;벡터 자료구조를 사용해서 이동해야 하는 포인트를 나타내었다.&lt;&#x2F;li&gt;
&lt;li&gt;입력값이 이동 포인트 미만일 경우 이동 포인트 벡터의 인덱스 + 1이 총 움직여야 하는 횟수가 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; arr;
&lt;&#x2F;span&gt;&lt;span&gt;    arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; elem = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(elem &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        elem += idx * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(elem);
&lt;&#x2F;span&gt;&lt;span&gt;        idx++;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(N &amp;gt; arr[i]) i++;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2292&quot;&gt;2292번: 벌집&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>10816 - 숫자 카드 2</title>
		<published>2023-02-06T00:00:00+00:00</published>
		<updated>2023-02-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/10816-ssuja-kadde-2/" type="text/html"/>
		<id>https://js970.github.io/10816-ssuja-kadde-2/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 6일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&#x2F;Retry&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;algorithm헤더의 lower_bound, upper_bound함수를 사용해야 하는 문제였다.
&lt;ul&gt;
&lt;li&gt;이진탐색으로 원소를 탬색하는 알고리즘이다. 직접 이진탐색을 통해 구현하려 했으나… 실패했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;map자료구조 사용하여 해결할 수도 있다.(시도해볼 것)&lt;&#x2F;li&gt;
&lt;li&gt;M에 대한 배열을 구현하지 않고 입력받는 즉시 연산하여 출력하는 방식으로 구현할 수도 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;comp&lt;&#x2F;span&gt;&lt;span&gt;(pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arrN = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; elem;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arrN[i];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arrN, arrN + N);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; * arrM = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[M];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* ans = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[M];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; arrM[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        arrM[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;= i;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arrM, arrM + M);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; first, last;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        first = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lower_bound&lt;&#x2F;span&gt;&lt;span&gt;(arrN, arrN + N, arrM[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;) - arrN;
&lt;&#x2F;span&gt;&lt;span&gt;        last = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;upper_bound&lt;&#x2F;span&gt;&lt;span&gt;(arrN, arrN + N, arrM[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;) - arrN;
&lt;&#x2F;span&gt;&lt;span&gt;        arrM[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;= last - first;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arrM, arrM + M, comp);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; arrM[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chanhuiseok.github.io&#x2F;posts&#x2F;algo-55&#x2F;&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;10816&quot;&gt;10816번: 숫자 카드 2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>10828 - 스택</title>
		<published>2023-02-06T00:00:00+00:00</published>
		<updated>2023-02-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/10828-ssetaeg/" type="text/html"/>
		<id>https://js970.github.io/10828-ssetaeg/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 6일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;조건에 맞게 stl stack헤더를 사용하여 구현하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stack&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    string cmd;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arg;
&lt;&#x2F;span&gt;&lt;span&gt;    stack&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stack;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; cmd;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; arg;
&lt;&#x2F;span&gt;&lt;span&gt;            stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(arg);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;                stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;10828&quot;&gt;10828번: 스택&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>10845 - 큐</title>
		<published>2023-02-06T00:00:00+00:00</published>
		<updated>2023-02-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/10845-kyu/" type="text/html"/>
		<id>https://js970.github.io/10845-kyu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 6일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;queue자료구조를 이용해서 시키는 대로 구현하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    string cmd;
&lt;&#x2F;span&gt;&lt;span&gt;    queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; queue;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arg;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; cmd;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; arg;
&lt;&#x2F;span&gt;&lt;span&gt;            queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(arg);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;                queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;back&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;back&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;10845&quot;&gt;10845번: 큐&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>10866 - 덱</title>
		<published>2023-02-06T00:00:00+00:00</published>
		<updated>2023-02-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/10866-dde/" type="text/html"/>
		<id>https://js970.github.io/10866-dde/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 6일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;stl의 deque를 사용하여 문제의 조건에 따라 해결하면 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deque&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    deque&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; deque;
&lt;&#x2F;span&gt;&lt;span&gt;    string cmd;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arg;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; cmd;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;push_front&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; arg;
&lt;&#x2F;span&gt;&lt;span&gt;            deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_front&lt;&#x2F;span&gt;&lt;span&gt;(arg);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; arg;
&lt;&#x2F;span&gt;&lt;span&gt;            deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(arg);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;                deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pop_back&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;back&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;                deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_back&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(cmd == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;back&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;back&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;10866&quot;&gt;10866번: 덱&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>10250 - ACM 호텔</title>
		<published>2023-02-05T00:00:00+00:00</published>
		<updated>2023-02-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/10250-acm-hotel/" type="text/html"/>
		<id>https://js970.github.io/10250-acm-hotel/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 5일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력된 순서 당 배정될 방의 번호를 계산하는 공식을 만들었다.&lt;&#x2F;li&gt;
&lt;li&gt;공식에 반례가 있어 한번 틀렸다. 예외 처리를 통해 정답 처리 되었다.&lt;&#x2F;li&gt;
&lt;li&gt;솔직히 W값은 필요가 없었는데 왜 입력으로 넣는지가 궁금하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; testC;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; H, W, N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; testC;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; floor;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; room;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; testC; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; H;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; W;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;        floor = N%H;
&lt;&#x2F;span&gt;&lt;span&gt;        room = (N &#x2F; H) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(floor == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            floor = H;
&lt;&#x2F;span&gt;&lt;span&gt;            room--;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; floor * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;+ room &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;10250&quot;&gt;10250번: ACM호텔&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>10814 - 나이순 정렬</title>
		<published>2023-02-05T00:00:00+00:00</published>
		<updated>2023-02-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/10814-naissu-jjeonryeol/" type="text/html"/>
		<id>https://js970.github.io/10814-naissu-jjeonryeol/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 5일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;priority_queue를 사용하여 나이 순으로 정렬했다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;priority_queue에 들어가는 구조체인 info를 정의하였다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;나이가 같을 경우 먼저 등록한 순서대로 출력하므로 등록 순서를 나타내는 변수인 idx를 구조체에 추가시켰다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;priority_queue는 내림차순 정렬이 기본이고, 나이가 같을 경우 먼저 등록한 순서대로 출력하기 위해서는 cmp구조체를 만들어 활용해야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;cmp구조체의 활용 및 구조체 생성자 문법에 대해 다시 되짚어 볼 필요가 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;cout에서 endl의 사용으로 인해 오답이 출력되었다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;아래의 두 구문을 main에 추가함으로써 printf, scanf를 사용하지 않고 cin, cout을 사용하면서 시간 초과를 막을 수 있다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;info
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; age;
&lt;&#x2F;span&gt;&lt;span&gt;    string name;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;, string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;(age), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(name), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span&gt;(idx) {}
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;cmp
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;operator()&lt;&#x2F;span&gt;&lt;span&gt;(info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span&gt;== b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idx &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ios::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sync_with_stdio&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    priority_queue&amp;lt;info, vector&amp;lt;info&amp;gt;, cmp&amp;gt; pq;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; age;
&lt;&#x2F;span&gt;&lt;span&gt;    string name;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; age;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; name;
&lt;&#x2F;span&gt;&lt;span&gt;        pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;(age, name, idx++));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;10814&quot;&gt;10814번: 나이순 정렬&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2609 - 최대공약수와 최소공배수</title>
		<published>2023-02-05T00:00:00+00:00</published>
		<updated>2023-02-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2609-coeddaggonhyasuwa-coesoggonbbasu/" type="text/html"/>
		<id>https://js970.github.io/2609-coeddaggonhyasuwa-coesoggonbbasu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 5일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;최대공약수, 최소공배수 알고리즘을 묻는 문제였다.&lt;&#x2F;li&gt;
&lt;li&gt;최대공약수, 최소공배수 모두 유클리드 호제법을 사용하여 알고리즘을 구현할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;유클리드 호제법 알고리즘을 깜빡해서 검색을 했다.
&lt;ul&gt;
&lt;li&gt;유클리드 호제법은 두 수중 작은 수로 큰 수를 나눈 나머지와 작은 수의 최대공약수를 재귀적으로 구하는 알고리즘이다. 나머지 값이 0이 될때까지 반복한다.&lt;&#x2F;li&gt;
&lt;li&gt;최소공배수는 두 수의 곱을 최대공약수로 나눈 값이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;gcd&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; tmp;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(a &amp;lt; b) 
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        tmp = a;
&lt;&#x2F;span&gt;&lt;span&gt;        a = b;
&lt;&#x2F;span&gt;&lt;span&gt;        b = tmp;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(b != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        n = a % b;
&lt;&#x2F;span&gt;&lt;span&gt;        a = b;
&lt;&#x2F;span&gt;&lt;span&gt;        b = n;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lcm&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(a*b) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gcd&lt;&#x2F;span&gt;&lt;span&gt;(a, b);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a, b;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; a;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; b;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gcd&lt;&#x2F;span&gt;&lt;span&gt;(a, b) &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lcm&lt;&#x2F;span&gt;&lt;span&gt;(a, b) &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2609&quot;&gt;2609번: 최대공약수와 최소공배수&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2798 - 블랙잭</title>
		<published>2023-02-05T00:00:00+00:00</published>
		<updated>2023-02-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2798-bbeuraegjjae/" type="text/html"/>
		<id>https://js970.github.io/2798-bbeuraegjjae/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 5일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;100개의 수 중 3개의 수의 합에 대한 경우의 수를 구하는 연산은 200,000보다 작은 수이고, 이는 3중 for문을 돌려도 문제 없이 구현 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;arr[i]);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ans = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; k = j+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; k &amp;lt; N; k++)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                sum = arr[i] + arr[j] + arr[k];
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(sum &amp;lt;= M) ans = (ans &amp;lt; sum) ? sum : ans;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2798&quot;&gt;2798번: 블랙잭&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>4153 - 직각삼각형</title>
		<published>2023-02-05T00:00:00+00:00</published>
		<updated>2023-02-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/4153-jjiggassaggahyeong/" type="text/html"/>
		<id>https://js970.github.io/4153-jjiggassaggahyeong/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 5일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;그냥 세 수를 입력 받아서 가장 큰 수의 제곱이 다른 두 수의 제곱의 합과 같은지를 비교하면 되는 단순한 문제&lt;&#x2F;li&gt;
&lt;li&gt;pow함수, sort함수의 사용법을 숙지해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a, b, c;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; a;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; b;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(a == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; b == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; c == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = a; arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = b; arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] = c;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(arr, arr + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pow&lt;&#x2F;span&gt;&lt;span&gt;(arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)) cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrong&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;4153&quot;&gt;4153번: 직각삼각형&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>9012 - 괄호</title>
		<published>2023-02-05T00:00:00+00:00</published>
		<updated>2023-02-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/9012-ggwaho/" type="text/html"/>
		<id>https://js970.github.io/9012-ggwaho/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 5일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;depth라는 변수를 설정하고, 입력받은 문자열에 대해 왼쪽부터 오른쪽까지 문자를 탐색한다.&lt;&#x2F;li&gt;
&lt;li&gt;좌괄호가 인식되었을 경우 depth를 1만큼 증가시키고, 우괄호가 인식되었을 경우 depth를 1만큼 감소시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;문자열 판별 연산 중 depth가 음수가 된 경우 이는 필요 없는 우괄호가 입력이 더 된 경우이므로 NO를 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;문자열 판별 연산이 끝난 후 depth가 0이 아닌 경우 필요 없는 좌괄호가 입력이 더 된 경우이므로 NO를 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 이외의 경우 입력된 문자열이 VPS이므로 YES를 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;문제 설명의 알고리즘 분류에 따르면 본 문제는 stack 자료구조를 사용하여 해결할 수도 있다. 다음에는 이 방법으로 시도해보자.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    string input;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; depth;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; vps;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; T; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        depth = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        vps = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;(); j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(input[j] == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) depth++;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; depth--;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(depth &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                vps = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!vps || depth &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;9012&quot;&gt;9012번: 괄호&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1259 - 팰린드롬수</title>
		<published>2023-02-04T00:00:00+00:00</published>
		<updated>2023-02-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1259-paelrinddemicsu/" type="text/html"/>
		<id>https://js970.github.io/1259-paelrinddemicsu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 브론즈 1&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 4일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;숫자를 입력받은 뒤 10을 곱하는 과정을 통해 몇 자릿수인지 알아낸 후 동적 할당을 통해 해당 자릿수만큼의 크기를 가지는 배열을 생성했다.&lt;&#x2F;li&gt;
&lt;li&gt;이 배열의 첫 번째 원소와 마지막 원소를 시작으로, 두 번째 원소와 마지막에서 두 번째 원소 … 순으로 탐색하여 서로 다른 숫자가 있는지 탐색했다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 바탕으로 요구사항에 맞게 출력했다.&lt;&#x2F;li&gt;
&lt;li&gt;string으로 입력받은 뒤 algorithm의 reverse를 사용하여 문자열을 reverse한 후 이를 비교하면 훨씬 간단하게 풀 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(input == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; cnt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(input &#x2F; i != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;            i *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[cnt];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; div = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; cnt - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            div *= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; cnt; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            arr[i] = input &#x2F; div;
&lt;&#x2F;span&gt;&lt;span&gt;            input -= arr[i] * div;
&lt;&#x2F;span&gt;&lt;span&gt;            div &#x2F;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; end = cnt-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; palindrome = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(start &amp;lt;= end)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[start] != arr[end])
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                palindrome = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            start++;
&lt;&#x2F;span&gt;&lt;span&gt;            end--;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(palindrome) cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reverse사용 코드&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() 
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	string N;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(N != &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;		string M = N;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;(N.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(), N.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(N != &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) 
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(N == M)
&lt;&#x2F;span&gt;&lt;span&gt;			{
&lt;&#x2F;span&gt;&lt;span&gt;				cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;			{
&lt;&#x2F;span&gt;&lt;span&gt;				cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1259&quot;&gt;1259번: 팰린드롬수&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;reverse 사용 코드&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;source&#x2F;55239462&quot;&gt;로그인&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2751 - 수 정렬하기 2</title>
		<published>2023-02-04T00:00:00+00:00</published>
		<updated>2023-02-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2751-su-jjeonryeolhagi-2/" type="text/html"/>
		<id>https://js970.github.io/2751-su-jjeonryeolhagi-2/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 4일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력받은 숫자를 오름차순으로 정렬하기만 하면 된다.&lt;&#x2F;li&gt;
&lt;li&gt;priority_queue를 사용하여 정렬하였다.&lt;&#x2F;li&gt;
&lt;li&gt;다른 사람의 해답을 보니 algorithm헤더의 sort함수를 이용하여 문제를 훨씬 간단하게 해결하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    priority_queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, greater&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; pq;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;arr[i]);
&lt;&#x2F;span&gt;&lt;span&gt;        pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(arr[i]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sort를 활용한 풀이&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;amp;n);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; num[n];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i&amp;lt;n;i++)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;amp;num[i]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(num,num+n);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;정렬하는 함수
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i&amp;lt;n;i++)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,num[i]);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2751&quot;&gt;2751번: 수 정렬하기 2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sort&quot;&gt;sort()&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;c++의 algorithm헤더에 정의되어 있는 메소드이다.&lt;&#x2F;li&gt;
&lt;li&gt;기본적으로 배열에 대해 오름차순 정렬을 수행한다.&lt;&#x2F;li&gt;
&lt;li&gt;배열의 시작점 주소와 마지막 주소+1을 인자로 적으면 정렬이 완료된다.
&lt;ul&gt;
&lt;li&gt;10개의 원소가 있는 배열 a를 정렬한다면 다음과 같이 입력한다.&lt;&#x2F;li&gt;
&lt;li&gt;sort(a, a+10);&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;priority_queue와 마찬가지로 compare함수를 만들어서 정렬 순서를 설정할 수 있다. 이때 정렬 순서를 나타내는 compare는 sort함수의 세 번쩨 인자로 입력된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2805 - 나무 자르기</title>
		<published>2023-02-04T00:00:00+00:00</published>
		<updated>2023-02-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2805-namu-jareugi/" type="text/html"/>
		<id>https://js970.github.io/2805-namu-jareugi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 4일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&#x2F;Retry&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;문제를 보자마자 1654번 문제와 마찬가지로 이분 탐색을 이용하여 푸는 문제임을 알았다… 그러나…&lt;&#x2F;li&gt;
&lt;li&gt;이분 탐색을 제대로 이해하지 못한 채 priority_queue를 사용하여 처음에 시간초과가 발생하여 오답&lt;&#x2F;li&gt;
&lt;li&gt;이분 탐색의 범위를 잘못 설정한 채 계속 오답
&lt;ul&gt;
&lt;li&gt;시작점과 끝점 설정을 잘못 설정하였다. 그러나 이분 탐색 분기점 코드의 문제로 의심하고 계속 헛짓거리함&lt;&#x2F;li&gt;
&lt;li&gt;처음 max, min을 설정할 때 min값을 입력값 중 최솟값으로 설정하였다 → 이러면 반례가 너무 많다. 하지만 알아차리지 못했다.&lt;&#x2F;li&gt;
&lt;li&gt;대표적으로 모든 나무의 크기가 같은 경우 오답을 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;오답의 원인은 아니었지만 잘린 나무 길이를 더했을 때 일시적으로 int범위를 벗어나므로 오버플로우에 의한 에러가 발생할 수 있음에 주의해야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; max = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; min = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; tree;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;tree);
&lt;&#x2F;span&gt;&lt;span&gt;        arr[i] = tree;
&lt;&#x2F;span&gt;&lt;span&gt;        max = (max &amp;lt; tree) ? tree : max;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; mid;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; total_timber;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(min &amp;lt;= max)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        mid = (min + max) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        total_timber = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;((arr[i] - mid) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) total_timber += (arr[i] - mid);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(total_timber &amp;lt; M) max = mid - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; min = mid + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; max &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2805&quot;&gt;2805번: 나무 자르기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2839 - 설탕 배달</title>
		<published>2023-02-04T00:00:00+00:00</published>
		<updated>2023-02-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2839-sseotang-bbadda/" type="text/html"/>
		<id>https://js970.github.io/2839-sseotang-bbadda/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 4일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;5와 3의 최소공배수인 15를 사용하여 문제를 풀이했다.&lt;&#x2F;li&gt;
&lt;li&gt;어떤 수가 3으로 나누어 떨어지지 않을 때 그 수에서 5를 빼거나 10을 뺀 수도 3으로 나누어 떨어지지 않는다면 해당 수는 $3x + 5y$의 형태로 나타낼 수 없는 수이다.(x, y는 정수)&lt;&#x2F;li&gt;
&lt;li&gt;봉지를 최소한으로 사용하는 경우는 5kg짜리 봉지를 최대한으로 사용한 경우이다. 이 경우를 찾기 위해 어떤 수가 3으로 나누어 떨어지고 몫이 5이상이 경우에 대해 조정을 해 주었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(N % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        x = N &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(x &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            x -= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            y += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x + y;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(N % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; N &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(N);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(result != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(result != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) cout &amp;lt;&amp;lt; result + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span&gt;(N-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(result != -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) cout &amp;lt;&amp;lt; result + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; cout &amp;lt;&amp;lt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2839&quot;&gt;2839번: 설탕 배달&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1966 - 프린터 큐</title>
		<published>2023-02-03T00:00:00+00:00</published>
		<updated>2023-02-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1966-peurinteo-kyu/" type="text/html"/>
		<id>https://js970.github.io/1966-peurinteo-kyu/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 3일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;deque와 priority_queue를 사용했다.&lt;&#x2F;li&gt;
&lt;li&gt;deque에는 pair&amp;lt;int, int&amp;gt;가 들어간다.&lt;&#x2F;li&gt;
&lt;li&gt;pair자료구조는 vector, algorithm헤더에 포함되는 자료구조이다.&lt;&#x2F;li&gt;
&lt;li&gt;pair.first는 priority정보를, pair.second는 index정보를 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;priority_queue는 중복을 허용하는 max heap으로 동작할 수 있으므로 이를 deque의 pair.first(priority)값과 비교하여 현재 출력 순서가 아니라면 deque.pop_front한 후 deque.push_back을 통해 순서를 맨 뒤로 보낸다. 만약 출력 순서라면 deque.pop, priority_queue.pop을 수행하고 출력 순서를 나태나는 변수인 order를 1만큼 증가시킨다. 이후 프린터의 다음 출력 순서를 탐색한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 과정을 deque.second == M일때까지 반복한다.&lt;&#x2F;li&gt;
&lt;li&gt;deque.second == M일때의 order를 출력한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deque&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; testC, N, M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; testC;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; count &amp;lt; testC; count++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;        deque&amp;lt;pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; print;
&lt;&#x2F;span&gt;&lt;span&gt;        priority_queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; pq;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; prio;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;prio);
&lt;&#x2F;span&gt;&lt;span&gt;            print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_pair&lt;&#x2F;span&gt;&lt;span&gt;(prio, i));
&lt;&#x2F;span&gt;&lt;span&gt;            pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(prio);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        pair&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; order = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span&gt;!= pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                p = print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(p);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span&gt;== M) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                print.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                order++;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; order &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jungeu1509.github.io&#x2F;algorithm&#x2F;use-priorityqueue&#x2F;#21-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90-%ED%99%9C%EC%9A%A9&quot;&gt;C++ STL priority_queue 우선순위 큐 사용법&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1966&quot;&gt;1966번: 프린터 큐&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1978 - 소수 찾기</title>
		<published>2023-02-03T00:00:00+00:00</published>
		<updated>2023-02-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1978-sosu-cajgi/" type="text/html"/>
		<id>https://js970.github.io/1978-sosu-cajgi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 3일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;N개의 수를 2부터 $\sqrt{N}$까지 1씩 증가시켜가며 나누어 항상 나머지가 존재한다면 소수, 그렇지 않다면 합성수로 분류한다.&lt;&#x2F;li&gt;
&lt;li&gt;1은 소수도 합성수도 아니므로 예외처리한다.&lt;&#x2F;li&gt;
&lt;li&gt;굉장히 간단한 문제이고, 위의 알고리즘으로도 제한시간 내에 문제없이 해결 가능하지만 위의 알고리즘보다 세련된 알고리즘을 찾을 수 있을 것 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* input = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;input[i]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; prime;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        prime = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(input[i] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            prime = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;(input[i]); j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(input[i] % j == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                prime = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(prime) count++;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1978&quot;&gt;1978번: 소수 찾기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2108 - 통계학</title>
		<published>2023-02-03T00:00:00+00:00</published>
		<updated>2023-02-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2108-stucggyhag/" type="text/html"/>
		<id>https://js970.github.io/2108-stucggyhag/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 3일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;N개의 입력 정수에 대해 산술평균, 중앙값, 최빈값, 범위를 구하는 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;입력과 동시에 sum을 계산하여 산술평균을 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;마찬가지로 입력과 동시에 입력의 최댓값 및 최솟값을 구하여 범위를 바로 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;priority_queue를 minheap으로 구현하여 증가하는 순서대로 정렬한다. 이후 N&#x2F;2번만큼 pop연산을 통해 중강값을 구할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;최빈값을 구하기 위해서 -4000 ~ 4000의 정수를 나타내는 배열인 arr[8001]을 선언하였다. 각 배열은 index + 4000에 해당하는 정수값이 몇 번 입력되었는지를 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;문제 조건에서 최빈값이 여러 개일 경우에는 두 번째로 작은 값을 출력하여야 한다고 했으므로 이를 쉽게 탐색하기 위해 priority_queue를 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;priority_queue를 사용하여 arr배열에서 가장 큰 값을 가지는 index를 탐색한다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 priority_queue에서 가장 큰 값을 pop한 이후에도 이 다음 priority_queue의 top이 이전 값과 같다면 최빈값이 여러 개 있는 경우이므로 이들 중 두 번째로 작은 값을 찾기 위해 priority_queue를 하나 더 선언한다.&lt;&#x2F;li&gt;
&lt;li&gt;pop을 사용하여 두 번째로 작은 priority_queue의 원소를 탐색한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[N];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; max = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; min = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    priority_queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, greater&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; pq;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8001&lt;&#x2F;span&gt;&lt;span&gt;] = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;data[i]);
&lt;&#x2F;span&gt;&lt;span&gt;        sum += data[i];
&lt;&#x2F;span&gt;&lt;span&gt;        pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(data[i]);
&lt;&#x2F;span&gt;&lt;span&gt;        arr[data[i]+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4000&lt;&#x2F;span&gt;&lt;span&gt;]++;
&lt;&#x2F;span&gt;&lt;span&gt;        max = (data[i] &amp;gt; max) ? data[i] : max;
&lt;&#x2F;span&gt;&lt;span&gt;        min = (data[i] &amp;lt; min) ? data[i] : min;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; mean = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)sum &#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)N) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)mean &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i++) pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; pq.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    priority_queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; pq2;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8001&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        pq2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(arr[i]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(pq2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) pq2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; fv = pq2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    pq2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(pq2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() == fv)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        priority_queue&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, greater&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; pq3;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8001&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i] == fv)
&lt;&#x2F;span&gt;&lt;span&gt;                pq3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        pq3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; pq3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4000 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8001&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr[i] == fv)
&lt;&#x2F;span&gt;&lt;span&gt;                idx = i;
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; idx - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4000 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; max - min &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2108&quot;&gt;2108번: 통계학&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2164 - 카드 2</title>
		<published>2023-02-03T00:00:00+00:00</published>
		<updated>2023-02-03T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/2164-kadde-2/" type="text/html"/>
		<id>https://js970.github.io/2164-kadde-2/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 3일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;deque자료구조를 사용하여 문제 상황을 그대로 시뮬레이션 하면 시간제한에 걸리지 않게 문제를 해결할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deque&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    deque&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; deque;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; tmp;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        tmp = deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(tmp);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; deque.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;back&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;2164&quot;&gt;2164번: 카드2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1920 - 수 찾기</title>
		<published>2023-02-02T00:00:00+00:00</published>
		<updated>2023-02-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1920-su-cajgi/" type="text/html"/>
		<id>https://js970.github.io/1920-su-cajgi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 2일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;c++ stl : set을 이용했다.&lt;&#x2F;li&gt;
&lt;li&gt;set의 insert() method를 사용하여 중복 없이 입력받았다.&lt;&#x2F;li&gt;
&lt;li&gt;set의 find() method를 사용하여 범위 안에서 수가 존재하는지 판단했다.&lt;&#x2F;li&gt;
&lt;li&gt;로직은 맞았으나 cout, cin의 사용으로 인해 시간초과가 떴다. 이를 printf, scanf로 바꾸니 정답 처리되었다.&lt;&#x2F;li&gt;
&lt;li&gt;ssh로 띄운 리눅스에서 긁어다 바로 백준 제출창에 붙여버리면 컴파일 에러 발생하니 주의 바람&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;    set&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; set;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; input;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;input);
&lt;&#x2F;span&gt;&lt;span&gt;	set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(input);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; M; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;input);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(input) == set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);		
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1920&quot;&gt;1920번: 수 찾기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1929 - 소수 구하기</title>
		<published>2023-02-02T00:00:00+00:00</published>
		<updated>2023-02-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1929-sosu-guhagi/" type="text/html"/>
		<id>https://js970.github.io/1929-sosu-guhagi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 2일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;더 좋은 알고리즘이 있었던 것으로 기억하지만 에라토스테네스의 채 알고리즘의 단순 구현 버전으로 풀었다.&lt;&#x2F;li&gt;
&lt;li&gt;해당 범위 내에서 $start$부터 $\sqrt{end}$까지 1씩 증가시켜가며 나머지를 기반으로 소수 여부를 판별했다. 본 문제는 이 알고리즘으로도 해결되었으나, 이보다 훨씬 진보된 소수 탐색 알고리즘을 본 기억이 난다… 후에 참고하자&lt;&#x2F;li&gt;
&lt;li&gt;1은 소수가 아닌 것을 깜빡하고 1에 대한 예외처리를 하지 않아 오답이 나왔었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isPrime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(input == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;(input); i++)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(input % i == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; M, N;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;M);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;scanf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;N);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = M; i &amp;lt;= N; i++)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPrime&lt;&#x2F;span&gt;&lt;span&gt;(i)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, i);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1929&quot;&gt;1929번: 소수 구하기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1874 - 스택 수열</title>
		<published>2023-02-01T00:00:00+00:00</published>
		<updated>2023-02-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1874-ssetaeg-suhyeo/" type="text/html"/>
		<id>https://js970.github.io/1874-ssetaeg-suhyeo/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 3&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 2월 1일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;stack자료구조를 사용하여 원하는 입력받은 수열을 만드는 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;아래와 같이 경우의 수를 나누어 해결했다.
&lt;ul&gt;
&lt;li&gt;스텍이 빈 경우 → stack에 규칙에 따라 push&lt;&#x2F;li&gt;
&lt;li&gt;스텍에 원소가 있는 경우
&lt;ul&gt;
&lt;li&gt;stack top이 조건을 충족하는 경우 → pop or push&lt;&#x2F;li&gt;
&lt;li&gt;stack top이 조건을 충족하지 않는 경우 → break&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;cout &amp;lt;&amp;lt; endl;의 구문에서 endl은 버퍼를 비우는 동작이 추가되므로 시간 초과가 발생하였다.
&lt;ul&gt;
&lt;li&gt;사실 cout자체도 printf보다 시간을 많이 사용하므로 printf를 사용하는 것이 맞는 것 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stack&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; stack_size;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; stack_size;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* elem = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[stack_size];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; stack_size; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; elem[i];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; previous_inserted_elem = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; elem_cnt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; prev_elem = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    stack&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stack;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;* print_arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new char&lt;&#x2F;span&gt;&lt;span&gt;[stack_size*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; arr_idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(elem_cnt &amp;lt; stack_size)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = previous_inserted_elem+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= elem[elem_cnt]; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;                print_arr[arr_idx++] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;                previous_inserted_elem = i;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() == elem[elem_cnt])
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            print_arr[arr_idx++] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            elem_cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt;(stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt; elem[elem_cnt])
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(previous_inserted_elem &amp;lt; elem[elem_cnt])
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = previous_inserted_elem+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= elem[elem_cnt]; i++)
&lt;&#x2F;span&gt;&lt;span&gt;                {
&lt;&#x2F;span&gt;&lt;span&gt;                    stack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;                    print_arr[arr_idx++] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;                    previous_inserted_elem = i;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(arr_idx == stack_size*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; arr_idx; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            cout &amp;lt;&amp;lt; print_arr[i] &amp;lt;&amp;lt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1874&quot;&gt;1874번: 스택 수열&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1654 - 랜선 자르기</title>
		<published>2023-01-31T00:00:00+00:00</published>
		<updated>2023-01-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1654-raensseo-jareugi/" type="text/html"/>
		<id>https://js970.github.io/1654-raensseo-jareugi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 2&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2023년 1월 31일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;이진 탐색을 이용하여 조건을 충족하는 가장 큰 수를 탐색하는 문제이다.&lt;&#x2F;li&gt;
&lt;li&gt;이진 탐색 구현 과정에서 입력값에 대한 형을 명확히 설정해야 한다.
&lt;ul&gt;
&lt;li&gt;초기 코드에서 int를 써서 오버플로우가 발생하였고 이를 long long int로 변경하니 정상 동작하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;무한 루프에 빠져 시간 초과가 발생하는 경우를 잘 생각해야 한다.
&lt;ul&gt;
&lt;li&gt;step-2의 while문에서 무한 루프가 발생하였다. 양 끝값 모두에 대한 조건을 설정하니 정상 동작하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; input
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; number_of_cable;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; required_cable;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; number_of_cable;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; required_cable;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;* current_cable_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[number_of_cable];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; number_of_cable; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; current_cable_length[i];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; figure longest cable
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; longest_cable_index = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; number_of_cable; i ++)
&lt;&#x2F;span&gt;&lt;span&gt;        longest_cable_index = (current_cable_length[longest_cable_index] &amp;lt; current_cable_length[i]) ? i : longest_cable_index;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; longest_cable_length = current_cable_length[longest_cable_index];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; step 1 - set bottom edge
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; piece = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; current_divided_cable = longest_cable_length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(piece &amp;lt; required_cable)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; number_of_cable; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            piece += current_cable_length[i] &#x2F; current_divided_cable;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(piece &amp;lt; required_cable) 
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            current_divided_cable &#x2F;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            piece = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; step 2 - search optimal value from bottom edge to top edge, top edge = bottom edge * 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; previous_diveded_cable = current_divided_cable * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long long int&lt;&#x2F;span&gt;&lt;span&gt; middle_value = (previous_diveded_cable + current_divided_cable) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    piece = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;((current_divided_cable != middle_value) &amp;amp;&amp;amp; (previous_diveded_cable != middle_value))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; number_of_cable; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            piece += current_cable_length[i] &#x2F; middle_value;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(piece &amp;lt; required_cable)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            previous_diveded_cable = middle_value;
&lt;&#x2F;span&gt;&lt;span&gt;            middle_value = (current_divided_cable + middle_value) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            current_divided_cable = middle_value;
&lt;&#x2F;span&gt;&lt;span&gt;            middle_value = (middle_value + previous_diveded_cable) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        piece = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; print output
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; current_divided_cable &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;aside&gt;
💡 리펙토링을 의식하여 코드를 작성하였다. 하지만 그것을 감안하더라도 알고리즘이 지나치게 복잡한 감이 있다. 함수를 구현하고, 필요없는 부분(figure longest cable)을 없엔다면 훨신 단순한 코드로 동작하는 정답을 구현 가능할 것으로 생각된다.
&lt;&#x2F;aside&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1654&quot;&gt;1654번: 랜선 자르기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>ANACONDA 환경설정</title>
		<published>2023-01-25T00:00:00+00:00</published>
		<updated>2023-01-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/anaconda-env-setting/" type="text/html"/>
		<id>https://js970.github.io/anaconda-env-setting/</id>
		<content type="html">&lt;h1 id=&quot;anacondaran&quot;&gt;ANACONDA란?&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;ANACONDA는 Python 과 R에서 패키지 개발 및 관리를 용이하게 하기 위한 가상 환경을 제공한다.&lt;&#x2F;p&gt;
&lt;p&gt;다음과 같은 경우 ANACONDA가 매우 효율적이다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬의 버전을 자주 바꿔야 하는 경우&lt;&#x2F;li&gt;
&lt;li&gt;패키지 이름이 중복되는 경우&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;아나콘다는 컨테이너로 작동하며 환경 설정 후 사용 가능하다. 이때 파이썬 버전을 설정 가능하며 이 환경에서의 pip명령 등은 다른 컨테이너에 영향을 주지 않는다.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;anaconda-sseoci&quot;&gt;ANACONDA 설치&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;터미널에서 패키지 매니저를 활용하여 설치할 수도 있지만 그냥 설치 파일을 다운로드 하여 설치를 진행하는 것이 깔끔하다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.anaconda.com&#x2F;products&#x2F;distribution&quot;&gt;Anaconda | Anaconda Distribution&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;anaconda-sahyon&quot;&gt;ANACONDA 사용&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;anaconda-prompt&quot;&gt;Anaconda Prompt&lt;&#x2F;h2&gt;
&lt;p&gt;ANACONDA의 설치가 완료되면 Anaconda Prompt를 사용할 수 있다. &lt;&#x2F;p&gt;
&lt;p&gt;Anaconda Prompt는 기본적으로 터미널과 다를 것이 없다. &lt;&#x2F;p&gt;
&lt;p&gt;Anaconda Prompt는 ANACONDA에서 제공하는 conda 명령어들의 사용을 확실히 보장한다.&lt;&#x2F;p&gt;
&lt;p&gt;ANACONDA 설치 시에 환경 변수를 설정해 주면 Anaconda Prompt에서와 똑같이 CMD에서도 conda 명령어를 사용 가능하다.&lt;&#x2F;p&gt;
&lt;p&gt;Anaconda Prompt를 사용한다면 이런 설정 없이도 conda명령어가 작동됨을 보장받을 수 있다.&lt;&#x2F;p&gt;
&lt;p&gt;ANACONDA업데이트 이후 conda 명령어가 인식이 되지 않는다면 아래의 명령어를 입력해서 Anaconda Prompt를 업데이트 한 후 정상적으로 사용이 가능하다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;conda update conda
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;keonteineo-ssaensseon&quot;&gt;컨테이너 생성&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;conda create -n &amp;lt;env_name&amp;gt; python=&amp;lt;version&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;example&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;conda create -n yolo python=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;keonteineo-risseteu-nahyeo&quot;&gt;컨테이너 리스트 나열&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;conda env list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;keonteineo-hwalsseonhwa&quot;&gt;컨테이너 활성화&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;activate &amp;lt;env_name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;혹시 위의 명령어가 인식되지 않을 경우 아래와 같이 입력&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;source activate &amp;lt;env_name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;keonteineo-bihwalsseonhwa&quot;&gt;컨테이너 비활성화&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;deactivate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;마찬가지로 위의 명령어가 인식되지 않을 경우 아래와 같이 입력&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;source deactivate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;camgo-saiteu&quot;&gt;참고 사이트&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kamang-it.tistory.com&#x2F;entry&#x2F;Anaconda%EC%95%84%EB%82%98%EC%BD%98%EB%8B%A4-%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94%EB%B2%95%EA%B3%BC-%EC%82%AC%EC%9A%A9%EB%B2%95&quot;&gt;[Anaconda]아나콘다 설치하는법과 사용법&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;37993175&#x2F;difference-between-command-prompt-and-anaconda-prompt&quot;&gt;difference between command prompt and anaconda prompt&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>YOLO Quickstart</title>
		<published>2023-01-25T00:00:00+00:00</published>
		<updated>2023-01-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/yolo/" type="text/html"/>
		<id>https://js970.github.io/yolo/</id>
		<content type="html">&lt;h1 id=&quot;yolo-you-look-only-once-ran&quot;&gt;YOLO(You Look Only Once)란?&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;딥러닝을 이용한 Object Detection, Image Segmentation 프로그램&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ultralytics에서 개발했다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;라이센스는 GPL-3.0라이센스이다. 주의할 것&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ultralytics&#x2F;yolov5&#x2F;blob&#x2F;master&#x2F;LICENSE&quot;&gt;yolov5&#x2F;LICENSE at master · ultralytics&#x2F;yolov5&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;본 글은 Ultralytics YOLOv8 Docs를 기반으로 작성되었다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.ultralytics.com&#x2F;&quot;&gt;Ultralytics YOLOv8 Docs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;yolo-quickstart&quot;&gt;YOLO Quickstart&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;environment-requirments&quot;&gt;Environment Requirments&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ultralytics&#x2F;ultralytics&#x2F;blob&#x2F;main&#x2F;requirements.txt&quot;&gt;ultralytics&#x2F;requirements.txt at main · ultralytics&#x2F;ultralytics&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;install&quot;&gt;Install&lt;&#x2F;h2&gt;
&lt;p&gt;다음은 나의 환경에서 YOLO를 설치하는 과정을 기록한 것이다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;pip install ultralytics
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;만약 dependency issue가 있다면 다 설치해서 해결해 주자&lt;&#x2F;li&gt;
&lt;li&gt;CUDA가 설치되어 있어야 YOLO를 실행할 수 있으니 CUDA도 설치하자(YOLO가 pytorch를 사용하는데 여기에서 CUDA를 필요로 하는 것 같다.)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.nvidia.com&#x2F;cuda-downloads?target_os=Windows&amp;amp;target_arch=x86_64&amp;amp;target_version=10&quot;&gt;CUDA 설치&lt;&#x2F;a&gt;(NAS에 CUDA_12.0.1 저장되어 있다)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu 22.04에서 CUDA를 설치할 경우 다음 명령어를 한 줄씩 입력한다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;compute&#x2F;cuda&#x2F;12.0.1&#x2F;local_installers&#x2F;cuda_12.0.1_525.85.12_linux.run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; sh cuda_12.0.1_525.85.12_linux.run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;위의 명령어 입력 후 실행시킨 프로그램에서 그래픽 드라이버는 제외하고 설치해야 정상적으로 설치된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이후 nvcc명령어를 사용해서 쿠다 버전이 확인이 되지 않는다. 이를 해결하기 위해 다음 문장을 ~&#x2F;.profile의 가장 밑에 추가한다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;cuda-12.0&#x2F;bin:&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PATH
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LD_LIBRARY_PATH&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;local&#x2F;cuda-12.0&#x2F;lib64:&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LD_LIBRARY_PATH
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이후 source ~&#x2F;.profile 명령어를 통해 변경사항을 적용시키면 아래 명령어를 통해 쿠다 버전이 정상적으로 인식되는 것을 확인할 수 있다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nvcc -V
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.nvidia.com&#x2F;rdp&#x2F;cudnn-download&quot;&gt;cuDNN설치&lt;&#x2F;a&gt;(로그인 필요, CUDA12.0에 사용되는 cuDNN v8.8.0, NAS에 저장되어 있다)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;압축 해제 후 CUDA설치 경로(C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0\lib)의 bin, include, lib 폴더에 추가한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webnautes.tistory.com&#x2F;1765&quot;&gt;Ubuntu 22.04설치&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu 22.04에서 설치 시 재부팅을 해 주어야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cli-example&quot;&gt;CLI Example&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;yolo detect train model=yolov8n.pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;=coco128.yaml device=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;위의 명령어를 입력하여 간단한 예제를 수행할 수 있다.
&lt;ul&gt;
&lt;li&gt;pytorch가 제대로 설치되어 있지 않다면 CUDA, cuDNN이 제대로 설치되어 있어도 에러가 발생한다. &lt;a href=&quot;https:&#x2F;&#x2F;pytorch.org&#x2F;get-started&#x2F;locally&#x2F;&quot;&gt;여기&lt;&#x2F;a&gt;에서 환경에 맞게 다운로드 받을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside&gt;
💡 2&#x2F;12일 기준으로 이유는 모르겠지만 아래와 같은 에러가 발생하여 CLI예제 및 Python code예제를 수행하지 못하고 있다…. 해결 요망..
&lt;&#x2F;aside&gt;
&lt;h2 id=&quot;export&quot;&gt;Export&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;학습 모델은 onnx확장자로 export 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;tasks&quot;&gt;Tasks&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;detection&quot;&gt;Detection&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;객체 감지&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이미지 또는 비디오 스트림에서 객체의 위치와 클래스를 식별하는 작업이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;object detector의 결과물은 이미지의 개체를 둘러싼 bounding boxes이다. 라벨, 클래스, confidence score가 각각의 박스 마다 매겨진다. 관심이 있는 장면에서 사물을 특정하기 위해 사용된다. 정확한 모양이나 위치는 특정할 수 없다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;YOLO&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;segmentation&quot;&gt;Segmentation&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;classification&quot;&gt;Classification&lt;&#x2F;h2&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mobile IPv4</title>
		<published>2022-12-07T00:00:00+00:00</published>
		<updated>2022-12-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/rarp-bootp-dhcp/" type="text/html"/>
		<id>https://js970.github.io/rarp-bootp-dhcp/</id>
		<content type="html">&lt;h1 id=&quot;rarp-bootp-dhcp&quot;&gt;RARP, BOOTP, DHCP&lt;&#x2F;h1&gt;
&lt;p&gt;정리: Done
정리일: 2022년 12월 7일&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rarp-reverse-address-resolution-protocol-rfc903&quot;&gt;RARP : Reverse Address Resolution Protocol - RFC903&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;시스템이 booting될 때, 보통은 IP address를 저장해 놓은 파일로부터 IP주소를 얻는다.&lt;&#x2F;li&gt;
&lt;li&gt;그렇다면 저장 장치가 없는 시스템에서는 어떻게 IP주소를 얻을 수 있을까?
&lt;ul&gt;
&lt;li&gt;MAC주소(하드웨어 주소) 는 고유하기 때문에 MAC에 대응하는 IP주소를 lookup을 통해 얻을 수 있다.(lookup table??)&lt;&#x2F;li&gt;
&lt;li&gt;MAC주소의 경우 시스템에 내장된 이더넷 칩셋에 저장되어 있으므로 이 정보를 이용해 서버로부터 IP주소를 획득할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;RARP는 TCP&#x2F;IP specification이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;determining-an-ip-address-at-startup&quot;&gt;Determining an IP Address at Startup&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Network를 이용하여 remote server로부터 IP주소를 획득한다.&lt;&#x2F;li&gt;
&lt;li&gt;MAC주소를 이용해 통신한다.&lt;&#x2F;li&gt;
&lt;li&gt;IP테이블을 관리하는 서버로부터 IP주소를 요청한다.
&lt;ul&gt;
&lt;li&gt;만약 서버의 주소를 모른다면 ??&lt;&#x2F;li&gt;
&lt;li&gt;Broadcast를 이용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;RARP는 ARP처럼 작동한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;요청자는 RARP request를 broadcast한다.&lt;&#x2F;li&gt;
&lt;li&gt;서버는 요청자에게 응답한다(unicast)&lt;&#x2F;li&gt;
&lt;li&gt;요청자는 첫 번째 응답자로부터 받은 IP주소를 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;요청자는 IP주소를 얻을 때까지 계속해서 요청을 보낸다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;alternatives-to-rarp&quot;&gt;Alternatives to RARP&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RARP를 구현하기 위해서는 물리 계층을 이용해야 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;상위 계층에서 이를 구현할 수 있다면 개발이 더 쉬울 것이다.&lt;&#x2F;p&gt;
&lt;p&gt;⇒ &lt;strong&gt;BOOTP&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;bootp-bootstrap-protocol-bootp&quot;&gt;BOOTP : BOOTstrap Protocol (BOOTP)&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;RARP 대체 가능&lt;&#x2F;li&gt;
&lt;li&gt;네트워크 계층에서 동작한다.&lt;&#x2F;li&gt;
&lt;li&gt;UDP&#x2F;IP 패킷을 이용해서 메시지를 전달한다.&lt;&#x2F;li&gt;
&lt;li&gt;Host는 여전히 MAC Address를 통해 식별된다.&lt;&#x2F;li&gt;
&lt;li&gt;어떻게??
&lt;ul&gt;
&lt;li&gt;255.255.255.255(limited broadcast ip address)를 이용한다.
&lt;ul&gt;
&lt;li&gt;라우터에 의해 포워딩되지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Host(요청자)가 IP주소를 획득하기 전까지 LAN을 통해 broadcast된다.&lt;&#x2F;li&gt;
&lt;li&gt;BOOTP 서버는 limited broadcast를 사용하여 응답한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;dynamic-host-configuration-protocol&quot;&gt;Dynamic Host Configuration Protocol&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;DHCP는 BOOTP의 확장이다.&lt;&#x2F;li&gt;
&lt;li&gt;여전히 static allocation을 지원한다.&lt;&#x2F;li&gt;
&lt;li&gt;DHCP에 의해 영구적인 주소를 부여하는 automatic configuration을 제공한다.&lt;&#x2F;li&gt;
&lt;li&gt;일시적 할당을 지원한다. (Supports temporary allocation)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dynamic-configuration&quot;&gt;Dynamic Configuration&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;BOOTP는 lookup table(static)의 MAC에 대응하는 IP주소를 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;DHCP의 경우 IP테이블의 빈 공간을 Dynamic allocation을 통해 IP주소를 반환한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dhcp-ddonjja-jjeoca&quot;&gt;DHCP 동작 절차&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Host가 INITIALIZE 상태로 boot한다.&lt;&#x2F;li&gt;
&lt;li&gt;DHCP서버에 연결하기 위해 client는 DHCPDISCOVER message를 255.255.255.255를 이용해서 broadcast한다. 그리고 SELECT state로 전이한다.
&lt;ol&gt;
&lt;li&gt;Unique header format, variable length option field&lt;&#x2F;li&gt;
&lt;li&gt;UDP packet은 67번 포트를 이용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;서버가 DHCPOFFER message를 통해 응답한다.
&lt;ol&gt;
&lt;li&gt;Host는 하나 이상의 응답을 수신할 수 있으며, 그 중 하나에 대해 응답한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Client가 REQUEST state로 전이하고 1대의 서버로부터 IP를 받는다(lease, 임대)
&lt;ol&gt;
&lt;li&gt;DHCPREQUEST 메시지를 서버로 보낸다. (서버는 DHCPACK 으로 응답한다.)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Client는 BOUND state(IDLE)로 전이한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;출처 : &lt;a href=&quot;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:Dhcp-client-state-diagram.svg&quot;&gt;https:&#x2F;&#x2F;commons.wikimedia.org&#x2F;wiki&#x2F;File:Dhcp-client-state-diagram.svg&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>TCP</title>
		<published>2022-11-22T00:00:00+00:00</published>
		<updated>2022-11-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/tcp/" type="text/html"/>
		<id>https://js970.github.io/tcp/</id>
		<content type="html">&lt;h1 id=&quot;transmission-layer&quot;&gt;Transmission Layer&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 네트워크 스택의 각 계층은 Independent이다.&lt;&#x2F;li&gt;
&lt;li&gt;IP 와 TCP는 상호간의 “talk”이 존재한다. ⇒ Cross-Layer&lt;&#x2F;li&gt;
&lt;li&gt;지연 보장, 대역폭 보장은 지원하지 않는다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tcp-transmission-control-protocol&quot;&gt;TCP (Transmission Control Protocol)&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Realiable, in-order(순차적인) byte-stream delivery&lt;&#x2F;li&gt;
&lt;li&gt;process to process → 라우터는 TCP를 사용하지 않는다.&lt;&#x2F;li&gt;
&lt;li&gt;Congestion control 지원(sender)&lt;&#x2F;li&gt;
&lt;li&gt;Flow control 지원(receiver)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;udp-user-datagram-protocol&quot;&gt;UDP (User Datagram Protocol)&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;사용자 데이터그램 프로토콜 - 데이터를 데이터그램 단위로 처리함
&lt;ul&gt;
&lt;li&gt;데이터그램 : 독립적인 관계를 지니는 패킷&lt;&#x2F;li&gt;
&lt;li&gt;각각의 패킷은 서로 다른 라우팅 경로를 통해 전송됨&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Unreliable, unordered delivery&lt;&#x2F;li&gt;
&lt;li&gt;IP의 “best effort”의 확장&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;UDP segment의 Length부분은 헤더의 길이를 포함한다.&lt;&#x2F;li&gt;
&lt;li&gt;UDP의 특징
&lt;ul&gt;
&lt;li&gt;no connection establishment (connection establishment는 지연을 유발함)&lt;&#x2F;li&gt;
&lt;li&gt;simple : no connection state at sender, receiver&lt;&#x2F;li&gt;
&lt;li&gt;헤더 크기가 작다&lt;&#x2F;li&gt;
&lt;li&gt;congestion control이 없다 : 원하는 만큼 빠르게 동작할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;UDP checksum ⇒ IP에서의 checksum과 동일하게 계산된다.
&lt;ul&gt;
&lt;li&gt;16비트 단위의 sum, carry발생 시 + 1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;tcp&quot;&gt;TCP&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Connection 의 설정&#x2F;종료
&lt;ul&gt;
&lt;li&gt;3-way handshaking을 통해 Connection Establishment가 이뤄진다.&lt;&#x2F;li&gt;
&lt;li&gt;4-way handshaking을 통해 Connection Termination이 이뤄진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stop and Wait&lt;&#x2F;li&gt;
&lt;li&gt;Sliding Window
&lt;ul&gt;
&lt;li&gt;smart reciever&lt;&#x2F;li&gt;
&lt;li&gt;dumb sender&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Flow Control
&lt;ul&gt;
&lt;li&gt;Flow control은 sender가 receiver의 허용되는 버퍼 용량 이상으로 overrunning하는 것을 방지한다.&lt;&#x2F;li&gt;
&lt;li&gt;end-to-end issue이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Adaptive Timeout
&lt;ul&gt;
&lt;li&gt;서버와 클라이언트 사이의 데이터 교환이 없을 경우 일반적으로 2시간의 Timeout을 가지고 disconnect된다.(설정가능)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Congestion Control
&lt;ul&gt;
&lt;li&gt;Congestion Control(혼잡 방지)은 네트워크를 통해 너무 많은 데이터가 전송되어 스위치 또는 링크에 과부하가 걸리는 것을 방지한다.&lt;&#x2F;li&gt;
&lt;li&gt;IPv6의 경우 ECN(Explicit Congestion Notification)이 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 통해 라우터가 congestion의 존재를 알 수 있다.
&lt;ul&gt;
&lt;li&gt;packet arrival rate &amp;gt; service rate인 경우&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;IPv4에서는 RTT(Round Trip Time)를 통해 “추측” 할 뿐이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;TCP에는 7개의 타이머가 있다. 이를 이용해서 reliable connection을 보장한다.
&lt;ul&gt;
&lt;li&gt;retransmission timer, persistant timer, keep alive timer … (총 7개)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;transport-services-and-protocols&quot;&gt;Transport services and protocols&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 호스트에서 실행되는 어플리케이션 프로세스 간의 논리적 통신 제공&lt;&#x2F;li&gt;
&lt;li&gt;Transport system은 end systems 간에 실행된다.&lt;&#x2F;li&gt;
&lt;li&gt;송신 측 : 어플리케이션 계층의 앱 메시지를 세그먼트 단위로 분할하고 네트워크 계층으로 전달한다.&lt;&#x2F;li&gt;
&lt;li&gt;수신 측 : 세그먼트를 메시지로 재구성한다. 이를 어플리케이션 계층으로 전달한다.&lt;&#x2F;li&gt;
&lt;li&gt;어플리케이션 계층에서는 하나 이상의 전송 프로토콜을 사용 가능한다.
&lt;ul&gt;
&lt;li&gt;Internet : TCP &amp;amp; UDP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;transport-layer-vs-network-layer&quot;&gt;Transport Layer vs Network Layer&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;transport-layer&quot;&gt;Transport Layer&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 간의 통신&lt;&#x2F;li&gt;
&lt;li&gt;네트워크 계층에 의존하며, 네트워크 계층을 강화한다(?).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;network-layer&quot;&gt;Network Layer&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;host간의 통신&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tcp-segment-structure&quot;&gt;TCP segment Structure&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Wireshark TCP 과제 참고할 것&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%201.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;src-dest-port&quot;&gt;src, dest port&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;송신지 및 수신지 포트 번호&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sequence-number-acknowledgement-number&quot;&gt;sequence number, acknowledgement number&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;세그먼트 단위가 아닌 바이트 단위로 카운팅한다.&lt;&#x2F;li&gt;
&lt;li&gt;sequence number는 TCP segment의 연속된 데이터 번호이다. 전송되는 세그먼트의 가장 앞에 있는 숫자를 표기한다.
&lt;ul&gt;
&lt;li&gt;패킷이 1000 ~ 1150까지의 TCP 세그먼트 데이터를 전송한다면 sequence number는 1000이다. 다음 sequence number는 1151이다.&lt;&#x2F;li&gt;
&lt;li&gt;acknowledgement number(ACK #)는 상대방으로부터 받아야하는 다음 TCP 세그먼트의 데이터 번호&lt;&#x2F;li&gt;
&lt;li&gt;acknowledgement number는 $0$ ~ $2^{32}-1$의 값을 가질 수 있다. 이때 대역폭에 따라 ACK의 warp around time을 구할 수 있다.
&lt;ul&gt;
&lt;li&gt;T1(1.5Mbps의 대역폭)의 경우 $2^{32}-1 &#x2F; 1.5*2^{6} = 6.4hours$의 ACK warp aroound time을 가진다.&lt;&#x2F;li&gt;
&lt;li&gt;STS-24(1.2Gbps의 대역폭)의 경우 $2^{32}-1 &#x2F; 1.2*2^{9} = 28second$의 ACK warp around time을 가진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;head-length-data-offset-not-used-reserved&quot;&gt;head length(data offset), not used(reserved)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;TCP 헤더의 길이를 나타낸다.&lt;&#x2F;li&gt;
&lt;li&gt;최소 크기는 5word(20byte)이고, 최대 크기는 15word(60byte)이다.
&lt;ul&gt;
&lt;li&gt;1word = 4byte&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;not used부분은 future use를 위해 남겨두는 부분이며 0으로 설정된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;u-urg&quot;&gt;U(URG)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Urgent point field의 significant를 가리킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;a-ack&quot;&gt;A(ACK)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ACK field의 significant를 가리킨다. 클라이언트에서 보낸 초기 SYN패킷 이후의 모든 패킷에는 이 플래그가 set 된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;p-psh&quot;&gt;P(PSH)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Push function이다. buffered data를 receiving application으로 push 할지를 결정한다.
&lt;ul&gt;
&lt;li&gt;버퍼에 들어오자마자 push…?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;r-rst&quot;&gt;R(RST)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Reset the connection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;s-syn&quot;&gt;S(SYN)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;sequence number를 동기화한다. 서버 및 클라이언트에서 송신한 첫 번째 패킷에서만 이 flag를 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;f-fin&quot;&gt;F(FIN)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;sender의 마지막 패킷을 가리킨다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tcp-establishment-termination-and-retransmission-scenarios&quot;&gt;TCP Establishment, Termination and retransmission scenarios&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tcp-establishment&quot;&gt;TCP Establishment&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%202.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;TCP Establishment는 3-way handshaing으로 이뤄진다.&lt;&#x2F;li&gt;
&lt;li&gt;Sequence Number는 random number로 설정된다(항상 0부터 시작되는 것이 아님)&lt;&#x2F;li&gt;
&lt;li&gt;Sequence Number는 byte stream의 번호이다.&lt;&#x2F;li&gt;
&lt;li&gt;Acknowledge Number는 반대쪽에서 전송행야 할 다음 byte를 말한다.&lt;&#x2F;li&gt;
&lt;li&gt;순서가 뒤죽박죽인 segment를 정렬하는 것 ⇒ TCP구현의 문제이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tcp-termination&quot;&gt;TCP Termination&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%203.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Client 와 Server모두 Terminate를 시작할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;Client가 Terminate를 시작한다고 했을 때의 시나리오는 아래와 같다.
&lt;ul&gt;
&lt;li&gt;Client가 TCP FIN 패킷을 전송한다.&lt;&#x2F;li&gt;
&lt;li&gt;Server가 TCP FIN 패킷에 대한 ACK를 전송한다.&lt;&#x2F;li&gt;
&lt;li&gt;Client는 이후 Server로부터의 FIN 패킷 수신을 대기한다.&lt;&#x2F;li&gt;
&lt;li&gt;Server가 전송한 FIN 패킷을 수신하면 Client는 Server로 ACK패킷을 전송한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위와 같은 4-way handshaking으로 TCP Terminate가 이뤄진다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tcp-retransmission-scenarios&quot;&gt;TCP retransmission scenarios&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Host A에서 전송한 패킷에 대한 Host B의 ACK가 loss된 경우이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%204.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Timeout 이내에 ACK를 수신하지 못했을 경우, 아래 그림과 같이 Host A는 ACK를 받지 못한 패킷을 Host B로 재전송한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%205.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Host B로부터의 ACK가 Timeout이후에 Host A로 도달하는 경우이다.&lt;&#x2F;li&gt;
&lt;li&gt;Host A는 Timeout내에 ACK를 수신하지 못했으므로 Segment #92부터 시작하는 패킷을 재전송한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 Host B는 이미 #119까지의 데이터를 모두 수신한 상태이기 때문에 Host A에게 Segment #120을 요구하는 ACK를 전송한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 경우는 Timeout 이내에서 ACK 100이 loss되었으나 ACK 120은 정상적으로 전송된 경우이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%206.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cumulative ACK scenario에 의해 ACK 100이 loss되어도 ACK 120이 Timeout내에 전송되면 Don’t care이다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 통해 Dumb Sender &amp;amp; Smart Receiver를 확인할 수 있다.
&lt;ul&gt;
&lt;li&gt;receiver측에서 패킷이 연속적으로 존재하는 것을 확인했으므로 ACK 120을 전송&lt;&#x2F;li&gt;
&lt;li&gt;sender는 ACK의 요구대로 전송&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tcp-state-diagram&quot;&gt;TCP State Diagram&lt;&#x2F;h2&gt;
&lt;p&gt;출처 : &lt;a href=&quot;https:&#x2F;&#x2F;ssup2.github.io&#x2F;theory_analysis&#x2F;TCP_Connection_State&#x2F;&quot;&gt;https:&#x2F;&#x2F;ssup2.github.io&#x2F;theory_analysis&#x2F;TCP_Connection_State&#x2F;&lt;&#x2F;a&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;ssup2.github.io&#x2F;images&#x2F;theory_analysis&#x2F;TCP_Connection_State&#x2F;TCP_Connection_State_Diagram.PNG&quot; alt=&quot;TCP State Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tcp-client-lifecycle&quot;&gt;TCP Client lifecycle&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%208.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tcp-server-lifecycle&quot;&gt;TCP Server lifecycle&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%209.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;LISTEN state에서 passive participant(server)의 local process가 send operation을 호출하면 SYN_SENT상태로 전이하기도 한다. 이는 마치 active connection establishment처럼 보인다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2010.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tcp-connection-terminating&quot;&gt;TCP  connection terminating&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ESTABLISHED 상태에서 CLOSED상태로 전이하는 세 가지 조합이 존재한다.&lt;&#x2F;li&gt;
&lt;li&gt;Active Closer : 먼저 close() 하는 Host&lt;&#x2F;li&gt;
&lt;li&gt;Passive Closer : FIN을 수신하고 이후에 close하는 Host&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;Active Closer
&lt;ul&gt;
&lt;li&gt;ESTABLISHED → FIN_WAIT→ FIN_WAIT_2 → TIME_WAIT → CLOSED
&lt;ol&gt;
&lt;li&gt;Active Closer가 FIN을 전송하고 FIN_WAIT_1로 전이한다.&lt;&#x2F;li&gt;
&lt;li&gt;Passive Closer로부터 ACK를 수신하고 FIN_WAIT_2로 전이한다.&lt;&#x2F;li&gt;
&lt;li&gt;Passive Closer로부터 FIN을 수신하고 TIME_WAIT로 전이한다.&lt;&#x2F;li&gt;
&lt;li&gt;2MSL(Maximum Segment Lifetime)만큼 TIME_WAIT가 유지된 후 CLOSED로 전이한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Passive Closer
&lt;ul&gt;
&lt;li&gt;ESTABLISHED → CLOSE_WAIT → LAST_ACK → CLOSED
&lt;ol&gt;
&lt;li&gt;CLOSE_WAIT 상태는 Passive Closer가 Active Closer로부터 FIN을 수신하고 전이하는 상태이다.&lt;&#x2F;li&gt;
&lt;li&gt;Passive Closer가 close() System Call을 호출하거나 Passive Closer의 Process가 종료되면 Passive Closer는 FIN을 전송하고 LAST_ACK상태가 된다.&lt;&#x2F;li&gt;
&lt;li&gt;CLOSE_WAIT상태의 Passive Closer가 FIN을 전송한 후 이에 대한 ACK를 전송받기 전까지의 상태이다.&lt;&#x2F;li&gt;
&lt;li&gt;ACK를 수신하고 CLOSED로 전이한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;동시에 close하는 경우(둘다 Active Closer)
&lt;ul&gt;
&lt;li&gt;ESTABLISHED → FIN_WAIT_1 → CLOSING → TIME_WAIT → CLOSED
&lt;ol&gt;
&lt;li&gt;simultaneous closes가 발생하여 FIN_WAIT_1상태의 두 Active Closer가 FIN을 수신한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 경우 두 Active Closer들은 FIN_WAIT_1에서 CLOSING 상태로 전이한다.&lt;&#x2F;li&gt;
&lt;li&gt;다른 Host로부터 ACK를 전송받고 TIME_WAIT로 전이한다.&lt;&#x2F;li&gt;
&lt;li&gt;TIME_WAIT에서 2MSL만큼 대기한 후 CLOSED로 전이한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;why-time-wait&quot;&gt;Why TIME_WAIT?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;TIME_WAIT 상태에서는 2 Maximum Segment  Lifetime만큼 TIME_WAIT가 유지된다.&lt;&#x2F;li&gt;
&lt;li&gt;Maximum Segment Lifetime은 개념적으로 end point간의 round trip에 걸리는 시간이다.&lt;&#x2F;li&gt;
&lt;li&gt;1MSL은 보통 1분 ~ 4분 정도이다.&lt;&#x2F;li&gt;
&lt;li&gt;TCP의 전이중 연결(full-duplex connection)이 reliable하게 종료되도록 하기 위해 TIME_WAIT가 필요하다.&lt;&#x2F;li&gt;
&lt;li&gt;네트워크 상에서 종료된 Connection관련 Segment들이 완전히 제거 될때까지 대기하여 이후에 생성되는 새로운 Connection에 영향을 미치지 않도록 하기 위해 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2011.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tcp-error-control&quot;&gt;TCP Error Control&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;stop-and-wait-arq&quot;&gt;Stop-and-Wait ARQ&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이 방법에서는 전송 데이터의 복사본을 유지하고 있다가 타이머가 만료되면 재전송한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Wi-Fi등에서 사용된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Stop-and-Wait에서는 frame의 numbering을 위해 sequence number를 사용한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;sequence number는 modulo-2공간에 기반한다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2012.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2013.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Stop-and-Wait에서는 다음 frame number의 modulo-2연산한 값을 acknowledgement number로 사용한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Stop-and-Wait의 Flow Diagram은 아래와 같다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2014.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Bandwidth-delay product&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bandwidth * Delay = round trip당 최대 전송 가능한 크기&lt;&#x2F;li&gt;
&lt;li&gt;1Mbps의 대역폭을 가지는 통신에서 round trip delay 가 20ms 라고 하자
&lt;ul&gt;
&lt;li&gt;$(1*10^6) * (20 * 10^{-3}) = 20000$&lt;&#x2F;li&gt;
&lt;li&gt;즉, 20ms안에 최대 20000bit의 전송이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;이때 frame의 크기가 1000bit라고 하면 $utilization = 1000 &#x2F; 20000 = 5 %$ 이다.&lt;&#x2F;li&gt;
&lt;li&gt;이처럼 Stop-and-Wait방식에서는 대역폭이 크거나 frame의 크기가 작다면 대역폭을 낭비가 심하다.&lt;&#x2F;li&gt;
&lt;li&gt;주로 Wi-Fi등의 noise가 심한 통신 방법에서 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;go-back-n-arq&quot;&gt;Go - Back - N ARQ&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2015.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Segment #5, Segment #6이 수신되었지만 #3, #4가 제대로 수신되지 않았다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;reveiver에서는 ACK 3을 전송하였으나 #5, #6을 수신한 꼴이 된다. → ACK 3을 각각의 Segment에 대해 전송할 것이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;위의 그림에서는 재전송된 ACK 3이 도착하기 전에 Host A의 Timeout이 경과하여 ACK를 수신하지 못한 Host A가 수신하지 못한 첫 번째 ACK인 Segment #2(ACK 3이 수신되어야 했다)로 되돌아가 Segment를 재전송한다. (Go - Back - N)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Go-Back-N방법에서는 sequence number는 modulo $2^m$공간 안에 존재한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Send window size는 최대 $2^m-1$의 크기를 가진다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$2^m$의 크기를 가지게 되면 모든 ACK가 loss되었을 때 다음번 수신된 Frame이 정상적으로 인식되는 문제가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 경우 경우 실제로 전송된 정보는 sender window가 sliding되지 않았으므로 sender window에서 이전에 전송한 Frame이 재전송된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Go-Back-N은 이미 성공적으로 전송된 프레임이 있다고 하더라도 이전에 와야 할 프레임이 제대로 전송되지 않았다면 전송에 실패한 프레임부터 차례대로 재전송해야 한다. ⇒optimal 하지 않음&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2016.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Stop-and-Wait는 Go-Back-N에서 send window의 크기가1인 특수한 경우로 생각할 수 있다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;selective-repeat-arq&quot;&gt;Selective Repeat ARQ&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;sender 및 receiver의 window size는 $2^{(sequence\ number\ field\ in \ bits)-1}$이하의 크기를 가질 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;sender측에서는 Go-Back-N과 동일하게 sender window의 모든 값들을 ACK없이 전송 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;receiver에서는 수신한 Frame에 대해서 검사하고 ACK를 전송한다, 전달받은 Frame에 대해서 receiver window를 slide한다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 receiver window에서 전송받지 못한 Frame이 있다면 이에 대해 NAK를 전송한다. 이후 전송받은 Frame에 대해서는 버퍼에서 유지하고 있는다.&lt;&#x2F;li&gt;
&lt;li&gt;NAK에 대해 정상적으로 재전송이 이루어졌다면 receiver window를 slide한다.&lt;&#x2F;li&gt;
&lt;li&gt;아래 그림은 sender window 및 receiver window의 크기가 4인 경우에 대한 selective reaeat scenario이다.
&lt;ul&gt;
&lt;li&gt;왼쪽 그림은 ACK loss가 발생했을 때의 동작이고, 오른쪽 그림은 Frame loss가 발생했을 때의 동작이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2017.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tcp-flow-control&quot;&gt;TCP Flow Control&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Receiver에 의해 flow control 이 이뤄진다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;TCP header의 AdvertisedWindow를 이용하여 receiver가 사용 가능한 buffer공간을 sender에게 전송한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Receicver 버퍼의 오버플로우를 막기 위해 아래를 만족해야 한다.&lt;&#x2F;p&gt;
&lt;p&gt;LastByteRcvd-LastByteRead ≤ Sizeof(MaxRcvBuffer)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;TCP&#x2F;Untitled%2018.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;정확한 AdvertisedWindow의 값의 계산은 아래와 같다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;AdvertisedWindow = MaxRcvBuffer - {(NextByteExpected - 1) - LastByteRead - {the amount of out-of-order data received since the NextByteExpected Sequence Number)}&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Receiver process에서 무거운 작업을 처리하는 등의 이유로 Read가 지연되면 자연히 AdvertisedWindow의 크기는 줄어들게 되며, 결국은 0으로 수렴할 것이다.&lt;&#x2F;p&gt;
&lt;p&gt;⇒ Slow Receiving process는 결국 빠른 sending process를 멈추게 될 것이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;reference&quot;&gt;reference&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mangkyu.tistory.com&#x2F;15&quot;&gt;[TCP&#x2F;UDP] TCP와 UDP의 특징과 차이&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ssup2.github.io&#x2F;theory_analysis&#x2F;TCP_Connection_State&#x2F;&quot;&gt;TCP Connection State&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ibm.com&#x2F;docs&#x2F;en&#x2F;zos&#x2F;2.1.0?topic=SSLTBW_2.1.0&#x2F;com.ibm.zos.v2r1.halu101&#x2F;constatus.html&quot;&gt;TCP connection status&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vicente-blog.com&#x2F;blog&#x2F;66&#x2F;&quot;&gt;[네트워크프로토콜] 흐름제어, 에러제어&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mslilsunshine.tistory.com&#x2F;102&quot;&gt;Window Size란?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CIDR</title>
		<published>2022-11-17T00:00:00+00:00</published>
		<updated>2022-11-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/cidr/" type="text/html"/>
		<id>https://js970.github.io/cidr/</id>
		<content type="html">&lt;h1 id=&quot;cidr-classless-inter-domain-routing&quot;&gt;CIDR(Classless Inter Domain Routing)&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;EGP(Exterior Gateway Protocol)에서 CIDR을 사용하여 IP를 분배한다.&lt;&#x2F;li&gt;
&lt;li&gt;RFC1519에서 CIDR의 개념을 설명한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;problem-of-ipv4-class&quot;&gt;Problem of IPv4 “class”&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;대부분의 경우 class A(16M)는 과하고, class C(255)는 부족하다.&lt;&#x2F;li&gt;
&lt;li&gt;조사에 따르면 class B의 경우도 절반 이상의 class B 네트워크의 host수가 50 미만이었다…&lt;&#x2F;li&gt;
&lt;li&gt;“class”개념의 탈피가 필요하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cidryi-gganyeom&quot;&gt;CIDR의 개념&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;앞서 말한 “class”때문에 IP주소의 낭비가 심각하다.&lt;&#x2F;li&gt;
&lt;li&gt;EGP에서는 CIDR을 통해 주소를 할당하여 IP주소의 낭비를 막는다.&lt;&#x2F;li&gt;
&lt;li&gt;CIDR을 사용하면 2의 거듭제곱(power of 2)의 단위로 IP주소의 동적 할당이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;2000개의 주소를 요구한다면 2048개의 IP주소를 할당하는 식이다.&lt;&#x2F;li&gt;
&lt;li&gt;CIDR은 bitwise prefix를 사용하여 IP주소를 식별한다. 이를 통해 IP 주소 블록을 단일 항목으로 그룹화하여 라우팅을 용이하게 한다.
&lt;ul&gt;
&lt;li&gt;class 기반 라우팅이 아닌 CIDR block 기반 라우팅이다.&lt;&#x2F;li&gt;
&lt;li&gt;CIDR block 기반 라우팅을 통해 라우팅 테이블 항목을 최소화할 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;같은 CIDR블록은 IP주소의 이진 표현에서 비트 단위의 초기 시퀸스가 같다.&lt;&#x2F;li&gt;
&lt;li&gt;IPv4 CIDR구문은 IPv4와 유사한 구문을 사용한다 - XXX.YYY.ZZZ.WWW&#x2F;NN&lt;&#x2F;li&gt;
&lt;li&gt;X, Y, Z, W부분은 IP와 같이 8bit단위의 4바이트(32비트) 이진수로 해석된다.&lt;&#x2F;li&gt;
&lt;li&gt;슬래시 뒤쪽 부분인 NN은 주소의 왼쪽부터 카운트되는 공유된 초기 시퀸스의 개수이다.
&lt;ul&gt;
&lt;li&gt;1의 개수를 의미한다.&lt;&#x2F;li&gt;
&lt;li&gt;&#x2F;24인 경우 ⇒ 11111111.11111111.11111111.00000000&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cidr-routing-table-entry&quot;&gt;CIDR &amp;amp; Routing Table Entry&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;CIDR에서는 라우팅 테이블의 각 항목이 32bit mask를 사용한다.
&lt;ul&gt;
&lt;li&gt;라우팅 테이블은 (IP주소, subnet mask, outgoing line)의 triple array로 구성된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;라우터는 아래와 같이 동작한다.
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;패킷이 들어오면 대상의 IP주소가 먼저 추출된다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;그런 다음 라우팅 테이블을 항목별로 스캔하여 대상 주소를 마스킹하고, 일치하는 테이블 항목을 탐색한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;일치하는 항목이 여러 개 있을 경우 가장 일치하는 부분이 긴 항목을 사용한다.&lt;&#x2F;p&gt;
&lt;p&gt;⇒ longest prefix match first, &#x2F;20과 &#x2F;24 두 개의 mask가 일치한다면 &#x2F;24를 사용한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cidr-example&quot;&gt;CIDR Example&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;CIDR&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cambridge → Edenburgh → Oxford순으로 IP 할당을 요청했다고 가정하자&lt;&#x2F;li&gt;
&lt;li&gt;194.24.0.0의 시작 주소에서부터 할당을 할 수 있다고 했을 때, Cambridge는 2048개의 주소를 요청하였으므로 194.24.0.0 ~ 194.24.7.255까지의 IP를 할당할 수 있다.(256 * 8 = 2048)&lt;&#x2F;li&gt;
&lt;li&gt;Cambridge의 Subnet Mask 계산은 아래와 같다.
&lt;ul&gt;
&lt;li&gt;(194.24의 경우 Network Number이므로 생략함)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;CIDR&#x2F;Untitled%201.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;이때 subnet mask의 1의 개수가 총 21개이므로 194.24.0.0&#x2F;21과 같이 표현할 수 있다.
&lt;ul&gt;
&lt;li&gt;11111111.11111111.11111000.00000000 = 255.255.248.0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;같은 방법으로 Edenburgh의 Subnet mask를 계산하면 아래와 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;CIDR&#x2F;Untitled%202.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Oxford의 경우 Edenburgh의 IP address를 할당한 직후 available IP 인 194.24.12.0부터 분배하면 아래와 같은 문제가 발생한다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;CIDR&#x2F;Untitled%203.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;이때 CIDR 의 표현은 194.24.12.0&#x2F;19가 되는데 이 경우 할당 가능한 IP의 개수가 32 * 256 = 8192이다. 이 경우 실제 필요한 범위 내인 4096개 보다 더 많은 IP가 할당되므로 194.24.12.0부터 Oxford에 할당할 수 없다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;subnet mask에서 0의 개수는 곧 할당 가능한 host의 수를 나타낸다. $2^{13}$ = 8192이므로 위와 같은 계산이 나온다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;따라서 Oxford에 알맞은 크기의 IP address가 할당할 수 있도록 Oxford의 First Address를 194.24.12.0이 아닌 194.24.16.0부터 할당한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Oxford의 IP address 할당을 위해 사용되는 194.24.16.0~194.24.21.255의 IP와 Edenburgh가 사용하는 194.24.8.0~194.24.11.255사이의 빈 IP주소는 알맞은 크기의 할당이 필요할 때까지 남겨둔다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;add-on&quot;&gt;Add on&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Utilization = $busy~time&#x2F;observed~time$, 100%, 50%, 25% … ⇒ no unit&lt;&#x2F;li&gt;
&lt;li&gt;Throughput = $number~of~successful~packets &#x2F; observed~time$, 10 packets &#x2F; sec ⇒ unit&lt;&#x2F;li&gt;
&lt;li&gt;100% utilization does not garuntee good throughput!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Routing</title>
		<published>2022-11-10T00:00:00+00:00</published>
		<updated>2022-11-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/routing/" type="text/html"/>
		<id>https://js970.github.io/routing/</id>
		<content type="html">&lt;h2 id=&quot;forwarding-table-and-routing-table&quot;&gt;Forwarding table and Routing table&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Routing&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;forwarding-table&quot;&gt;Forwarding table&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;패킷을 포워딩하는데 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;포워딩 기능을 수행하기에 적합한 정보를 포함해야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;Network Number에 대응하는 outgoing interfafce로의 매핑&lt;&#x2F;li&gt;
&lt;li&gt;다음 hop으로의 전송을 위한 MAC address&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;routing-table&quot;&gt;Routing table&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;라우팅 테이블은 라우팅 알고리즘에 의해 사전에 구축된 테이블이다.&lt;&#x2F;li&gt;
&lt;li&gt;Network Number와 Next hop을 매핑한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;distance-vector-and-link-state-routing-protocols&quot;&gt;Distance vector and Link State Routing Protocols&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;패킷은 라우터에 의해 포워딩되어야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;링크를 구성하는 경로에 대한 정보를 알아야 포워딩이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;어떻게 이 “topology”에 대한 정보를 얻을 수 있을까?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;distance-vector&quot;&gt;Distance vector&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;각 노드는 모든 노드로 인접 노드의 정보를 전송한다.&lt;&#x2F;li&gt;
&lt;li&gt;각 노드는 다른 모든 노드에 대한 “거리”(비용)를 포함하는 1차원 배열을 구성한다.&lt;&#x2F;li&gt;
&lt;li&gt;해당 벡터를 인접한 노드에 분배한다.&lt;&#x2F;li&gt;
&lt;li&gt;RIP(Routing Information Protocol) 프로토콜을 사용하여 정보를 전송한다.&lt;&#x2F;li&gt;
&lt;li&gt;Bellman-Ford알고리즘을 이용한다.&lt;&#x2F;li&gt;
&lt;li&gt;BGP(Border Gateway Protocol, CISCO), EGP(Exterior Gateway Protocol)에서 이러한 방법을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Routing&#x2F;Untitled%201.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;distance-vector-example&quot;&gt;Distance Vector Example&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Routing&#x2F;Untitled%202.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;패킷을 교환하기 전 A노드에서 다른 노드로의 distance는 $\infty$로 초기화된다.&lt;&#x2F;li&gt;
&lt;li&gt;인접 노드 간의 패킷 교환을 통해 점진적으로 B, C, D, E로의 distance가 구해진다.&lt;&#x2F;li&gt;
&lt;li&gt;위 상황에서 A노드 기준으로 총 4번의 패킷 교환이 이루어지면 E노드에 대한 올바른 정보를 얻을 수 있다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Routing&#x2F;Untitled%203.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A노드와 B노드 사이의 경로가 끊겼다면 위 그림과 같이 순차적인 패킷 전송에 의해 매우 느린 속도로 A 노드에서 각 노드로의 거리가 $\infty$로 갱신될 것이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;link-state-routing&quot;&gt;Link State Routing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;각 노드는 모든 노드로 모든 노드의 정보를 전송한다.(Broadcasting, 많은 비용 소모)&lt;&#x2F;li&gt;
&lt;li&gt;모든 라우터는 아래와 같은 동작을 한다.
&lt;ol&gt;
&lt;li&gt;인접 노드를 발견하고 해당 노드의 네트워크 주소를 알아낸다.&lt;&#x2F;li&gt;
&lt;li&gt;인접 노드로의 delay(cost)를 측정한다.&lt;&#x2F;li&gt;
&lt;li&gt;인접 노드의 정보를 알아냈다는 패킷을 생성한다.&lt;&#x2F;li&gt;
&lt;li&gt;다른 모든 라우터로 해당 패킷을 전송한다.&lt;&#x2F;li&gt;
&lt;li&gt;다른 모든 라우터로의 최단 경로를 계산한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;결과적으로 topology 와 delay가 실험적으로 측정되며, 이를 다른 라우터에 분배하여 공유한다.&lt;&#x2F;li&gt;
&lt;li&gt;이후 Dijkstra알고리즘을 이용하여 다른 모든 라우터로의 최단 경로를 알아낼 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;OSPF(Open Shortest Path First)에서 이러한 방법을 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Routing&#x2F;Untitled%204.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;m.blog.naver.com&#x2F;PostView.naver?isHttpsRedirect=true&amp;amp;blogId=nackji80&amp;amp;logNo=221431942767&quot;&gt;[CCIE] 라우팅 프로토콜의 분류: Distance Vector Routing vs. Link State Routing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mobile IPv4</title>
		<published>2022-11-08T00:00:00+00:00</published>
		<updated>2022-11-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/mobile-ipv4/" type="text/html"/>
		<id>https://js970.github.io/mobile-ipv4/</id>
		<content type="html">&lt;h2 id=&quot;mobile-ipv4-issue&quot;&gt;Mobile IPv4 issue&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Mobile_IPv4&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Host #1과 Host #2가 Network #1에 속해있을 때는 둘 사이에 통신이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;Host #1이 Network #2로 이동하였을 경우 Host #2는 Host #1에게 라우터를 거쳐서만 통신할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;문제는 Host #1이 Network #2로 이동하였을 때의 IP를 Host #2가 알 방법이 없다는 것이다…&lt;&#x2F;li&gt;
&lt;li&gt;IPv4는 고정 노드 대상의 유선 네트워크로 설계되었다. Mobility에 대해 고려되지 않았다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Mobile_IPv4&#x2F;Untitled%201.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;위 그림과 같은 상황에서 R1라우터의 라우팅 테이블에 R2, R3의 Net&#x2F;Subnet ID가 모두 있다고 하더라도 A는 B의 이동해 대해 알 방법이 없다는 것이 문제이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Mobile_IPv4&#x2F;Untitled%202.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;3rd party server를 이용하는 경우에는 A가 Net #1 에서 #2로 이동해도 서버가 사용자를 기억하기 때문에 always on connectivity(seamless connection)가 가능하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ha-home-agent-fa-foregin-agent&quot;&gt;HA(Home Agent), FA(Foregin Agent)&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;coa-care-of-address&quot;&gt;CoA(Care of Address)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;이동한 모바일 노드의 현재 위치&lt;&#x2F;li&gt;
&lt;li&gt;CoA는 일반적으로 FA의 주소와 동일하다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ha&quot;&gt;HA&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;모바일 노드(MN)의 홈 주소와 같은 서브넷에 속한 라우터&lt;&#x2F;li&gt;
&lt;li&gt;원격 호스트가 MN에 패킷을 보낼 때 MN을 대신하여 작동한다.&lt;&#x2F;li&gt;
&lt;li&gt;원격 호스트로부터 패킷을 전송받으면 MN으로 향하는 패킷을 IP터널링을 통해 MN의 현재 위치로 전송한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fa&quot;&gt;FA&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Host가 HA를 떠나 이동한 네트워크의 라우터&lt;&#x2F;li&gt;
&lt;li&gt;HA에서 보낸 패킷을 수신하여 모바일 호스트에게 다시 전달하는 역할을 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;solution-1&quot;&gt;Solution&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;구현에 관한 부분은 구현하는 개발자에게 달려 있다.&lt;&#x2F;li&gt;
&lt;li&gt;MN의 상태(location, foreign network등)를 관리하는 것은 DB를 사용해도 되고 table을 사용해도 된다. 전적으로 “implementation issue”이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Mobile_IPv4&#x2F;Untitled%203.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;registration-process&quot;&gt;registration process&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;MN이 네트워크를 변경한다. HA → FA
&lt;ol&gt;
&lt;li&gt;이때 MN은 HA의 주소를 알고 있어야 한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;MN은 FA로부터의 주기적인 advertisement messages를 listen한다.&lt;&#x2F;li&gt;
&lt;li&gt;모바일 노드는 FA(이동한 네트워크의 라우터)에게 정보를 전송한다. (reply)
&lt;ol&gt;
&lt;li&gt;FA에게 MN의 IP주소와 MAC주소를 알린다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;FA는 HA에게 CoA를 알린다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;packet-transmission-host-to-ha&quot;&gt;packet transmission (Host to HA)&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;MN으로 패킷을 보내려는 모든 호스트는 해당 노드의 홈 주소와 동일한 대상 주소로 패킷을 보낸다.&lt;&#x2F;li&gt;
&lt;li&gt;정상적으로 IP 포워딩이 이루어진다면 해당 패킷을 HA로 도착한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;packet-transmission-ha-to-mn&quot;&gt;packet transmission (HA to MN)&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;HA는 proxy ARP기술을 이용하여 다른 노드가 MN으로 인식하도록 한다.
&lt;ol&gt;
&lt;li&gt;HA는 ARP메시지에 자신의 IP주소가 아닌 MN의 IP주소를 삽입한다.&lt;&#x2F;li&gt;
&lt;li&gt;같은 네트워크의 다른 노드들은 MN의 IP와 HA의 MAC을 대응시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 과정을 통해 HA는 MN으로 향하는 패킷을 인터셉트한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;HA는 IP터널링 기술을 이용하여 FA로 Host로부터 전송받은 패킷을 전송한다.&lt;&#x2F;li&gt;
&lt;li&gt;FA는 HA로부터 전송받은 패킷의 IP터널링용 헤더를 제거한다.&lt;&#x2F;li&gt;
&lt;li&gt;MN이 FA의 네트워크로 들어왔을 때 전송한 IP주소와 MAC주소를 바탕으로 HA로부터 전송받은 패킷을 MN으로 전송한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;ipv6&quot;&gt;IPv6?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Mobile IPv6의 경우 FA의 동작 없이도 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1018 - 체스판 다시 칠하기</title>
		<published>2022-11-01T00:00:00+00:00</published>
		<updated>2022-11-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1018-cessepan-dasi-cilhagi/" type="text/html"/>
		<id>https://js970.github.io/1018-cessepan-dasi-cilhagi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 4&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2022년 11월 1일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;모든 경우의 수를 검색하는 부르트포스 알고리즘 문제였다.&lt;&#x2F;li&gt;
&lt;li&gt;정답 체스판 배열, 입력된 값을 8x8크기로 자르는 함수, 8x8크기로 조정된 입력과 정답을 비교하는 함수를 이용&lt;&#x2F;li&gt;
&lt;li&gt;정답 체스판 배열의 경우 8x8크기로 고정하여 전역변수로 선언하였다.&lt;&#x2F;li&gt;
&lt;li&gt;입력을 8x8크기로 자르는 함수의 경우 동적 할당을 사용하여 새로운 배열을 이중 포인터 형태로 반환한다.&lt;&#x2F;li&gt;
&lt;li&gt;정답을 비교하는 함수는 8x8크기의 두 배열에 대해 불일치 지점의 개수를 세는 역할을 한다.&lt;&#x2F;li&gt;
&lt;li&gt;각각을 구현하니 프로그램이 정답을 출력함을 확인할 수 있었다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; real_chessboard[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;] = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;cut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cb&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rowidx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;colidx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;**size8x8 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        size8x8[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;; j++)
&lt;&#x2F;span&gt;&lt;span&gt;            size8x8[i][j] = cb[rowidx+i][colidx+j];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; size8x8;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cb&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, todofix;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;; j++)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(cb[i][j] != real_chessboard[i][j]) count++;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    todofix = (count &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;) ? count : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;-count;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; todofix;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; row, column;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; row;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; column;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;**chessboard = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[row];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; row; i++)
&lt;&#x2F;span&gt;&lt;span&gt;        chessboard[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[column];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; color;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; clr;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; row; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; column; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            cin &amp;gt;&amp;gt; color;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; White --&amp;gt; 1, Black --&amp;gt; 0
&lt;&#x2F;span&gt;&lt;span&gt;            clr = (color == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;W&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            chessboard[i][j] = clr;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minfix = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;65&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; tmp;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; row - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; column - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            tmp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cut&lt;&#x2F;span&gt;&lt;span&gt;(chessboard, i, j));
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(tmp &amp;lt; minfix) minfix = tmp;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; minfix &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;aside&gt;
⚠️ 이중 포인터를 사용해 이차원 배열의 동적할당을 하는 법을 기억해두자
&lt;&#x2F;aside&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;**arr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;*[row]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; row; i++)
&lt;&#x2F;span&gt;&lt;span&gt;	arr[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[col];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1018&quot;&gt;1018번: 체스판 다시 칠하기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1436 - 영화감독 숌</title>
		<published>2022-11-01T00:00:00+00:00</published>
		<updated>2022-11-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1436-hyeonhwaggadog-ssyo/" type="text/html"/>
		<id>https://js970.github.io/1436-hyeonhwaggadog-ssyo/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2022년 11월 1일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;10000번째 악마의 숫자까지 세야 한다.&lt;&#x2F;li&gt;
&lt;li&gt;각 자리 숫자를 나타내는 변수 i, j, k, l을 선언한다. 각 변수는 0에서 9의 값을 가질 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;devilnum이 저장되는 set 컨테이너 devilnum을 선언한다.&lt;&#x2F;li&gt;
&lt;li&gt;4중 for문을 선언하여 i, j, k, l의 값을 바꿔 가며 666이 포함된 수를 set에 넣는다.&lt;&#x2F;li&gt;
&lt;li&gt;set의 insert를 사용하여 삽입 즉시 크기순으로 정렬되도록 한다.&lt;&#x2F;li&gt;
&lt;li&gt;출력할 N번째 악마의 숫자를 찾기 위해 iterator를 사용한다. set은 직접 참조가 되지 않으므로 for문을 사용하여 devilnum.begin()부터 시작하여 N만큼 iterator를 증가시킨다.&lt;&#x2F;li&gt;
&lt;li&gt;iterator를 사용하여 검색한 악마의 숫자를 출력한다.&lt;&#x2F;li&gt;
&lt;li&gt;위의 순서대로 구현하니 정답을 출력했다.&lt;&#x2F;li&gt;
&lt;li&gt;경우의 수를 생각해 보았을 때 가능한 범위여서 4중 for문을 사용하였으나… 아무리 생각해도 난잡한 코드이다.&lt;&#x2F;li&gt;
&lt;li&gt;새로운 풀이 방법을 알아보아야 겠다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    set&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; devilnum;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; j++)
&lt;&#x2F;span&gt;&lt;span&gt;        { 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; k = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; k &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; k++)
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; l = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; l &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; l++)
&lt;&#x2F;span&gt;&lt;span&gt;                {
&lt;&#x2F;span&gt;&lt;span&gt;                    devilnum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(i*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;666&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span&gt;+ j*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;+ k*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;+ l);
&lt;&#x2F;span&gt;&lt;span&gt;                    devilnum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(i*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span&gt;+ j*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;666&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;+ k*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;+ l);
&lt;&#x2F;span&gt;&lt;span&gt;                    devilnum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(i*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span&gt;+ j*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span&gt;+ k*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;666&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;+ l);
&lt;&#x2F;span&gt;&lt;span&gt;                    devilnum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(i*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span&gt;+ j*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span&gt;+ k*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000 &lt;&#x2F;span&gt;&lt;span&gt;+ l*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;666&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; index;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; index;
&lt;&#x2F;span&gt;&lt;span&gt;    set&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;::iterator iter;
&lt;&#x2F;span&gt;&lt;span&gt;    iter = devilnum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; index; i++) iter++;
&lt;&#x2F;span&gt;&lt;span&gt;    iter--;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; *iter &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1436&quot;&gt;1436번: 영화감독 숌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1094 - 막대기</title>
		<published>2022-10-31T00:00:00+00:00</published>
		<updated>2022-10-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1094-magddagi/" type="text/html"/>
		<id>https://js970.github.io/1094-magddagi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2022년 10월 31일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;입력값을 저장하는 변수 X를 설정한다.&lt;&#x2F;li&gt;
&lt;li&gt;반복문을 이용하여 X에서 2의 거듭제곱 값들 중 입력값보다 작거나 같은 값 중 가장 큰 값을 삔다.&lt;&#x2F;li&gt;
&lt;li&gt;반복문에서 한번 값을 뺀 후에는 count를 1만큼 증가시키고 continue를 이용해 반복문의 끝으로 이동한다.&lt;&#x2F;li&gt;
&lt;li&gt;X 가 0이 될 경우의 count값이 정답 출력이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; X, cnt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; X;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(X)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(X==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            X = X-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(X&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            X = X-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(X&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            X = X-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(X&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            X = X-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(X&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            X = X-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(X&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            X = X-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            X = X-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            cnt++;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; cnt &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;aside&gt;
⚠️ 이유는 모르겠지만 백준 코드 제출 시 main에서 return 1을 할 경우 컴파일 에러가 발생한다. return 0으로 설정하자.
&lt;&#x2F;aside&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1094&quot;&gt;1094번: 막대기&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>1181 - 단어 정렬</title>
		<published>2022-10-31T00:00:00+00:00</published>
		<updated>2022-10-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1181-ddaeo-jjeonryeol/" type="text/html"/>
		<id>https://js970.github.io/1181-ddaeo-jjeonryeol/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2022년 10월 31일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;조건이 많은 문제였다.&lt;&#x2F;li&gt;
&lt;li&gt;조건 1 : 짧은 길이의 단어를 먼저 출력한다.
&lt;ul&gt;
&lt;li&gt;단어의 최대 길이가 50이었으므로, 1부터 50까지 반복하는 for문을 사용하여 출력할 때 단어의 길이가 짧은 것부터 출력하도록 하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;조건 2 : 길이가 같은 경우 알파벳 순으로 출력한다.
&lt;ul&gt;
&lt;li&gt;조건 2를 만족시키기 위해 set 컨테이너의 insert 메소드를 사용하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;조건 3 : 알파벳 소문자로 이루어진 단어만 출력한다.
&lt;ul&gt;
&lt;li&gt;조건 3을 만족시키기 위해 cctype헤더의 islower을 사용하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;조건 4 : 같은 단어가 여러번 입력되었을 경우 한번만 출력한다.
&lt;ul&gt;
&lt;li&gt;조건 4를 만족시키기 위해 set 컨테이너를 사용하였다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;위의 조건들에 대한 접근법이 모두 적절하여 정답을 출력했다.&lt;&#x2F;li&gt;
&lt;li&gt;문제 조건으로 미루어 이중 반복문을 사용해도 제한시간 안에 문제없이 동작할 것이라고 생각했다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 이 방법은 세련되지 못한 방법인 것 같다.&lt;&#x2F;li&gt;
&lt;li&gt;추후 다른 문제풀이 방법을 생각해 보는 것이 좋을 것 같다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cctype&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; itr;
&lt;&#x2F;span&gt;&lt;span&gt;    string str;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; itr;
&lt;&#x2F;span&gt;&lt;span&gt;    set&amp;lt;string&amp;gt; strs;
&lt;&#x2F;span&gt;&lt;span&gt;    set&amp;lt;string&amp;gt;::iterator iter;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; check = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check and add to container if string is only consist of lowercase alphabet
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; itr; i ++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; str;
&lt;&#x2F;span&gt;&lt;span&gt;        check = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;(); i++)
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;islower&lt;&#x2F;span&gt;&lt;span&gt;(str[i]))
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                check = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(check) strs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(str);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; print container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;; i++)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(iter = strs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(); iter != strs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;(); iter++)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(iter-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() == i)
&lt;&#x2F;span&gt;&lt;span&gt;                cout &amp;lt;&amp;lt; *iter &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ref&quot;&gt;ref&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1181&quot;&gt;1181번: 단어 정렬&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;cctype 헤더파일&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside&gt;
⚠️ 문자의 종류를 판단하는 함수를 제공한다.
대표적으로 isdigit, islower, isxdigit(16진수), ispunct(punctuation - 쉼표, 마침표 등)의 함수가 있다.
&lt;&#x2F;aside&gt;
&lt;ul&gt;
&lt;li&gt;set 컨테이너&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside&gt;
⚠️ set 컨테이너는 unique한 원소들을 특별한 순서에 따라 저장하는 컨테이너이다.
set 컨테이너는 연관 컨테이너의 하나이다. ⇒ 노드
default정렬 방법은 오름차순 정렬이다.
중위순회를 통해 순서대로 출력하는 것이 가능하며, iterator를 이용하면 자동으로 쉽게 출력할 수 있다.
set 컨테이너의 iterator은 ++과 —등 증감연산자를 지원한다.
iterator를 사용하여 원소에 접근할 때는 포인터를 통해 접근한다.(사용 시 유의)
set::insert()는 insert즉시 알파벳순으로 정렬해주는 메소드이다.
&lt;&#x2F;aside&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>1010 - 다리 놓기</title>
		<published>2022-10-30T00:00:00+00:00</published>
		<updated>2022-10-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/1010-dari-nohgi/" type="text/html"/>
		<id>https://js970.github.io/1010-dari-nohgi/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;난이도: 실버 5&lt;&#x2F;li&gt;
&lt;li&gt;날짜: 2022년 10월 30일&lt;&#x2F;li&gt;
&lt;li&gt;상태: Correct&lt;&#x2F;li&gt;
&lt;li&gt;추가 검토 여부: No&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;solution&quot;&gt;solution&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;문제를 읽어보면 결국 combination계산 한번으로 문제의 정답을 구할 수 있음을 알 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;최대 입력이 ${}&lt;em&gt;{30}C&lt;&#x2F;em&gt;{15}$이고 제한 시간은 0.5초이므로 일반적인 재귀 함수 형태로 구현하면 시간 내에 정답을 구할 수 없다.&lt;&#x2F;li&gt;
&lt;li&gt;조합의 기본 공식인 ${}&lt;em&gt;{n}C&lt;&#x2F;em&gt;{r} = {}&lt;em&gt;{n-1}C&lt;&#x2F;em&gt;{r-1} + {}&lt;em&gt;{n-1}C&lt;&#x2F;em&gt;{r}$을 사용하여 해결한다.&lt;&#x2F;li&gt;
&lt;li&gt;위 공식을 사용하여 재귀 함수로 구현하여도 제한 시간을 살짝 넘겨 오답을 출력했다.&lt;&#x2F;li&gt;
&lt;li&gt;전역 combination배열을 만들어 재귀 시마다 반복해서 연산하는 값을 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;이 방법을 사용하여 여러 번 호출되는 값의 중복 연산을 막을 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;전역 배열과 재귀 함수를 모두 사용하여 구현하니 정답을 출력했다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;code&quot;&gt;code&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; combarr[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;] {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;combination&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(select == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        combarr[total][select] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(select == total)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        combarr[total][select] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(combarr[total][select] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            combarr[total][select]
&lt;&#x2F;span&gt;&lt;span&gt;							 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;combination&lt;&#x2F;span&gt;&lt;span&gt;(total-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, select-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;combination&lt;&#x2F;span&gt;&lt;span&gt;(total-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, select);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; combarr[total][select];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; count;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; N, M;
&lt;&#x2F;span&gt;&lt;span&gt;    cin &amp;gt;&amp;gt; count;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(count--)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; N;
&lt;&#x2F;span&gt;&lt;span&gt;        cin &amp;gt;&amp;gt; M;
&lt;&#x2F;span&gt;&lt;span&gt;        cout &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;combination&lt;&#x2F;span&gt;&lt;span&gt;(M, N) &amp;lt;&amp;lt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;aside&gt;
⚠️ TeX에서 조합(순열)을 표현하기 위해서는 전치첨자와 후치첨자를 사용한다.
${}_{100}C_{10}$ : {}_{100}C_{10}
&lt;&#x2F;aside&gt;
# ref
[1010번: 다리 놓기](https:&#x2F;&#x2F;www.acmicpc.net&#x2F;problem&#x2F;1010)</content>
	</entry>
	<entry xml:lang="en">
		<title>VPN &amp; Subnet</title>
		<published>2022-10-25T00:00:00+00:00</published>
		<updated>2022-10-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/vpn-subnet/" type="text/html"/>
		<id>https://js970.github.io/vpn-subnet/</id>
		<content type="html">&lt;h2 id=&quot;vpn-virtual-private-network&quot;&gt;VPN : Virtual Private Network&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;“가상” 사설 네트워크이다.&lt;&#x2F;li&gt;
&lt;li&gt;“가상” 이라는 것은 결국 물리적인 사설 네트워크가 아닌 공용 네트워크를 사용한다는 것을 의미&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside&gt;
💡 L2TP, PPTP, IPSEC VPN… 많은 VPN 솔루션이 존재한다.
&lt;&#x2F;aside&gt;
&lt;ul&gt;
&lt;li&gt;수업 시간에 설명한 VPN 도식, IP turneling을 통해 동작한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;VPN&amp;amp;Subnet&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;subnetting&quot;&gt;Subnetting&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;인터넷은 라우팅 확장성 문제와 라우팅 시스템의 공간 사용률 이슈가 있다.&lt;&#x2F;li&gt;
&lt;li&gt;라우팅 확장성 - 라우팅 프로토콜에서 전송하고, 라우팅 테이블에 저장되는 network numbers의 수를 최소화 해야 한다. ⇒ Hieracrchy를 통해 해결&lt;&#x2F;li&gt;
&lt;li&gt;라우터 시스템의 공간 사용률 ⇒ “Subnet”을 통해 주소와 공간의 사용률을 확보한다.&lt;&#x2F;li&gt;
&lt;li&gt;사실, “Subnet을 통해 주소와 공간의 효율적인 사용 뿐만 아니라 IP주소의 Hierarchy도 확보할 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;아래는 IPv4의 Subnetting이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;VPN&amp;amp;Subnet&#x2F;Untitled%201.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C 클래스 사설 IP 대역은 192.168.XXX.YYY, A 클래스 사설 IP 대역은 10.XXX.YYY.ZZZ이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;IPv4의 클래스 개념은 매우 비효율적이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;2대의 Host가 있을 경우 C클래스 네트워크를 사용해야 한다.&lt;&#x2F;p&gt;
&lt;p&gt;⇒ 2&#x2F;255, 사용률이 0.78%에 불과하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;마찬가지로 256대의 Host 가 있을 경우 B클래스 네트워크가 필요하다.&lt;&#x2F;p&gt;
&lt;p&gt;⇒ 256&#x2F;65535 = 0.39% ⇒ IP의 낭비가 매우 심각하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;다음은 부산대학교 네트워크를 예시로 Subnet을 나타낸 그림이다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;VPN&amp;amp;Subnet&#x2F;Untitled%202.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;부산대학교는 ISP에게 B클래스 IP주소를 공급받는다.&lt;&#x2F;li&gt;
&lt;li&gt;부산대학교의 각 Subnet은 ISP에게 직접 C클래스 IP주소를 공급받는 것이 아닌, 부산대학교가 ISP로부터 공급받은 B클래스 IP 주소를 C클래스 IP로 변환하고, 서브넷 마스크를 255.255.255.0으로 설정하여 virtually partitioning된다.&lt;&#x2F;li&gt;
&lt;li&gt;ISP는 classless IP address assignment를 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;ISP에서는 소비자에게 필요한 만큼 IP address를 할당할 수 있다. ⇒ 주소 공간의 낭비를 줄인다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside&gt;
💡 CIDR(Classless InterDomain Routing)을 사용한다.
&lt;&#x2F;aside&gt;
&lt;h2 id=&quot;ipv4-decimal-notation&quot;&gt;IPv4 Decimal Notation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;8bit.8bit.8bit.8bit가 기본적인 형식이지만…&lt;&#x2F;li&gt;
&lt;li&gt;8bit.8bit.10bit.6bit 이런 식으로 설정할 수도 있다.&lt;&#x2F;li&gt;
&lt;li&gt;위 경우 subnet mask는 255.255.255.192(11111111.11111111.11111111.11000000)이다.&lt;&#x2F;li&gt;
&lt;li&gt;subnet mask를 이용해서 가능한 host의 수를 알 수 있다.&lt;&#x2F;li&gt;
&lt;li&gt;예를 들어 subnet mask가 255.255.255.224인 경우 host의 표현을 위해 5비트를 사용하므로 최대 $2^{5}-1$명의 host를 나타낼 수 있다. ( possible host = $2^{n}-1$)&lt;&#x2F;li&gt;
&lt;li&gt;이러한 subnet mask의 설정을 사용률을 늘일 수 있다. 하지만 보통은 네트워크 관리자가 이렇게까지 설정하기 귀찮으므로 255.255.255.0 처럼 관습적인 subnet mask를 사용한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;VPN&amp;amp;Subnet&#x2F;Untitled%203.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Host #1에서 Host #2로 datagram을 전송한다고 했을 때 Next hop은 R1이다(en0).&lt;&#x2F;li&gt;
&lt;li&gt;Host #1에서 Host #3로 datagram을 전송한다고 했을 때 Next hop 은 R2이다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;reference&quot;&gt;reference&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Q0EgiHhw-E4&quot;&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Q0EgiHhw-E4&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;securitymax.tistory.com&#x2F;133&quot;&gt;CIDR - 비클래스형 IP주소할당 체계&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Special IP &amp; NAT</title>
		<published>2022-10-20T00:00:00+00:00</published>
		<updated>2022-10-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://js970.github.io/special-ip-nat/" type="text/html"/>
		<id>https://js970.github.io/special-ip-nat/</id>
		<content type="html">&lt;h2 id=&quot;4-special-ip-address&quot;&gt;4 special IP address&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Multicast IP address → class D&lt;&#x2F;li&gt;
&lt;li&gt;Broadcast IP address
&lt;ul&gt;
&lt;li&gt;255.255.255.255(broadcast on LAN)&lt;&#x2F;li&gt;
&lt;li&gt;164.125.255.255(broadcast on distance network)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside&gt;
⚠️ **broadcast 는 L2 broadcast와 L3 broadcast가 있다**
- L2 broadcast : destination MAC address가 ff:ff:ff:ff:ff:ff
→ 로컬 네트워크의 모든 노드에게 이 프레임을 전송한다. 스위치는 이 프레임을 보는 즉시 모든 인터페이스를 통해 이 프레임을 흘려보낸다.(flood)
- L3 broadcast : destination IP address가 특별한 값을 가진다.
→ 255.255.255.255의 IP주소를 목적지 IP주소로 설정한다면 LAN의 라우터를 포함한 모든 노드로 패킷을 전송한다. 또한, 이 경우에는 dst MAC address가 ff:ff:ff:ff:ff:ff임을 확인할 수 있다. 이는 L2 broadcast가 동시에 진행됨을 의미한다.
&lt;&#x2F;aside&gt;
&lt;aside&gt;
⚠️ **direct broadcast**
10.11.22.0&#x2F;24 네트워크에서 direct broadcast를 위한 IP 주소는 10.11.22.255이다.
이 주소로 broadcast를 시도하면 위의 255.255.255.255(local broadcast)와 같은 동작을 한다.
마찬가지로 이 경우에도 destination MAC은 ff:ff:ff:ff:ff:ff이다. 
하지만 위의 경우와 다르게, 이렇게 direct broadcast를 시도하면 와이어샤크 등 패킷 캡쳐 프로그램은 이를 broadcast로 인식하지 못한다.(&#x2F;24 mask가 있는 네트워크인지 알 방법이 없으므로)
같은 역할을 하는 것 처럼 보이지만, direct broadcast를 사용할 경우 local뿐만이 아닌 broadcast on distance network가 가능하다.
direct broadcast를 이용한 distance network로의 broadcast는 해당 네트워크의 netmask를 아는 라우터를 제외하고는 unicast로 인식되어 패킷이 전송된다. broadcast할 네트워크에서 netmask를 통해 broadcast되기 전까지는 unicast규칙을 따른다.
&lt;&#x2F;aside&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.practicalnetworking.net&#x2F;stand-alone&#x2F;local-broadcast-vs-directed-broadcast&#x2F;&quot;&gt;Local Broadcast vs Directed Broadcast - Practical Networking .net&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Loopback IP address
&lt;ul&gt;
&lt;li&gt;destination IP address : 127.0.0.1&lt;&#x2F;li&gt;
&lt;li&gt;destination IP address가 위와 같은 주소를 가진다면 loopback IP address이다.&lt;&#x2F;li&gt;
&lt;li&gt;네트워크 계층에서는 데이터링크 계층 및 물리 계층으로 해당 패킷을 내려보내지 않고, 마치 자신이 다시 수신한 것 처럼 상위 계층(전송 계층, L4)으로 올려보낸다.&lt;&#x2F;li&gt;
&lt;li&gt;서버&#x2F;클라이언트 프로그램이 네트워크에 연결되지 않은 상태에서 디버깅하는 용도로 사용된다.&lt;&#x2F;li&gt;
&lt;li&gt;시스템 자신을 의미하는 표현으로 내부적으로만 사용된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Private&#x2F;Public IP address
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private IP :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;10.XX.YY.ZZ - class A&lt;&#x2F;li&gt;
&lt;li&gt;192.168.XX.YY - class B&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;public IP :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;모두에게 열려 있다.&lt;&#x2F;li&gt;
&lt;li&gt;동일한 IP주소가 존재할 수 없다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;일반 사용자의 경우 하나의 public IP를 ISP(Internet Service Provider)로부터 구매한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;public IP를 이용해 subnet을 구축하고, DHCP를 이용하여 private IP를 분배한다.&lt;&#x2F;p&gt;
&lt;p&gt;⇒ 라우터는 private IP로는 절대 포워딩하지 않는다.&lt;&#x2F;p&gt;
&lt;p&gt;⇒ 그렇다면 어떻게 private IP에 연결된 device에서 인터넷을 이용할 수 있는 것인가??&lt;&#x2F;p&gt;
&lt;p&gt;⇒ NAT(Network Address Translation)을 이용하여 가능하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;nat-network-address-translation&quot;&gt;NAT(Network Address Translation)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Special_IP&amp;amp;NAT&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ipv4는 $2^{32}$개의 주소 할당이 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;하지만 IoT의 시대로 접어들면서 이는 사실상 불가능해졌다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 해결하기 위해 IPv6가 나왔으나 모든 기기에서 ipv4를 ipv6로 한번에 교체하는 것 역시 불가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;이를 위해 NAT을 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;NAT를 사용하여 다수의 private IP address를 하나의 public IP address로 변환하는 것이 가능.&lt;&#x2F;li&gt;
&lt;li&gt;내부망을 사용하는 PC에는 사설 IP를 부여하고, 외부망을 사용할 경우 하나의 public IP를 사용하는 형태로 운영 가능하다.&lt;&#x2F;li&gt;
&lt;li&gt;NAT은 IP address 와 Port로 구성된 NAT forwarding table을 이용하여 이에 맞게 주소 변환 서비스를 제공한다.&lt;&#x2F;li&gt;
&lt;li&gt;동작 과정은 아래와 같다.
&lt;ol&gt;
&lt;li&gt;outgoing packet이 NAT box를 거칠 때, packet의 original source ip address는 public ip address로 교체된다.&lt;&#x2F;li&gt;
&lt;li&gt;TCP port는 65,536($2^{16}$)개의 NAT index로 replace된다. 이 과정은 서로 다른 호스트가 같은 포트를 사용할 수 있기 때문에 필수적이다. 이때 NAT index로 mapping되는 original ip address, original source port를 NAT테이블에 저장한다.&lt;&#x2F;li&gt;
&lt;li&gt;ip, TCP header의 checksum을 다시 계산한다.&lt;&#x2F;li&gt;
&lt;li&gt;ISP로부터의 packet이 NAT box로 돌아오면 헤더의 port를 읽어서 NAT box의 mapping table의 index로 사용한다.&lt;&#x2F;li&gt;
&lt;li&gt;NAT box의 index를 통해 찾은 original IP address, original port number로 packet을 변경한다.&lt;&#x2F;li&gt;
&lt;li&gt;ip, TCP header의 checksum을 다시 계산한다.&lt;&#x2F;li&gt;
&lt;li&gt;라우터를 통해 실제 서비스 요청 노드로 packet을 전송한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;image&#x2F;Special_IP&amp;amp;NAT&#x2F;Untitled%201.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nat-ddajjeo&quot;&gt;NAT 단점&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IP 는 connectionless한 특성을 가지지만 NAT는 connection oriented이다.&lt;&#x2F;p&gt;
&lt;p&gt;→ 복잡성을 증가시킨다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;PORT를 사용하므로 TCP &amp;amp; UDP만 사용 가능하다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Maximum connection의 개수가 65535개로 제한된다(16 bits)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;성능 감소(레이턴시)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
